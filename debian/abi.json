{"Filepath":"checker.go","Functions":[{"Uniquefunname":"func (m *StartManager) DumpMemRecord() (string, *dbus.Error)","Funname":"DumpMemRecord","Returntype":"(string, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *StartManager) IsMemSufficient() (bool, *dbus.Error)","Funname":"IsMemSufficient","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *StartManager) TryAgain(launch bool) *dbus.Error","Funname":"TryAgain","Returntype":"*dbus.Error","Args":"launch bool"},{"Uniquefunname":"func getActionName(action string) string","Funname":"getActionName","Returntype":"string","Args":"action string"},{"Uniquefunname":"func getCurAction() string","Funname":"getCurAction","Returntype":"string","Args":""},{"Uniquefunname":"func getNeededMemory(name string) uint64","Funname":"getNeededMemory","Returntype":"uint64","Args":"name string"},{"Uniquefunname":"func handleCurAction(action string) error","Funname":"handleCurAction","Returntype":"error","Args":"action string"},{"Uniquefunname":"func handleMemInsufficient(v string) error","Funname":"handleMemInsufficient","Returntype":"error","Args":"v string"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func (m *StartManager) DumpMemRecord() (string, *dbus.Error)","Funname":"main.StartManager.DumpMemRecord","Returntype":"(string, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *StartManager) IsMemSufficient() (bool, *dbus.Error)","Funname":"main.StartManager.IsMemSufficient","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *StartManager) TryAgain(launch bool) *dbus.Error","Funname":"main.StartManager.TryAgain","Returntype":"*dbus.Error","Args":"launch bool"},{"Uniquefunname":"func (m *StartManager) setPropNeededMemory(v uint64)","Funname":"main.StartManager.setPropNeededMemory","Returntype":"","Args":"v uint64"},{"Uniquefunname":"func getActionName(action string) string","Funname":"main.getActionName","Returntype":"string","Args":"action string"},{"Uniquefunname":"func getCurAction() string","Funname":"main.getCurAction","Returntype":"string","Args":""},{"Uniquefunname":"func getNeededMemory(name string) uint64","Funname":"main.getNeededMemory","Returntype":"uint64","Args":"name string"},{"Uniquefunname":"func handleCurAction(action string) error","Funname":"main.handleCurAction","Returntype":"error","Args":"action string"},{"Uniquefunname":"func handleMemInsufficient(v string) error","Funname":"main.handleMemInsufficient","Returntype":"error","Args":"v string"},{"Uniquefunname":"func init()","Funname":"main.init","Returntype":"","Args":""},{"Uniquefunname":"func saveNeededMemory(name, cgroupName string) error","Funname":"main.saveNeededMemory","Returntype":"error","Args":"name, cgroupName string"},{"Uniquefunname":"func setCurAction(action string)","Funname":"main.setCurAction","Returntype":"","Args":"action string"},{"Uniquefunname":"func showWarningDialog(action string)","Funname":"main.showWarningDialog","Returntype":"","Args":"action string"},{"Uniquefunname":"func startMemTicker()","Funname":"main.startMemTicker","Returntype":"","Args":""},{"Uniquefunname":"func stopMemTicker()","Funname":"main.stopMemTicker","Returntype":"","Args":""},{"Uniquefunname":"func updateNeededMemory()","Funname":"main.updateNeededMemory","Returntype":"","Args":""},{"Uniquefunname":"func saveNeededMemory(name, cgroupName string) error","Funname":"saveNeededMemory","Returntype":"error","Args":"name, cgroupName string"},{"Uniquefunname":"func setCurAction(action string)","Funname":"setCurAction","Returntype":"","Args":"action string"},{"Uniquefunname":"func (m *StartManager) setPropNeededMemory(v uint64)","Funname":"setPropNeededMemory","Returntype":"","Args":"v uint64"},{"Uniquefunname":"func showWarningDialog(action string)","Funname":"showWarningDialog","Returntype":"","Args":"action string"},{"Uniquefunname":"func startMemTicker()","Funname":"startMemTicker","Returntype":"","Args":""},{"Uniquefunname":"func stopMemTicker()","Funname":"stopMemTicker","Returntype":"","Args":""},{"Uniquefunname":"func updateNeededMemory()","Funname":"updateNeededMemory","Returntype":"","Args":""}],"Records":[{"Name":"var:main","Fields":["main._actionLocker","main._app","main._appAction","main._cmd","main._curAction","main._curNeededMem","main._memQueryWait","main._memTicker","main._tickerStopped"]},{"Name":"const:main","Fields":["main.defaultNeededMem","main.envMemQueryWait"]}]}
{"Filepath":"copyfile_test.go","Functions":[{"Uniquefunname":"func TestCopyFileCopyFileNone(t *testing.T)","Funname":"TestCopyFileCopyFileNone","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCopyFileNotKeepSymlink(t *testing.T)","Funname":"TestCopyFileNotKeepSymlink","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCopyFileOverWrite(t *testing.T)","Funname":"TestCopyFileOverWrite","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCopyFileCopyFileNone(t *testing.T)","Funname":"main.TestCopyFileCopyFileNone","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCopyFileNotKeepSymlink(t *testing.T)","Funname":"main.TestCopyFileNotKeepSymlink","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCopyFileOverWrite(t *testing.T)","Funname":"main.TestCopyFileOverWrite","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func testCopyFileInit()","Funname":"main.testCopyFileInit","Returntype":"","Args":""},{"Uniquefunname":"func testCopyFileInit()","Funname":"testCopyFileInit","Returntype":"","Args":""}],"Records":null}
{"Filepath":"default_font_config.go","Functions":[{"Uniquefunname":"func (cfg defaultFontConfig) Get() (standard, monospace string)","Funname":"Get","Returntype":"(standard, monospace string)","Args":""},{"Uniquefunname":"func loadDefaultFontConfig(filename string) (defaultFontConfig, error)","Funname":"loadDefaultFontConfig","Returntype":"(defaultFontConfig, error)","Args":"filename string"},{"Uniquefunname":"func (cfg defaultFontConfig) Get() (standard, monospace string)","Funname":"main.defaultFontConfig.Get","Returntype":"(standard, monospace string)","Args":""},{"Uniquefunname":"func loadDefaultFontConfig(filename string) (defaultFontConfig, error)","Funname":"main.loadDefaultFontConfig","Returntype":"(defaultFontConfig, error)","Args":"filename string"}],"Records":[{"Name":"struct:main.fontConfigItem","Fields":["main.fontConfigItem.Monospace string","main.fontConfigItem.Standard string"]}]}
{"Filepath":"etc_x11_session_d.go","Functions":[{"Uniquefunname":"func runScript00DeepinDdeEnvFaster()","Funname":"main.runScript00DeepinDdeEnvFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript01DeepinProfileFaster()","Funname":"main.runScript01DeepinProfileFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript05UosProfileFaster()","Funname":"main.runScript05UosProfileFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript20DBusXdgRuntimeFaster()","Funname":"main.runScript20DBusXdgRuntimeFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript30X11CommonXResourcesFaster()","Funname":"main.runScript30X11CommonXResourcesFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript35X11CommonXHostLocalFaster(xConn *x.Conn)","Funname":"main.runScript35X11CommonXHostLocalFaster","Returntype":"","Args":"xConn *x.Conn"},{"Uniquefunname":"func runScript70ImConfigLaunchFaster()","Funname":"main.runScript70ImConfigLaunchFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript90GpgAgentFaster()","Funname":"main.runScript90GpgAgentFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript90QtA11yFaster()","Funname":"main.runScript90QtA11yFaster","Returntype":"","Args":""},{"Uniquefunname":"func runXSessionScriptsFaster(xConn *x.Conn)","Funname":"main.runXSessionScriptsFaster","Returntype":"","Args":"xConn *x.Conn"},{"Uniquefunname":"func runScript00DeepinDdeEnvFaster()","Funname":"runScript00DeepinDdeEnvFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript01DeepinProfileFaster()","Funname":"runScript01DeepinProfileFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript05UosProfileFaster()","Funname":"runScript05UosProfileFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript20DBusXdgRuntimeFaster()","Funname":"runScript20DBusXdgRuntimeFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript30X11CommonXResourcesFaster()","Funname":"runScript30X11CommonXResourcesFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript35X11CommonXHostLocalFaster(xConn *x.Conn)","Funname":"runScript35X11CommonXHostLocalFaster","Returntype":"","Args":"xConn *x.Conn"},{"Uniquefunname":"func runScript70ImConfigLaunchFaster()","Funname":"runScript70ImConfigLaunchFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript90GpgAgentFaster()","Funname":"runScript90GpgAgentFaster","Returntype":"","Args":""},{"Uniquefunname":"func runScript90QtA11yFaster()","Funname":"runScript90QtA11yFaster","Returntype":"","Args":""},{"Uniquefunname":"func runXSessionScriptsFaster(xConn *x.Conn)","Funname":"runXSessionScriptsFaster","Returntype":"","Args":"xConn *x.Conn"}],"Records":null}
{"Filepath":"launch_group.go","Functions":[{"Uniquefunname":"func (infos launchGroups) Len() int","Funname":"Len","Returntype":"int","Args":""},{"Uniquefunname":"func (infos launchGroups) Less(i, j int) bool","Funname":"Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func (infos launchGroups) Swap(i, j int)","Funname":"Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func doLoadGroupFile(filename string) (launchGroups, error)","Funname":"doLoadGroupFile","Returntype":"(launchGroups, error)","Args":"filename string"},{"Uniquefunname":"func loadGroupFile() (launchGroups, error)","Funname":"loadGroupFile","Returntype":"(launchGroups, error)","Args":""},{"Uniquefunname":"func doLoadGroupFile(filename string) (launchGroups, error)","Funname":"main.doLoadGroupFile","Returntype":"(launchGroups, error)","Args":"filename string"},{"Uniquefunname":"func (infos launchGroups) Len() int","Funname":"main.launchGroups.Len","Returntype":"int","Args":""},{"Uniquefunname":"func (infos launchGroups) Less(i, j int) bool","Funname":"main.launchGroups.Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func (infos launchGroups) Swap(i, j int)","Funname":"main.launchGroups.Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func loadGroupFile() (launchGroups, error)","Funname":"main.loadGroupFile","Returntype":"(launchGroups, error)","Args":""}],"Records":[{"Name":"struct:main.Cmd","Fields":["main.Cmd.Args []string","main.Cmd.Command string","main.Cmd.Wait bool"]},{"Name":"struct:main.launchGroup","Fields":["main.launchGroup.Group []Cmd","main.launchGroup.Priority uint32"]},{"Name":"const:main","Fields":["main.sysLaunchGroupFile","main.userLaunchGroupFile"]}]}
{"Filepath":"main.go","Functions":[{"Uniquefunname":"func doSetLogLevel(level log.Priority)","Funname":"doSetLogLevel","Returntype":"","Args":"level log.Priority"},{"Uniquefunname":"func handleKWinReady(sm *SessionManager)","Funname":"handleKWinReady","Returntype":"","Args":"sm *SessionManager"},{"Uniquefunname":"func handleOSSignal(m *SessionManager)","Funname":"handleOSSignal","Returntype":"","Args":"m *SessionManager"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func launchCoreComponents(sm *SessionManager)","Funname":"launchCoreComponents","Returntype":"","Args":"sm *SessionManager"},{"Uniquefunname":"func logDebugAfter(msg string)","Funname":"logDebugAfter","Returntype":"","Args":"msg string"},{"Uniquefunname":"func logInfoAfter(msg string)","Funname":"logInfoAfter","Returntype":"","Args":"msg string"},{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func doSetLogLevel(level log.Priority)","Funname":"main.doSetLogLevel","Returntype":"","Args":"level log.Priority"},{"Uniquefunname":"func handleKWinReady(sm *SessionManager)","Funname":"main.handleKWinReady","Returntype":"","Args":"sm *SessionManager"},{"Uniquefunname":"func handleOSSignal(m *SessionManager)","Funname":"main.handleOSSignal","Returntype":"","Args":"m *SessionManager"},{"Uniquefunname":"func init()","Funname":"main.init","Returntype":"","Args":""},{"Uniquefunname":"func launchCoreComponents(sm *SessionManager)","Funname":"main.launchCoreComponents","Returntype":"","Args":"sm *SessionManager"},{"Uniquefunname":"func logDebugAfter(msg string)","Funname":"main.logDebugAfter","Returntype":"","Args":"msg string"},{"Uniquefunname":"func logInfoAfter(msg string)","Funname":"main.logInfoAfter","Returntype":"","Args":"msg string"},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""},{"Uniquefunname":"func reapZombies()","Funname":"main.reapZombies","Returntype":"","Args":""},{"Uniquefunname":"func shouldUseDDEKWin() bool","Funname":"main.shouldUseDDEKWin","Returntype":"bool","Args":""},{"Uniquefunname":"func reapZombies()","Funname":"reapZombies","Returntype":"","Args":""},{"Uniquefunname":"func shouldUseDDEKWin() bool","Funname":"shouldUseDDEKWin","Returntype":"bool","Args":""}],"Records":[{"Name":"var:main","Fields":["main._gSettingsConfig","main._homeDir","main._inVM","main._mainBeginTime","main._options","main._useKWin","main._useWayland","main._xConn","main.globalCgExecBin","main.globalXSManager","main.logger"]},{"Name":"const:main","Fields":["main.cmdDdeDesktop","main.cmdDdeDock","main.cmdDdeSessionDaemon","main.cmdKWin"]}]}
{"Filepath":"map_delay_handler.go","Functions":[{"Uniquefunname":"func (dh *mapDelayHandler) AddTask(name string)","Funname":"AddTask","Returntype":"","Args":"name string"},{"Uniquefunname":"func (dh *mapDelayHandler) AddTask(name string)","Funname":"main.mapDelayHandler.AddTask","Returntype":"","Args":"name string"},{"Uniquefunname":"func newMapDelayHandler(delay time.Duration, f func(string)) *mapDelayHandler","Funname":"main.newMapDelayHandler","Returntype":"*mapDelayHandler","Args":"delay time.Duration, f func(string)"},{"Uniquefunname":"func newMapDelayHandler(delay time.Duration, f func(string)) *mapDelayHandler","Funname":"newMapDelayHandler","Returntype":"*mapDelayHandler","Args":"delay time.Duration, f func(string)"}],"Records":[{"Name":"struct:main.mapDelayHandler","Fields":["main.mapDelayHandler.delay time.Duration","main.mapDelayHandler.do func(string)","main.mapDelayHandler.mutex sync.Mutex","main.mapDelayHandler.once *sync.Once","main.mapDelayHandler.task map[string]bool"]}]}
{"Filepath":"map_delay_handler_test.go","Functions":[{"Uniquefunname":"func TestMapDelayHandler(t *testing.T)","Funname":"TestMapDelayHandler","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestMapDelayHandler(t *testing.T)","Funname":"main.TestMapDelayHandler","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"proxychains.go","Functions":[{"Uniquefunname":"func getProxyServerUrl() (string, error)","Funname":"getProxyServerUrl","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func loadProxyChainsConfig(file string) (*ProxyChainsConfig, error)","Funname":"loadProxyChainsConfig","Returntype":"(*ProxyChainsConfig, error)","Args":"file string"},{"Uniquefunname":"func getProxyServerUrl() (string, error)","Funname":"main.getProxyServerUrl","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func loadProxyChainsConfig(file string) (*ProxyChainsConfig, error)","Funname":"main.loadProxyChainsConfig","Returntype":"(*ProxyChainsConfig, error)","Args":"file string"},{"Uniquefunname":"func supportProxyServerOption(appId string) bool","Funname":"main.supportProxyServerOption","Returntype":"bool","Args":"appId string"},{"Uniquefunname":"func supportProxyServerOption(appId string) bool","Funname":"supportProxyServerOption","Returntype":"bool","Args":"appId string"}],"Records":[{"Name":"struct:main.ProxyChainsConfig","Fields":["main.ProxyChainsConfig.IP string","main.ProxyChainsConfig.Password string","main.ProxyChainsConfig.Port uint32","main.ProxyChainsConfig.Type string","main.ProxyChainsConfig.User string"]}]}
{"Filepath":"session.go","Functions":[{"Uniquefunname":"func (m *SessionManager) CanHibernate() (bool, *dbus.Error)","Funname":"CanHibernate","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *SessionManager) CanLogout() (bool, *dbus.Error)","Funname":"CanLogout","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *SessionManager) CanReboot() (bool, *dbus.Error)","Funname":"CanReboot","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *SessionManager) CanShutdown() (bool, *dbus.Error)","Funname":"CanShutdown","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *SessionManager) CanSuspend() (bool, *dbus.Error)","Funname":"CanSuspend","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *SessionManager) ForceLogout() *dbus.Error","Funname":"ForceLogout","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) ForceReboot() *dbus.Error","Funname":"ForceReboot","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) ForceShutdown() *dbus.Error","Funname":"ForceShutdown","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) Logout() *dbus.Error","Funname":"Logout","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) PowerOffChoose() *dbus.Error","Funname":"PowerOffChoose","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) Reboot() *dbus.Error","Funname":"Reboot","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) RequestHibernate() *dbus.Error","Funname":"RequestHibernate","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) RequestLock() *dbus.Error","Funname":"RequestLock","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) RequestLogout() *dbus.Error","Funname":"RequestLogout","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) RequestReboot() *dbus.Error","Funname":"RequestReboot","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) RequestShutdown() *dbus.Error","Funname":"RequestShutdown","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) RequestSuspend() *dbus.Error","Funname":"RequestSuspend","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) SetLocked(sender dbus.Sender, value bool) *dbus.Error","Funname":"SetLocked","Returntype":"*dbus.Error","Args":"sender dbus.Sender, value bool"},{"Uniquefunname":"func (m *SessionManager) Shutdown() *dbus.Error","Funname":"Shutdown","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) ToggleDebug() *dbus.Error","Funname":"ToggleDebug","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func callSwapSchedHelperPrepare(sessionID string) error","Funname":"callSwapSchedHelperPrepare","Returntype":"error","Args":"sessionID string"},{"Uniquefunname":"func (m *SessionManager) doLogout(force bool)","Funname":"doLogout","Returntype":"","Args":"force bool"},{"Uniquefunname":"func getCurSessionPath() (dbus.ObjectPath, error)","Funname":"getCurSessionPath","Returntype":"(dbus.ObjectPath, error)","Args":""},{"Uniquefunname":"func (m *SessionManager) getLocked() bool","Funname":"getLocked","Returntype":"bool","Args":""},{"Uniquefunname":"func getLoginSession() (*login1.Session, error)","Funname":"getLoginSession","Returntype":"(*login1.Session, error)","Args":""},{"Uniquefunname":"func (m *SessionManager) handleLoginSessionLock()","Funname":"handleLoginSessionLock","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) handleLoginSessionUnlock()","Funname":"handleLoginSessionUnlock","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func initQtThemeConfig() error","Funname":"initQtThemeConfig","Returntype":"error","Args":""},{"Uniquefunname":"func (m *SessionManager) initSession()","Funname":"initSession","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) initSwapSched()","Funname":"initSwapSched","Returntype":"","Args":""},{"Uniquefunname":"func isDeepinVersionChanged() (changed bool, err error)","Funname":"isDeepinVersionChanged","Returntype":"(changed bool, err error)","Args":""},{"Uniquefunname":"func killLangSelector()","Funname":"killLangSelector","Returntype":"","Args":""},{"Uniquefunname":"func killSogouImeWatchdog()","Funname":"killSogouImeWatchdog","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) launchAutostart()","Funname":"launchAutostart","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) launchDDE()","Funname":"launchDDE","Returntype":"","Args":""},{"Uniquefunname":"func (manager *SessionManager) listenDBusSignals()","Funname":"listenDBusSignals","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) logout(force bool)","Funname":"logout","Returntype":"","Args":"force bool"},{"Uniquefunname":"func (m *SessionManager) CanHibernate() (bool, *dbus.Error)","Funname":"main.SessionManager.CanHibernate","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *SessionManager) CanLogout() (bool, *dbus.Error)","Funname":"main.SessionManager.CanLogout","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *SessionManager) CanReboot() (bool, *dbus.Error)","Funname":"main.SessionManager.CanReboot","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *SessionManager) CanShutdown() (bool, *dbus.Error)","Funname":"main.SessionManager.CanShutdown","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *SessionManager) CanSuspend() (bool, *dbus.Error)","Funname":"main.SessionManager.CanSuspend","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *SessionManager) ForceLogout() *dbus.Error","Funname":"main.SessionManager.ForceLogout","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) ForceReboot() *dbus.Error","Funname":"main.SessionManager.ForceReboot","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) ForceShutdown() *dbus.Error","Funname":"main.SessionManager.ForceShutdown","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) Logout() *dbus.Error","Funname":"main.SessionManager.Logout","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) PowerOffChoose() *dbus.Error","Funname":"main.SessionManager.PowerOffChoose","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) Reboot() *dbus.Error","Funname":"main.SessionManager.Reboot","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) RequestHibernate() *dbus.Error","Funname":"main.SessionManager.RequestHibernate","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) RequestLock() *dbus.Error","Funname":"main.SessionManager.RequestLock","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) RequestLogout() *dbus.Error","Funname":"main.SessionManager.RequestLogout","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) RequestReboot() *dbus.Error","Funname":"main.SessionManager.RequestReboot","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) RequestShutdown() *dbus.Error","Funname":"main.SessionManager.RequestShutdown","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) RequestSuspend() *dbus.Error","Funname":"main.SessionManager.RequestSuspend","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) SetLocked(sender dbus.Sender, value bool) *dbus.Error","Funname":"main.SessionManager.SetLocked","Returntype":"*dbus.Error","Args":"sender dbus.Sender, value bool"},{"Uniquefunname":"func (m *SessionManager) Shutdown() *dbus.Error","Funname":"main.SessionManager.Shutdown","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) ToggleDebug() *dbus.Error","Funname":"main.SessionManager.ToggleDebug","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *SessionManager) doLogout(force bool)","Funname":"main.SessionManager.doLogout","Returntype":"","Args":"force bool"},{"Uniquefunname":"func (m *SessionManager) getLocked() bool","Funname":"main.SessionManager.getLocked","Returntype":"bool","Args":""},{"Uniquefunname":"func (m *SessionManager) handleLoginSessionLock()","Funname":"main.SessionManager.handleLoginSessionLock","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) handleLoginSessionUnlock()","Funname":"main.SessionManager.handleLoginSessionUnlock","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) init()","Funname":"main.SessionManager.init","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) initSession()","Funname":"main.SessionManager.initSession","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) initSwapSched()","Funname":"main.SessionManager.initSwapSched","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) launchAutostart()","Funname":"main.SessionManager.launchAutostart","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) launchDDE()","Funname":"main.SessionManager.launchDDE","Returntype":"","Args":""},{"Uniquefunname":"func (manager *SessionManager) listenDBusSignals()","Funname":"main.SessionManager.listenDBusSignals","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) logout(force bool)","Funname":"main.SessionManager.logout","Returntype":"","Args":"force bool"},{"Uniquefunname":"func (m *SessionManager) prepareLogout(force bool)","Funname":"main.SessionManager.prepareLogout","Returntype":"","Args":"force bool"},{"Uniquefunname":"func (m *SessionManager) prepareShutdown(force bool)","Funname":"main.SessionManager.prepareShutdown","Returntype":"","Args":"force bool"},{"Uniquefunname":"func (m *SessionManager) reboot(force bool)","Funname":"main.SessionManager.reboot","Returntype":"","Args":"force bool"},{"Uniquefunname":"func (m *SessionManager) setLocked(value bool)","Funname":"main.SessionManager.setLocked","Returntype":"","Args":"value bool"},{"Uniquefunname":"func (m *SessionManager) shutdown(force bool)","Funname":"main.SessionManager.shutdown","Returntype":"","Args":"force bool"},{"Uniquefunname":"func main.SessionManager.start(conn *x.Conn, sysSignalLoop *dbusutil.SignalLoop, service *dbusutil.Service)*SessionManager","Funname":"main.SessionManager.start","Returntype":"*SessionManager","Args":"conn *x.Conn, sysSignalLoop *dbusutil.SignalLoop, service *dbusutil.Service"},{"Uniquefunname":"func (m *SessionManager) startWMSwitcher()","Funname":"main.SessionManager.startWMSwitcher","Returntype":"","Args":""},{"Uniquefunname":"func callSwapSchedHelperPrepare(sessionID string) error","Funname":"main.callSwapSchedHelperPrepare","Returntype":"error","Args":"sessionID string"},{"Uniquefunname":"func getCurSessionPath() (dbus.ObjectPath, error)","Funname":"main.getCurSessionPath","Returntype":"(dbus.ObjectPath, error)","Args":""},{"Uniquefunname":"func getLoginSession() (*login1.Session, error)","Funname":"main.getLoginSession","Returntype":"(*login1.Session, error)","Args":""},{"Uniquefunname":"func initQtThemeConfig() error","Funname":"main.initQtThemeConfig","Returntype":"error","Args":""},{"Uniquefunname":"func isDeepinVersionChanged() (changed bool, err error)","Funname":"main.isDeepinVersionChanged","Returntype":"(changed bool, err error)","Args":""},{"Uniquefunname":"func killLangSelector()","Funname":"main.killLangSelector","Returntype":"","Args":""},{"Uniquefunname":"func killSogouImeWatchdog()","Funname":"main.killSogouImeWatchdog","Returntype":"","Args":""},{"Uniquefunname":"func newSessionManager(service *dbusutil.Service) *SessionManager","Funname":"main.newSessionManager","Returntype":"*SessionManager","Args":"service *dbusutil.Service"},{"Uniquefunname":"func quitAtSpiService()","Funname":"main.quitAtSpiService","Returntype":"","Args":""},{"Uniquefunname":"func quitObexSevice()","Funname":"main.quitObexSevice","Returntype":"","Args":""},{"Uniquefunname":"func sendMsgToUserExperModule(msg string)","Funname":"main.sendMsgToUserExperModule","Returntype":"","Args":"msg string"},{"Uniquefunname":"func setDPMSMode(on bool)","Funname":"main.setDPMSMode","Returntype":"","Args":"on bool"},{"Uniquefunname":"func setEnvWithMap(envVars map[string]string)","Funname":"main.setEnvWithMap","Returntype":"","Args":"envVars map[string]string"},{"Uniquefunname":"func setLeftPtrCursor()","Funname":"main.setLeftPtrCursor","Returntype":"","Args":""},{"Uniquefunname":"func setupEnvironments1()","Funname":"main.setupEnvironments1","Returntype":"","Args":""},{"Uniquefunname":"func setupEnvironments2()","Funname":"main.setupEnvironments2","Returntype":"","Args":""},{"Uniquefunname":"func startAtSpiService()","Funname":"main.startAtSpiService","Returntype":"","Args":""},{"Uniquefunname":"func startIMFcitx()","Funname":"main.startIMFcitx","Returntype":"","Args":""},{"Uniquefunname":"func startObexService()","Funname":"main.startObexService","Returntype":"","Args":""},{"Uniquefunname":"func stopBAMFDaemon()","Funname":"main.stopBAMFDaemon","Returntype":"","Args":""},{"Uniquefunname":"func updateDBusEnv()","Funname":"main.updateDBusEnv","Returntype":"","Args":""},{"Uniquefunname":"func updateSystemdUserEnv()","Funname":"main.updateSystemdUserEnv","Returntype":"","Args":""},{"Uniquefunname":"func newSessionManager(service *dbusutil.Service) *SessionManager","Funname":"newSessionManager","Returntype":"*SessionManager","Args":"service *dbusutil.Service"},{"Uniquefunname":"func (m *SessionManager) prepareLogout(force bool)","Funname":"prepareLogout","Returntype":"","Args":"force bool"},{"Uniquefunname":"func (m *SessionManager) prepareShutdown(force bool)","Funname":"prepareShutdown","Returntype":"","Args":"force bool"},{"Uniquefunname":"func quitAtSpiService()","Funname":"quitAtSpiService","Returntype":"","Args":""},{"Uniquefunname":"func quitObexSevice()","Funname":"quitObexSevice","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) reboot(force bool)","Funname":"reboot","Returntype":"","Args":"force bool"},{"Uniquefunname":"func sendMsgToUserExperModule(msg string)","Funname":"sendMsgToUserExperModule","Returntype":"","Args":"msg string"},{"Uniquefunname":"func setDPMSMode(on bool)","Funname":"setDPMSMode","Returntype":"","Args":"on bool"},{"Uniquefunname":"func setEnvWithMap(envVars map[string]string)","Funname":"setEnvWithMap","Returntype":"","Args":"envVars map[string]string"},{"Uniquefunname":"func setLeftPtrCursor()","Funname":"setLeftPtrCursor","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) setLocked(value bool)","Funname":"setLocked","Returntype":"","Args":"value bool"},{"Uniquefunname":"func setupEnvironments1()","Funname":"setupEnvironments1","Returntype":"","Args":""},{"Uniquefunname":"func setupEnvironments2()","Funname":"setupEnvironments2","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) shutdown(force bool)","Funname":"shutdown","Returntype":"","Args":"force bool"},{"Uniquefunname":"func start(conn *x.Conn, sysSignalLoop *dbusutil.SignalLoop, service *dbusutil.Service)*SessionManager","Funname":"start","Returntype":"*SessionManager","Args":"conn *x.Conn, sysSignalLoop *dbusutil.SignalLoop, service *dbusutil.Service"},{"Uniquefunname":"func startAtSpiService()","Funname":"startAtSpiService","Returntype":"","Args":""},{"Uniquefunname":"func startIMFcitx()","Funname":"startIMFcitx","Returntype":"","Args":""},{"Uniquefunname":"func startObexService()","Funname":"startObexService","Returntype":"","Args":""},{"Uniquefunname":"func (m *SessionManager) startWMSwitcher()","Funname":"startWMSwitcher","Returntype":"","Args":""},{"Uniquefunname":"func stopBAMFDaemon()","Funname":"stopBAMFDaemon","Returntype":"","Args":""},{"Uniquefunname":"func updateDBusEnv()","Funname":"updateDBusEnv","Returntype":"","Args":""},{"Uniquefunname":"func updateSystemdUserEnv()","Funname":"updateSystemdUserEnv","Returntype":"","Args":""}],"Records":[{"Name":"struct:main.SessionManager","Fields":["main.SessionManager.CurrentSessionPath dbus.ObjectPath","main.SessionManager.CurrentUid string","main.SessionManager.Locked bool","main.SessionManager.Stage int32","main.SessionManager.allowSessionDaemonRun bool","main.SessionManager.cookieLocker sync.Mutex","main.SessionManager.cookies map[string]chan time.Time","main.SessionManager.dbusDaemon *ofdbus.DBus","main.SessionManager.inhibitManager InhibitManager","main.SessionManager.loginSession *login1.Session","main.SessionManager.methods *struct { CanLogout func() `out:\"can\"`; CanShutdown func() `out:\"can\"`; CanReboot func() `out:\"can\"`; CanSuspend func() `out:\"can\"`; CanHibernate func() `out:\"can\"`; SetLocked func() `in:\"value\"`; AllowSessionDaemonRun func() `out:\"allow\"`; Register func() `in:\"id\" out:\"ok\"`; Inhibit func() `in:\"appId,toplevelXid,reason,flags\" out:\"cookie\"`; IsInhibited func() `in:\"flags\" out:\"result\"`; Uninhibit func() `in:\"cookie\"`; GetInhibitors func() `out:\"inhibitors\"`; }","main.SessionManager.mu sync.Mutex","main.SessionManager.objLogin *login1.Manager","main.SessionManager.objLoginSessionSelf *login1.Session","main.SessionManager.powerManager *powermanager.PowerManager","main.SessionManager.service *dbusutil.Service","main.SessionManager.sigLoop *dbusutil.SignalLoop","main.SessionManager.signals *struct { Unlock struct{}; InhibitorAdded, InhibitorRemoved struct { path dbus.ObjectPath; }; }"]},{"Name":"const:main","Fields":["main.SessionStageAppsBegin","main.SessionStageAppsEnd","main.SessionStageCoreBegin","main.SessionStageCoreEnd","main.SessionStageInitBegin","main.SessionStageInitEnd","main.UserExperCLoseAppChanInitLen","main.UserExperCloseApp","main.UserExperOpenApp","main.UserExperPath","main.UserExperServiceName","main.UserLoginMsg","main.UserLogoutMsg","main.UserShutdownMsg","main.atSpiService","main.cmdShutdown","main.keyFont","main.keyFontSize","main.keyIconThemeName","main.keyMonoFont","main.lockFrontDest","main.lockFrontIfc","main.lockFrontObjPath","main.obexService","main.sectionTheme","main.xsKeyQtFontName","main.xsKeyQtMonoFontName"]},{"Name":"struct:main.UeMessageItem","Fields":["main.UeMessageItem.Id string","main.UeMessageItem.Name string","main.UeMessageItem.Path string"]},{"Name":"var:main","Fields":["main._envVars","main.swapSchedDispatcher"]}]}
{"Filepath":"session_manager_inhibit.go","Functions":[{"Uniquefunname":"func (i *Inhibitor) GetAppId() (string, *dbus.Error)","Funname":"GetAppId","Returntype":"(string, *dbus.Error)","Args":""},{"Uniquefunname":"func (i *Inhibitor) GetClientId() (dbus.ObjectPath, *dbus.Error)","Funname":"GetClientId","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":""},{"Uniquefunname":"func (i *Inhibitor) GetFlags() (uint32, *dbus.Error)","Funname":"GetFlags","Returntype":"(uint32, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *SessionManager) GetInhibitors() ([]dbus.ObjectPath, *dbus.Error)","Funname":"GetInhibitors","Returntype":"([]dbus.ObjectPath, *dbus.Error)","Args":""},{"Uniquefunname":"func (i *Inhibitor) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (i *Inhibitor) GetReason() (string, *dbus.Error)","Funname":"GetReason","Returntype":"(string, *dbus.Error)","Args":""},{"Uniquefunname":"func (i *Inhibitor) GetToplevelXid() (uint32, *dbus.Error)","Funname":"GetToplevelXid","Returntype":"(uint32, *dbus.Error)","Args":""},{"Uniquefunname":"func Inhibit(sender dbus.Sender, appId string, toplevelXid uint32, reason string, flags uint32)(inhibitCookie uint32, busErr *dbus.Error)","Funname":"Inhibit","Returntype":"(inhibitCookie uint32, busErr *dbus.Error)","Args":"sender dbus.Sender, appId string, toplevelXid uint32, reason string, flags uint32"},{"Uniquefunname":"func (m *SessionManager) IsInhibited(flags uint32) (bool, *dbus.Error)","Funname":"IsInhibited","Returntype":"(bool, *dbus.Error)","Args":"flags uint32"},{"Uniquefunname":"func (m *SessionManager) Uninhibit(sender dbus.Sender, inhibitCookie uint32) *dbus.Error","Funname":"Uninhibit","Returntype":"*dbus.Error","Args":"sender dbus.Sender, inhibitCookie uint32"},{"Uniquefunname":"func add(sender, appId string, toplevelXid uint32, reason string, flags uint32)(*Inhibitor, error)","Funname":"add","Returntype":"(*Inhibitor, error)","Args":"sender, appId string, toplevelXid uint32, reason string, flags uint32"},{"Uniquefunname":"func (im *InhibitManager) getInhibitorsPaths() []dbus.ObjectPath","Funname":"getInhibitorsPaths","Returntype":"[]dbus.ObjectPath","Args":""},{"Uniquefunname":"func (im *InhibitManager) getNewId() (uint32, error)","Funname":"getNewId","Returntype":"(uint32, error)","Args":""},{"Uniquefunname":"func (i *Inhibitor) getPath() dbus.ObjectPath","Funname":"getPath","Returntype":"dbus.ObjectPath","Args":""},{"Uniquefunname":"func (im *InhibitManager) handleNameLost(name string) *Inhibitor","Funname":"handleNameLost","Returntype":"*Inhibitor","Args":"name string"},{"Uniquefunname":"func (m *SessionManager) initInhibitManager()","Funname":"initInhibitManager","Returntype":"","Args":""},{"Uniquefunname":"func (im *InhibitManager) isInhibited(flags uint32) bool","Funname":"isInhibited","Returntype":"bool","Args":"flags uint32"},{"Uniquefunname":"func main.InhibitManager.add(sender, appId string, toplevelXid uint32, reason string, flags uint32)(*Inhibitor, error)","Funname":"main.InhibitManager.add","Returntype":"(*Inhibitor, error)","Args":"sender, appId string, toplevelXid uint32, reason string, flags uint32"},{"Uniquefunname":"func (im *InhibitManager) getInhibitorsPaths() []dbus.ObjectPath","Funname":"main.InhibitManager.getInhibitorsPaths","Returntype":"[]dbus.ObjectPath","Args":""},{"Uniquefunname":"func (im *InhibitManager) getNewId() (uint32, error)","Funname":"main.InhibitManager.getNewId","Returntype":"(uint32, error)","Args":""},{"Uniquefunname":"func (im *InhibitManager) handleNameLost(name string) *Inhibitor","Funname":"main.InhibitManager.handleNameLost","Returntype":"*Inhibitor","Args":"name string"},{"Uniquefunname":"func (im *InhibitManager) isInhibited(flags uint32) bool","Funname":"main.InhibitManager.isInhibited","Returntype":"bool","Args":"flags uint32"},{"Uniquefunname":"func (im *InhibitManager) remove(sender string, id uint32) (*Inhibitor, error)","Funname":"main.InhibitManager.remove","Returntype":"(*Inhibitor, error)","Args":"sender string, id uint32"},{"Uniquefunname":"func (i *Inhibitor) GetAppId() (string, *dbus.Error)","Funname":"main.Inhibitor.GetAppId","Returntype":"(string, *dbus.Error)","Args":""},{"Uniquefunname":"func (i *Inhibitor) GetClientId() (dbus.ObjectPath, *dbus.Error)","Funname":"main.Inhibitor.GetClientId","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":""},{"Uniquefunname":"func (i *Inhibitor) GetFlags() (uint32, *dbus.Error)","Funname":"main.Inhibitor.GetFlags","Returntype":"(uint32, *dbus.Error)","Args":""},{"Uniquefunname":"func (i *Inhibitor) GetInterfaceName() string","Funname":"main.Inhibitor.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (i *Inhibitor) GetReason() (string, *dbus.Error)","Funname":"main.Inhibitor.GetReason","Returntype":"(string, *dbus.Error)","Args":""},{"Uniquefunname":"func (i *Inhibitor) GetToplevelXid() (uint32, *dbus.Error)","Funname":"main.Inhibitor.GetToplevelXid","Returntype":"(uint32, *dbus.Error)","Args":""},{"Uniquefunname":"func (i *Inhibitor) getPath() dbus.ObjectPath","Funname":"main.Inhibitor.getPath","Returntype":"dbus.ObjectPath","Args":""},{"Uniquefunname":"func (m *SessionManager) GetInhibitors() ([]dbus.ObjectPath, *dbus.Error)","Funname":"main.SessionManager.GetInhibitors","Returntype":"([]dbus.ObjectPath, *dbus.Error)","Args":""},{"Uniquefunname":"func main.SessionManager.Inhibit(sender dbus.Sender, appId string, toplevelXid uint32, reason string, flags uint32)(inhibitCookie uint32, busErr *dbus.Error)","Funname":"main.SessionManager.Inhibit","Returntype":"(inhibitCookie uint32, busErr *dbus.Error)","Args":"sender dbus.Sender, appId string, toplevelXid uint32, reason string, flags uint32"},{"Uniquefunname":"func (m *SessionManager) IsInhibited(flags uint32) (bool, *dbus.Error)","Funname":"main.SessionManager.IsInhibited","Returntype":"(bool, *dbus.Error)","Args":"flags uint32"},{"Uniquefunname":"func (m *SessionManager) Uninhibit(sender dbus.Sender, inhibitCookie uint32) *dbus.Error","Funname":"main.SessionManager.Uninhibit","Returntype":"*dbus.Error","Args":"sender dbus.Sender, inhibitCookie uint32"},{"Uniquefunname":"func (m *SessionManager) initInhibitManager()","Funname":"main.SessionManager.initInhibitManager","Returntype":"","Args":""},{"Uniquefunname":"func (im *InhibitManager) remove(sender string, id uint32) (*Inhibitor, error)","Funname":"remove","Returntype":"(*Inhibitor, error)","Args":"sender string, id uint32"}],"Records":[{"Name":"struct:main.InhibitManager","Fields":["main.InhibitManager.inhibitors map[uint32]*Inhibitor","main.InhibitManager.mu sync.Mutex","main.InhibitManager.nextId uint32"]},{"Name":"struct:main.Inhibitor","Fields":["main.Inhibitor.appId string","main.Inhibitor.createAt time.Time","main.Inhibitor.flags uint32","main.Inhibitor.id uint32","main.Inhibitor.methods *struct { GetAppId func() `out:\"appId\"`; GetClientId func() `out:\"clientId\"`; GetReason func() `out:\"reason\"`; GetFlags func() `out:\"flags\"`; GetToplevelXid func() `out:\"xid\"`; }","main.Inhibitor.reason string","main.Inhibitor.sender string","main.Inhibitor.toplevelXid uint32"]},{"Name":"const:main","Fields":["main.signalInhibitorAdded","main.signalInhibitorRemoved"]}]}
{"Filepath":"session_process.go","Functions":[{"Uniquefunname":"func (m *SessionManager) AllowSessionDaemonRun() (bool, *dbus.Error)","Funname":"AllowSessionDaemonRun","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *SessionManager) Register(id string) (bool, *dbus.Error)","Funname":"Register","Returntype":"(bool, *dbus.Error)","Args":"id string"},{"Uniquefunname":"func genUuid() string","Funname":"genUuid","Returntype":"string","Args":""},{"Uniquefunname":"func (m *SessionManager) launch(bin string, wait bool, args ...string) bool","Funname":"launch","Returntype":"bool","Args":"bin string, wait bool, args ...string"},{"Uniquefunname":"func (m *SessionManager) launchWait(program string, args ...string) bool","Funname":"launchWait","Returntype":"bool","Args":"program string, args ...string"},{"Uniquefunname":"func launchWaitAux(cookie, program string, args []string, cmdWaitDelay time.Duration, endFn func(bool))(launchOk bool)","Funname":"launchWaitAux","Returntype":"(launchOk bool)","Args":"cookie, program string, args []string, cmdWaitDelay time.Duration, endFn func(bool)"},{"Uniquefunname":"func launchWaitCore(name string, program string, args []string, cmdWaitDelay time.Duration, endFn func(bool))","Funname":"launchWaitCore","Returntype":"","Args":"name string, program string, args []string, cmdWaitDelay time.Duration, endFn func(bool)"},{"Uniquefunname":"func (m *SessionManager) launchWithoutWait(bin string, args ...string)","Funname":"launchWithoutWait","Returntype":"","Args":"bin string, args ...string"},{"Uniquefunname":"func (m *SessionManager) AllowSessionDaemonRun() (bool, *dbus.Error)","Funname":"main.SessionManager.AllowSessionDaemonRun","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *SessionManager) Register(id string) (bool, *dbus.Error)","Funname":"main.SessionManager.Register","Returntype":"(bool, *dbus.Error)","Args":"id string"},{"Uniquefunname":"func (m *SessionManager) launch(bin string, wait bool, args ...string) bool","Funname":"main.SessionManager.launch","Returntype":"bool","Args":"bin string, wait bool, args ...string"},{"Uniquefunname":"func (m *SessionManager) launchWait(program string, args ...string) bool","Funname":"main.SessionManager.launchWait","Returntype":"bool","Args":"program string, args ...string"},{"Uniquefunname":"func main.SessionManager.launchWaitAux(cookie, program string, args []string, cmdWaitDelay time.Duration, endFn func(bool))(launchOk bool)","Funname":"main.SessionManager.launchWaitAux","Returntype":"(launchOk bool)","Args":"cookie, program string, args []string, cmdWaitDelay time.Duration, endFn func(bool)"},{"Uniquefunname":"func main.SessionManager.launchWaitCore(name string, program string, args []string, cmdWaitDelay time.Duration, endFn func(bool))","Funname":"main.SessionManager.launchWaitCore","Returntype":"","Args":"name string, program string, args []string, cmdWaitDelay time.Duration, endFn func(bool)"},{"Uniquefunname":"func (m *SessionManager) launchWithoutWait(bin string, args ...string)","Funname":"main.SessionManager.launchWithoutWait","Returntype":"","Args":"bin string, args ...string"},{"Uniquefunname":"func (m *SessionManager) startSessionDaemonPart2() bool","Funname":"main.SessionManager.startSessionDaemonPart2","Returntype":"bool","Args":""},{"Uniquefunname":"func genUuid() string","Funname":"main.genUuid","Returntype":"string","Args":""},{"Uniquefunname":"func (m *SessionManager) startSessionDaemonPart2() bool","Funname":"startSessionDaemonPart2","Returntype":"bool","Args":""}],"Records":[{"Name":"var:main","Fields":["main.launchTimeout"]}]}
{"Filepath":"session_stub.go","Functions":[{"Uniquefunname":"func (m *SessionManager) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (m *SessionManager) GetInterfaceName() string","Funname":"main.SessionManager.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (op *SessionManager) setPropName(name string)","Funname":"main.SessionManager.setPropName","Returntype":"","Args":"name string"},{"Uniquefunname":"func (m *SessionManager) setPropStage(v int32)","Funname":"main.SessionManager.setPropStage","Returntype":"","Args":"v int32"},{"Uniquefunname":"func (op *SessionManager) setPropName(name string)","Funname":"setPropName","Returntype":"","Args":"name string"},{"Uniquefunname":"func (m *SessionManager) setPropStage(v int32)","Funname":"setPropStage","Returntype":"","Args":"v int32"}],"Records":[{"Name":"const:main","Fields":["main.sessionManagerIfc","main.sessionManagerPath","main.sessionManagerServiceName"]}]}
{"Filepath":"sound_effect.go","Functions":[{"Uniquefunname":"func getDefaultSinkAlsaDevice() (device string, mute bool, err error)","Funname":"getDefaultSinkAlsaDevice","Returntype":"(device string, mute bool, err error)","Args":""},{"Uniquefunname":"func getPulseDefaultSink(ctx *pulse.Context) (defaultSink *pulse.Sink)","Funname":"getPulseDefaultSink","Returntype":"(defaultSink *pulse.Sink)","Args":"ctx *pulse.Context"},{"Uniquefunname":"func getSinkAlsaDevice(sink *pulse.Sink) (string, error)","Funname":"getSinkAlsaDevice","Returntype":"(string, error)","Args":"sink *pulse.Sink"},{"Uniquefunname":"func initSoundThemePlayer()","Funname":"initSoundThemePlayer","Returntype":"","Args":""},{"Uniquefunname":"func getDefaultSinkAlsaDevice() (device string, mute bool, err error)","Funname":"main.getDefaultSinkAlsaDevice","Returntype":"(device string, mute bool, err error)","Args":""},{"Uniquefunname":"func getPulseDefaultSink(ctx *pulse.Context) (defaultSink *pulse.Sink)","Funname":"main.getPulseDefaultSink","Returntype":"(defaultSink *pulse.Sink)","Args":"ctx *pulse.Context"},{"Uniquefunname":"func getSinkAlsaDevice(sink *pulse.Sink) (string, error)","Funname":"main.getSinkAlsaDevice","Returntype":"(string, error)","Args":"sink *pulse.Sink"},{"Uniquefunname":"func initSoundThemePlayer()","Funname":"main.initSoundThemePlayer","Returntype":"","Args":""},{"Uniquefunname":"func playLoginSound()","Funname":"main.playLoginSound","Returntype":"","Args":""},{"Uniquefunname":"func playLogoutSound()","Funname":"main.playLogoutSound","Returntype":"","Args":""},{"Uniquefunname":"func preparePlayShutdownSound()","Funname":"main.preparePlayShutdownSound","Returntype":"","Args":""},{"Uniquefunname":"func quitPulseAudio()","Funname":"main.quitPulseAudio","Returntype":"","Args":""},{"Uniquefunname":"func startPulseAudio() error","Funname":"main.startPulseAudio","Returntype":"error","Args":""},{"Uniquefunname":"func playLoginSound()","Funname":"playLoginSound","Returntype":"","Args":""},{"Uniquefunname":"func playLogoutSound()","Funname":"playLogoutSound","Returntype":"","Args":""},{"Uniquefunname":"func preparePlayShutdownSound()","Funname":"preparePlayShutdownSound","Returntype":"","Args":""},{"Uniquefunname":"func quitPulseAudio()","Funname":"quitPulseAudio","Returntype":"","Args":""},{"Uniquefunname":"func startPulseAudio() error","Funname":"startPulseAudio","Returntype":"error","Args":""}],"Records":[{"Name":"const:main","Fields":["main.audioInterface","main.audioPath","main.audioServiceName"]},{"Name":"var:main","Fields":["main.soundThemePlayer"]}]}
{"Filepath":"startmanager.go","Functions":[{"Uniquefunname":"func (m *StartManager) AddAutostart(filename string) (bool, *dbus.Error)","Funname":"AddAutostart","Returntype":"(bool, *dbus.Error)","Args":"filename string"},{"Uniquefunname":"func (m *StartManager) AutostartList() ([]string, *dbus.Error)","Funname":"AutostartList","Returntype":"([]string, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *StartManager) GetApps() (map[uint32]string, *dbus.Error)","Funname":"GetApps","Returntype":"(map[uint32]string, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *StartManager) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (m *StartManager) IsAutostart(filename string) (bool, *dbus.Error)","Funname":"IsAutostart","Returntype":"(bool, *dbus.Error)","Args":"filename string"},{"Uniquefunname":"func (m *StartManager) Launch(sender dbus.Sender, desktopFile string) (bool, *dbus.Error)","Funname":"Launch","Returntype":"(bool, *dbus.Error)","Args":"sender dbus.Sender, desktopFile string"},{"Uniquefunname":"func LaunchApp(sender dbus.Sender, desktopFile string, timestamp uint32, files []string)*dbus.Error","Funname":"LaunchApp","Returntype":"*dbus.Error","Args":"sender dbus.Sender, desktopFile string, timestamp uint32, files []string"},{"Uniquefunname":"func LaunchAppAction(sender dbus.Sender, desktopFile, action string, timestamp uint32)*dbus.Error","Funname":"LaunchAppAction","Returntype":"*dbus.Error","Args":"sender dbus.Sender, desktopFile, action string, timestamp uint32"},{"Uniquefunname":"func LaunchAppWithOptions(sender dbus.Sender, desktopFile string, timestamp uint32, files []string, options map[string]dbus.Variant)*dbus.Error","Funname":"LaunchAppWithOptions","Returntype":"*dbus.Error","Args":"sender dbus.Sender, desktopFile string, timestamp uint32, files []string, options map[string]dbus.Variant"},{"Uniquefunname":"func LaunchWithTimestamp(sender dbus.Sender, desktopFile string, timestamp uint32)(bool, *dbus.Error)","Funname":"LaunchWithTimestamp","Returntype":"(bool, *dbus.Error)","Args":"sender dbus.Sender, desktopFile string, timestamp uint32"},{"Uniquefunname":"func (m *StartManager) RemoveAutostart(filename string) (bool, *dbus.Error)","Funname":"RemoveAutostart","Returntype":"(bool, *dbus.Error)","Args":"filename string"},{"Uniquefunname":"func (m *StartManager) RunCommand(sender dbus.Sender, exe string, args []string) *dbus.Error","Funname":"RunCommand","Returntype":"*dbus.Error","Args":"sender dbus.Sender, exe string, args []string"},{"Uniquefunname":"func RunCommandWithOptions(sender dbus.Sender, exe string, args []string, options map[string]dbus.Variant)*dbus.Error","Funname":"RunCommandWithOptions","Returntype":"*dbus.Error","Args":"sender dbus.Sender, exe string, args []string, options map[string]dbus.Variant"},{"Uniquefunname":"func (m *StartManager) addAutostartFile(name string) (string, error)","Funname":"addAutostartFile","Returntype":"(string, error)","Args":"name string"},{"Uniquefunname":"func (m *StartManager) autostartDirs() []string","Funname":"autostartDirs","Returntype":"[]string","Args":""},{"Uniquefunname":"func checkDMsgUid(service *dbusutil.Service, sender dbus.Sender) error","Funname":"checkDMsgUid","Returntype":"error","Args":"service *dbusutil.Service, sender dbus.Sender"},{"Uniquefunname":"func (m *StartManager) doSetAutostart(filename, appId string, autostart bool) error","Funname":"doSetAutostart","Returntype":"error","Args":"filename, appId string, autostart bool"},{"Uniquefunname":"func (m *StartManager) emitSignalAutostartChanged(name string)","Funname":"emitSignalAutostartChanged","Returntype":"","Args":"name string"},{"Uniquefunname":"func (m *StartManager) enableCpuFreqLock(desktopFile string) error","Funname":"enableCpuFreqLock","Returntype":"error","Args":"desktopFile string"},{"Uniquefunname":"func (m *StartManager) execLaunchedHooks(desktopFile, cGroupName string)","Funname":"execLaunchedHooks","Returntype":"","Args":"desktopFile, cGroupName string"},{"Uniquefunname":"func (m *StartManager) getAppIdByFilePath(file string) string","Funname":"getAppIdByFilePath","Returntype":"string","Args":"file string"},{"Uniquefunname":"func (m *StartManager) getAutostartApps(dir string) []string","Funname":"getAutostartApps","Returntype":"[]string","Args":"dir string"},{"Uniquefunname":"func getCmdDesc(exe string, args []string) string","Funname":"getCmdDesc","Returntype":"string","Args":"exe string, args []string"},{"Uniquefunname":"func (m *StartManager) getCpuFreqAdjustMap() map[string]int32","Funname":"getCpuFreqAdjustMap","Returntype":"map[string]int32","Args":""},{"Uniquefunname":"func getLaunchedHooks() (ret []string)","Funname":"getLaunchedHooks","Returntype":"(ret []string)","Args":""},{"Uniquefunname":"func getRestartTime(appInfo *desktopappinfo.DesktopAppInfo)(time.Time, bool)","Funname":"getRestartTime","Returntype":"(time.Time, bool)","Args":"appInfo *desktopappinfo.DesktopAppInfo"},{"Uniquefunname":"func (m *StartManager) getSysAutostart(name string) string","Funname":"getSysAutostart","Returntype":"string","Args":"name string"},{"Uniquefunname":"func (m *StartManager) getUserAutostart(name string) string","Funname":"getUserAutostart","Returntype":"string","Args":"name string"},{"Uniquefunname":"func (m *StartManager) getUserAutostartDir() string","Funname":"getUserAutostartDir","Returntype":"string","Args":""},{"Uniquefunname":"func isAppInList(app string, apps []string) bool","Funname":"isAppInList","Returntype":"bool","Args":"app string, apps []string"},{"Uniquefunname":"func (m *StartManager) isAutostart(filename string) bool","Funname":"isAutostart","Returntype":"bool","Args":"filename string"},{"Uniquefunname":"func (m *StartManager) isAutostartAux(filename string) bool","Funname":"isAutostartAux","Returntype":"bool","Args":"filename string"},{"Uniquefunname":"func isDEComponent(appInfo *desktopappinfo.DesktopAppInfo) bool","Funname":"isDEComponent","Returntype":"bool","Args":"appInfo *desktopappinfo.DesktopAppInfo"},{"Uniquefunname":"func (m *StartManager) isUserAutostart(name string) bool","Funname":"isUserAutostart","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func launch(appInfo *desktopappinfo.DesktopAppInfo, timestamp uint32, files []string, ctx *appinfo.AppLaunchContext, iStartCmd IStartCommand, cmdName string)error","Funname":"launch","Returntype":"error","Args":"appInfo *desktopappinfo.DesktopAppInfo, timestamp uint32, files []string, ctx *appinfo.AppLaunchContext, iStartCmd IStartCommand, cmdName string"},{"Uniquefunname":"func launchApp(desktopFile string, timestamp uint32, files []string, ctx *appinfo.AppLaunchContext, options map[string]dbus.Variant)error","Funname":"launchApp","Returntype":"error","Args":"desktopFile string, timestamp uint32, files []string, ctx *appinfo.AppLaunchContext, options map[string]dbus.Variant"},{"Uniquefunname":"func (m *StartManager) launchAppAction(desktopFile, action string, timestamp uint32) error","Funname":"launchAppAction","Returntype":"error","Args":"desktopFile, action string, timestamp uint32"},{"Uniquefunname":"func launchAppActionAux(desktopFile, actionSection string, timestamp uint32, ctx *appinfo.AppLaunchContext)error","Funname":"launchAppActionAux","Returntype":"error","Args":"desktopFile, actionSection string, timestamp uint32, ctx *appinfo.AppLaunchContext"},{"Uniquefunname":"func launchAppWithOptions(desktopFile string, timestamp uint32, files []string, options map[string]dbus.Variant)error","Funname":"launchAppWithOptions","Returntype":"error","Args":"desktopFile string, timestamp uint32, files []string, options map[string]dbus.Variant"},{"Uniquefunname":"func (m *StartManager) listenAppCloseEvent() error","Funname":"listenAppCloseEvent","Returntype":"error","Args":""},{"Uniquefunname":"func (m *StartManager) listenAutostartFileEvents()","Funname":"listenAutostartFileEvents","Returntype":"","Args":""},{"Uniquefunname":"func lowerBaseName(name string) string","Funname":"lowerBaseName","Returntype":"string","Args":"name string"},{"Uniquefunname":"func (m *StartManager) AddAutostart(filename string) (bool, *dbus.Error)","Funname":"main.StartManager.AddAutostart","Returntype":"(bool, *dbus.Error)","Args":"filename string"},{"Uniquefunname":"func (m *StartManager) AutostartList() ([]string, *dbus.Error)","Funname":"main.StartManager.AutostartList","Returntype":"([]string, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *StartManager) GetApps() (map[uint32]string, *dbus.Error)","Funname":"main.StartManager.GetApps","Returntype":"(map[uint32]string, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *StartManager) GetInterfaceName() string","Funname":"main.StartManager.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (m *StartManager) IsAutostart(filename string) (bool, *dbus.Error)","Funname":"main.StartManager.IsAutostart","Returntype":"(bool, *dbus.Error)","Args":"filename string"},{"Uniquefunname":"func (m *StartManager) Launch(sender dbus.Sender, desktopFile string) (bool, *dbus.Error)","Funname":"main.StartManager.Launch","Returntype":"(bool, *dbus.Error)","Args":"sender dbus.Sender, desktopFile string"},{"Uniquefunname":"func main.StartManager.LaunchApp(sender dbus.Sender, desktopFile string, timestamp uint32, files []string)*dbus.Error","Funname":"main.StartManager.LaunchApp","Returntype":"*dbus.Error","Args":"sender dbus.Sender, desktopFile string, timestamp uint32, files []string"},{"Uniquefunname":"func main.StartManager.LaunchAppAction(sender dbus.Sender, desktopFile, action string, timestamp uint32)*dbus.Error","Funname":"main.StartManager.LaunchAppAction","Returntype":"*dbus.Error","Args":"sender dbus.Sender, desktopFile, action string, timestamp uint32"},{"Uniquefunname":"func main.StartManager.LaunchAppWithOptions(sender dbus.Sender, desktopFile string, timestamp uint32, files []string, options map[string]dbus.Variant)*dbus.Error","Funname":"main.StartManager.LaunchAppWithOptions","Returntype":"*dbus.Error","Args":"sender dbus.Sender, desktopFile string, timestamp uint32, files []string, options map[string]dbus.Variant"},{"Uniquefunname":"func main.StartManager.LaunchWithTimestamp(sender dbus.Sender, desktopFile string, timestamp uint32)(bool, *dbus.Error)","Funname":"main.StartManager.LaunchWithTimestamp","Returntype":"(bool, *dbus.Error)","Args":"sender dbus.Sender, desktopFile string, timestamp uint32"},{"Uniquefunname":"func (m *StartManager) RemoveAutostart(filename string) (bool, *dbus.Error)","Funname":"main.StartManager.RemoveAutostart","Returntype":"(bool, *dbus.Error)","Args":"filename string"},{"Uniquefunname":"func (m *StartManager) RunCommand(sender dbus.Sender, exe string, args []string) *dbus.Error","Funname":"main.StartManager.RunCommand","Returntype":"*dbus.Error","Args":"sender dbus.Sender, exe string, args []string"},{"Uniquefunname":"func main.StartManager.RunCommandWithOptions(sender dbus.Sender, exe string, args []string, options map[string]dbus.Variant)*dbus.Error","Funname":"main.StartManager.RunCommandWithOptions","Returntype":"*dbus.Error","Args":"sender dbus.Sender, exe string, args []string, options map[string]dbus.Variant"},{"Uniquefunname":"func (m *StartManager) addAutostartFile(name string) (string, error)","Funname":"main.StartManager.addAutostartFile","Returntype":"(string, error)","Args":"name string"},{"Uniquefunname":"func (m *StartManager) autostartDirs() []string","Funname":"main.StartManager.autostartDirs","Returntype":"[]string","Args":""},{"Uniquefunname":"func (m *StartManager) doSetAutostart(filename, appId string, autostart bool) error","Funname":"main.StartManager.doSetAutostart","Returntype":"error","Args":"filename, appId string, autostart bool"},{"Uniquefunname":"func (m *StartManager) emitSignalAutostartChanged(name string)","Funname":"main.StartManager.emitSignalAutostartChanged","Returntype":"","Args":"name string"},{"Uniquefunname":"func (m *StartManager) enableCpuFreqLock(desktopFile string) error","Funname":"main.StartManager.enableCpuFreqLock","Returntype":"error","Args":"desktopFile string"},{"Uniquefunname":"func (m *StartManager) execLaunchedHooks(desktopFile, cGroupName string)","Funname":"main.StartManager.execLaunchedHooks","Returntype":"","Args":"desktopFile, cGroupName string"},{"Uniquefunname":"func (m *StartManager) getAppIdByFilePath(file string) string","Funname":"main.StartManager.getAppIdByFilePath","Returntype":"string","Args":"file string"},{"Uniquefunname":"func (m *StartManager) getAutostartApps(dir string) []string","Funname":"main.StartManager.getAutostartApps","Returntype":"[]string","Args":"dir string"},{"Uniquefunname":"func (m *StartManager) getCpuFreqAdjustMap() map[string]int32","Funname":"main.StartManager.getCpuFreqAdjustMap","Returntype":"map[string]int32","Args":""},{"Uniquefunname":"func main.StartManager.getRestartTime(appInfo *desktopappinfo.DesktopAppInfo)(time.Time, bool)","Funname":"main.StartManager.getRestartTime","Returntype":"(time.Time, bool)","Args":"appInfo *desktopappinfo.DesktopAppInfo"},{"Uniquefunname":"func (m *StartManager) getSysAutostart(name string) string","Funname":"main.StartManager.getSysAutostart","Returntype":"string","Args":"name string"},{"Uniquefunname":"func (m *StartManager) getUserAutostart(name string) string","Funname":"main.StartManager.getUserAutostart","Returntype":"string","Args":"name string"},{"Uniquefunname":"func (m *StartManager) getUserAutostartDir() string","Funname":"main.StartManager.getUserAutostartDir","Returntype":"string","Args":""},{"Uniquefunname":"func (m *StartManager) isAutostart(filename string) bool","Funname":"main.StartManager.isAutostart","Returntype":"bool","Args":"filename string"},{"Uniquefunname":"func (m *StartManager) isAutostartAux(filename string) bool","Funname":"main.StartManager.isAutostartAux","Returntype":"bool","Args":"filename string"},{"Uniquefunname":"func (m *StartManager) isUserAutostart(name string) bool","Funname":"main.StartManager.isUserAutostart","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func main.StartManager.launch(appInfo *desktopappinfo.DesktopAppInfo, timestamp uint32, files []string, ctx *appinfo.AppLaunchContext, iStartCmd IStartCommand, cmdName string)error","Funname":"main.StartManager.launch","Returntype":"error","Args":"appInfo *desktopappinfo.DesktopAppInfo, timestamp uint32, files []string, ctx *appinfo.AppLaunchContext, iStartCmd IStartCommand, cmdName string"},{"Uniquefunname":"func main.StartManager.launchApp(desktopFile string, timestamp uint32, files []string, ctx *appinfo.AppLaunchContext, options map[string]dbus.Variant)error","Funname":"main.StartManager.launchApp","Returntype":"error","Args":"desktopFile string, timestamp uint32, files []string, ctx *appinfo.AppLaunchContext, options map[string]dbus.Variant"},{"Uniquefunname":"func (m *StartManager) launchAppAction(desktopFile, action string, timestamp uint32) error","Funname":"main.StartManager.launchAppAction","Returntype":"error","Args":"desktopFile, action string, timestamp uint32"},{"Uniquefunname":"func main.StartManager.launchAppActionAux(desktopFile, actionSection string, timestamp uint32, ctx *appinfo.AppLaunchContext)error","Funname":"main.StartManager.launchAppActionAux","Returntype":"error","Args":"desktopFile, actionSection string, timestamp uint32, ctx *appinfo.AppLaunchContext"},{"Uniquefunname":"func main.StartManager.launchAppWithOptions(desktopFile string, timestamp uint32, files []string, options map[string]dbus.Variant)error","Funname":"main.StartManager.launchAppWithOptions","Returntype":"error","Args":"desktopFile string, timestamp uint32, files []string, options map[string]dbus.Variant"},{"Uniquefunname":"func (m *StartManager) listenAppCloseEvent() error","Funname":"main.StartManager.listenAppCloseEvent","Returntype":"error","Args":""},{"Uniquefunname":"func (m *StartManager) listenAutostartFileEvents()","Funname":"main.StartManager.listenAutostartFileEvents","Returntype":"","Args":""},{"Uniquefunname":"func main.StartManager.runCommandWithOptions(exe string, args []string, options map[string]dbus.Variant)error","Funname":"main.StartManager.runCommandWithOptions","Returntype":"error","Args":"exe string, args []string, options map[string]dbus.Variant"},{"Uniquefunname":"func (m *StartManager) setAutostart(filename string, val bool) error","Funname":"main.StartManager.setAutostart","Returntype":"error","Args":"filename string, val bool"},{"Uniquefunname":"func (m *StartManager) setRestartTime(appInfo *desktopappinfo.DesktopAppInfo, t time.Time)","Funname":"main.StartManager.setRestartTime","Returntype":"","Args":"appInfo *desktopappinfo.DesktopAppInfo, t time.Time"},{"Uniquefunname":"func (m *StartManager) shouldDisableScaling(id string) bool","Funname":"main.StartManager.shouldDisableScaling","Returntype":"bool","Args":"id string"},{"Uniquefunname":"func (m *StartManager) shouldUseProxy(id string) bool","Funname":"main.StartManager.shouldUseProxy","Returntype":"bool","Args":"id string"},{"Uniquefunname":"func main.StartManager.waitCmd(appInfo *desktopappinfo.DesktopAppInfo, cmd *exec.Cmd, err error, uiApp *swapsched.UIApp, cmdName string)error","Funname":"main.StartManager.waitCmd","Returntype":"error","Args":"appInfo *desktopappinfo.DesktopAppInfo, cmd *exec.Cmd, err error, uiApp *swapsched.UIApp, cmdName string"},{"Uniquefunname":"func checkDMsgUid(service *dbusutil.Service, sender dbus.Sender) error","Funname":"main.checkDMsgUid","Returntype":"error","Args":"service *dbusutil.Service, sender dbus.Sender"},{"Uniquefunname":"func getCmdDesc(exe string, args []string) string","Funname":"main.getCmdDesc","Returntype":"string","Args":"exe string, args []string"},{"Uniquefunname":"func getLaunchedHooks() (ret []string)","Funname":"main.getLaunchedHooks","Returntype":"(ret []string)","Args":""},{"Uniquefunname":"func isAppInList(app string, apps []string) bool","Funname":"main.isAppInList","Returntype":"bool","Args":"app string, apps []string"},{"Uniquefunname":"func isDEComponent(appInfo *desktopappinfo.DesktopAppInfo) bool","Funname":"main.isDEComponent","Returntype":"bool","Args":"appInfo *desktopappinfo.DesktopAppInfo"},{"Uniquefunname":"func lowerBaseName(name string) string","Funname":"main.lowerBaseName","Returntype":"string","Args":"name string"},{"Uniquefunname":"func newDesktopAppInfoFromFile(filename string) (*desktopappinfo.DesktopAppInfo, error)","Funname":"main.newDesktopAppInfoFromFile","Returntype":"(*desktopappinfo.DesktopAppInfo, error)","Args":"filename string"},{"Uniquefunname":"func newStartManager(conn *x.Conn, service *dbusutil.Service) *StartManager","Funname":"main.newStartManager","Returntype":"*StartManager","Args":"conn *x.Conn, service *dbusutil.Service"},{"Uniquefunname":"func scanDir(dir string, fn func(dir string, info os.FileInfo) bool)","Funname":"main.scanDir","Returntype":"","Args":"dir string, fn func(dir string, info os.FileInfo) bool"},{"Uniquefunname":"func sendAppDataMsgToUserExperModule(msg string, item *UeMessageItem)","Funname":"main.sendAppDataMsgToUserExperModule","Returntype":"","Args":"msg string, item *UeMessageItem"},{"Uniquefunname":"func startAutostartProgram()","Funname":"main.startAutostartProgram","Returntype":"","Args":""},{"Uniquefunname":"func startStartManager(conn *x.Conn, service *dbusutil.Service)","Funname":"main.startStartManager","Returntype":"","Args":"conn *x.Conn, service *dbusutil.Service"},{"Uniquefunname":"func newDesktopAppInfoFromFile(filename string) (*desktopappinfo.DesktopAppInfo, error)","Funname":"newDesktopAppInfoFromFile","Returntype":"(*desktopappinfo.DesktopAppInfo, error)","Args":"filename string"},{"Uniquefunname":"func newStartManager(conn *x.Conn, service *dbusutil.Service) *StartManager","Funname":"newStartManager","Returntype":"*StartManager","Args":"conn *x.Conn, service *dbusutil.Service"},{"Uniquefunname":"func runCommandWithOptions(exe string, args []string, options map[string]dbus.Variant)error","Funname":"runCommandWithOptions","Returntype":"error","Args":"exe string, args []string, options map[string]dbus.Variant"},{"Uniquefunname":"func scanDir(dir string, fn func(dir string, info os.FileInfo) bool)","Funname":"scanDir","Returntype":"","Args":"dir string, fn func(dir string, info os.FileInfo) bool"},{"Uniquefunname":"func sendAppDataMsgToUserExperModule(msg string, item *UeMessageItem)","Funname":"sendAppDataMsgToUserExperModule","Returntype":"","Args":"msg string, item *UeMessageItem"},{"Uniquefunname":"func (m *StartManager) setAutostart(filename string, val bool) error","Funname":"setAutostart","Returntype":"error","Args":"filename string, val bool"},{"Uniquefunname":"func (m *StartManager) setRestartTime(appInfo *desktopappinfo.DesktopAppInfo, t time.Time)","Funname":"setRestartTime","Returntype":"","Args":"appInfo *desktopappinfo.DesktopAppInfo, t time.Time"},{"Uniquefunname":"func (m *StartManager) shouldDisableScaling(id string) bool","Funname":"shouldDisableScaling","Returntype":"bool","Args":"id string"},{"Uniquefunname":"func (m *StartManager) shouldUseProxy(id string) bool","Funname":"shouldUseProxy","Returntype":"bool","Args":"id string"},{"Uniquefunname":"func startAutostartProgram()","Funname":"startAutostartProgram","Returntype":"","Args":""},{"Uniquefunname":"func startStartManager(conn *x.Conn, service *dbusutil.Service)","Funname":"startStartManager","Returntype":"","Args":"conn *x.Conn, service *dbusutil.Service"},{"Uniquefunname":"func waitCmd(appInfo *desktopappinfo.DesktopAppInfo, cmd *exec.Cmd, err error, uiApp *swapsched.UIApp, cmdName string)error","Funname":"waitCmd","Returntype":"error","Args":"appInfo *desktopappinfo.DesktopAppInfo, cmd *exec.Cmd, err error, uiApp *swapsched.UIApp, cmdName string"}],"Records":[{"Name":"const:main","Fields":["main.AutostartAdded","main.AutostartDeleted","main.KeyXDeepinAppID","main.KeyXDeepinCreatedBy","main.KeyXGnomeAutoRestart","main.KeyXGnomeAutostartDelay","main.SignalAutostartChanged","main.autostartDir","main.cpuFreqAdjustFile","main.gKeyAppsDisableScaling","main.gKeyAppsUseProxy","main.gSchemaLauncher","main.launchedHookDir","main.performanceGovernor","main.proxychainsBinary","main.restartRateLimitSeconds","main.startManagerInterface","main.startManagerObjPath","main.uiAppSchedHooksDir"]},{"Name":"interface","Fields":["main.IStartCommand"]},{"Name":"struct:main.StartManager","Fields":["main.StartManager.NeededMemory uint64","main.StartManager.appClose chan *UeMessageItem","main.StartManager.appsDir []string","main.StartManager.appsDisableScaling strv.Strv","main.StartManager.appsUseProxy strv.Strv","main.StartManager.cpuFreqAdjustMap map[string]int32","main.StartManager.daemonApps *daemonApps.Apps","main.StartManager.delayHandler *mapDelayHandler","main.StartManager.launchContext *appinfo.AppLaunchContext","main.StartManager.launchedHooks []string","main.StartManager.methods *struct { IsMemSufficient func() `out:\"result\"`; TryAgain func() `in:\"launch\"`; DumpMemRecord func() `out:\"record\"`; GetApps func() `out:\"apps\"`; Launch func() `in:\"desktopFile\" out:\"ok\"`; LaunchWithTimestamp func() `in:\"desktopFile,timestamp\" out:\"ok\"`; LaunchApp func() `in:\"desktopFile,timestamp,files\"`; LaunchAppWithOptions func() `in:\"desktopFile,timestamp,files,options\"`; LaunchAppAction func() `in:\"desktopFile,action,timestamp\"`; RunCommand func() `in:\"exe,args\"`; RunCommandWithOptions func()","main.StartManager.mu sync.Mutex","main.StartManager.proxyChainsBin string","main.StartManager.proxyChainsConfFile string","main.StartManager.restartTimeMap map[string]time.Time","main.StartManager.restartTimeMapMu sync.Mutex","main.StartManager.service *dbusutil.Service","main.StartManager.settings *gio.Settings","main.StartManager.signals *struct { AutostartChanged struct { status string; name string; }; }","main.StartManager.systemPower *systemPower.Power","main.StartManager.userAutostartPath string"]},{"Name":"var:main","Fields":["main._startManager"]}]}
{"Filepath":"startmanager_test.go","Functions":[{"Uniquefunname":"func _TestScanDir(t *testing.T)","Funname":"_TestScanDir","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func _TestSetAutostart(t *testing.T)","Funname":"_TestSetAutostart","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func main._TestScanDir(t *testing.T)","Funname":"main._TestScanDir","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func main._TestSetAutostart(t *testing.T)","Funname":"main._TestSetAutostart","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"utils.go","Functions":[{"Uniquefunname":"func Exist(name string) bool","Funname":"Exist","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func copyFile(src, dst string, copyFlag CopyFlag) error","Funname":"copyFile","Returntype":"error","Args":"src, dst string, copyFlag CopyFlag"},{"Uniquefunname":"func copyFileAux(src, dst string, copyFlag CopyFlag) error","Funname":"copyFileAux","Returntype":"error","Args":"src, dst string, copyFlag CopyFlag"},{"Uniquefunname":"func getAppDirs() []string","Funname":"getAppDirs","Returntype":"[]string","Args":""},{"Uniquefunname":"func getAppIdByFilePath(file string, appDirs []string) string","Funname":"getAppIdByFilePath","Returntype":"string","Args":"file string, appDirs []string"},{"Uniquefunname":"func getDelayTime(desktopFile string) (time.Duration, error)","Funname":"getDelayTime","Returntype":"(time.Duration, error)","Args":"desktopFile string"},{"Uniquefunname":"func getGSettingsConfig() *GSettingsConfig","Funname":"getGSettingsConfig","Returntype":"*GSettingsConfig","Args":""},{"Uniquefunname":"func getLightDMAutoLoginUser() (string, error)","Funname":"getLightDMAutoLoginUser","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func initGSettingsConfig()","Funname":"initGSettingsConfig","Returntype":"","Args":""},{"Uniquefunname":"func isNotificationsOwned() (bool, error)","Funname":"isNotificationsOwned","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func isOSDRunning() (bool, error)","Funname":"isOSDRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func Exist(name string) bool","Funname":"main.Exist","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func copyFile(src, dst string, copyFlag CopyFlag) error","Funname":"main.copyFile","Returntype":"error","Args":"src, dst string, copyFlag CopyFlag"},{"Uniquefunname":"func copyFileAux(src, dst string, copyFlag CopyFlag) error","Funname":"main.copyFileAux","Returntype":"error","Args":"src, dst string, copyFlag CopyFlag"},{"Uniquefunname":"func getAppDirs() []string","Funname":"main.getAppDirs","Returntype":"[]string","Args":""},{"Uniquefunname":"func getAppIdByFilePath(file string, appDirs []string) string","Funname":"main.getAppIdByFilePath","Returntype":"string","Args":"file string, appDirs []string"},{"Uniquefunname":"func getDelayTime(desktopFile string) (time.Duration, error)","Funname":"main.getDelayTime","Returntype":"(time.Duration, error)","Args":"desktopFile string"},{"Uniquefunname":"func getGSettingsConfig() *GSettingsConfig","Funname":"main.getGSettingsConfig","Returntype":"*GSettingsConfig","Args":""},{"Uniquefunname":"func getLightDMAutoLoginUser() (string, error)","Funname":"main.getLightDMAutoLoginUser","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func initGSettingsConfig()","Funname":"main.initGSettingsConfig","Returntype":"","Args":""},{"Uniquefunname":"func isNotificationsOwned() (bool, error)","Funname":"main.isNotificationsOwned","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func isOSDRunning() (bool, error)","Funname":"main.isOSDRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func showDDEWelcome() error","Funname":"main.showDDEWelcome","Returntype":"error","Args":""},{"Uniquefunname":"func syncFile(filename string) error","Funname":"main.syncFile","Returntype":"error","Args":"filename string"},{"Uniquefunname":"func showDDEWelcome() error","Funname":"showDDEWelcome","Returntype":"error","Args":""},{"Uniquefunname":"func syncFile(filename string) error","Funname":"syncFile","Returntype":"error","Args":"filename string"}],"Records":[{"Name":"const:main","Fields":["main.AppDirName","main.CopyFileNone","main.CopyFileNotKeepSymlink","main.CopyFileOverWrite","main.desktopExt"]},{"Name":"struct:main.GSettingsConfig","Fields":["main.GSettingsConfig.autoStartDelay int32","main.GSettingsConfig.iowaitEnabled bool","main.GSettingsConfig.memcheckerEnabled bool","main.GSettingsConfig.needQuickBlackScreen bool","main.GSettingsConfig.swapSchedEnabled bool","main.GSettingsConfig.wmCmd string"]}]}
{"Filepath":"vm.go","Functions":[{"Uniquefunname":"func correctVMResolution()","Funname":"correctVMResolution","Returntype":"","Args":""},{"Uniquefunname":"func getProductType() string","Funname":"getProductType","Returntype":"string","Args":""},{"Uniquefunname":"func isInVM() (bool, error)","Funname":"isInVM","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func isServer() bool","Funname":"isServer","Returntype":"bool","Args":""},{"Uniquefunname":"func correctVMResolution()","Funname":"main.correctVMResolution","Returntype":"","Args":""},{"Uniquefunname":"func getProductType() string","Funname":"main.getProductType","Returntype":"string","Args":""},{"Uniquefunname":"func isInVM() (bool, error)","Funname":"main.isInVM","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func isServer() bool","Funname":"main.isServer","Returntype":"bool","Args":""},{"Uniquefunname":"func maybeLaunchWMChooser() (launched bool)","Funname":"main.maybeLaunchWMChooser","Returntype":"(launched bool)","Args":""},{"Uniquefunname":"func maybeLaunchWMChooser() (launched bool)","Funname":"maybeLaunchWMChooser","Returntype":"(launched bool)","Args":""}],"Records":[{"Name":"const:main","Fields":["main.versionFile"]}]}
{"Filepath":"autostop/autostop.go","Functions":[{"Uniquefunname":"func LaunchAutostopScripts(logger *log.Logger) error","Funname":"LaunchAutostopScripts","Returntype":"error","Args":"logger *log.Logger"},{"Uniquefunname":"func LaunchAutostopScripts(logger *log.Logger) error","Funname":"autostop.LaunchAutostopScripts","Returntype":"error","Args":"logger *log.Logger"},{"Uniquefunname":"func (m *Manager) getAutostopScripts() []string","Funname":"autostop.Manager.getAutostopScripts","Returntype":"[]string","Args":""},{"Uniquefunname":"func (m *Manager) launchScripts(scripts []string)","Funname":"autostop.Manager.launchScripts","Returntype":"","Args":"scripts []string"},{"Uniquefunname":"func doScanScripts(dir string) ([]string, error)","Funname":"autostop.doScanScripts","Returntype":"([]string, error)","Args":"dir string"},{"Uniquefunname":"func doScanScripts(dir string) ([]string, error)","Funname":"doScanScripts","Returntype":"([]string, error)","Args":"dir string"},{"Uniquefunname":"func (m *Manager) getAutostopScripts() []string","Funname":"getAutostopScripts","Returntype":"[]string","Args":""},{"Uniquefunname":"func (m *Manager) launchScripts(scripts []string)","Funname":"launchScripts","Returntype":"","Args":"scripts []string"}],"Records":[{"Name":"struct:autostop.Manager","Fields":["autostop.Manager.logger *log.Logger"]}]}
{"Filepath":"autostop/autostop_test.go","Functions":[{"Uniquefunname":"func TestScriptsScan(t *testing.T)","Funname":"TestScriptsScan","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestScriptsScan(t *testing.T)","Funname":"autostop.TestScriptsScan","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"cmd/fix-xauthority-perm/main.go","Functions":[{"Uniquefunname":"func createXAuthFile(filename string, uid int) error","Funname":"createXAuthFile","Returntype":"error","Args":"filename string, uid int"},{"Uniquefunname":"func fix(conn *dbus.Conn, userPath string) error","Funname":"fix","Returntype":"error","Args":"conn *dbus.Conn, userPath string"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func createXAuthFile(filename string, uid int) error","Funname":"main.createXAuthFile","Returntype":"error","Args":"filename string, uid int"},{"Uniquefunname":"func fix(conn *dbus.Conn, userPath string) error","Funname":"main.fix","Returntype":"error","Args":"conn *dbus.Conn, userPath string"},{"Uniquefunname":"func init()","Funname":"main.init","Returntype":"","Args":""},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""}],"Records":[{"Name":"const:main","Fields":["main.stdXAuthFileMod"]}]}
{"Filepath":"cmd/greeter-display-daemon/main.go","Functions":[{"Uniquefunname":"func (m *Manager) beginMoveMouse()","Funname":"beginMoveMouse","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) beginTouch()","Funname":"beginTouch","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) configure()","Funname":"configure","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) doShowCursor(show bool) error","Funname":"doShowCursor","Returntype":"error","Args":"show bool"},{"Uniquefunname":"func (m *Manager) doXISelectEvents(evMask uint32) error","Funname":"doXISelectEvents","Returntype":"error","Args":"evMask uint32"},{"Uniquefunname":"func (m *Manager) getOutputInfo(output randr.Output) (*randr.GetOutputInfoReply, error)","Funname":"getOutputInfo","Returntype":"(*randr.GetOutputInfoReply, error)","Args":"output randr.Output"},{"Uniquefunname":"func (m *Manager) getScreenResources() (*randr.GetScreenResourcesReply, error)","Funname":"getScreenResources","Returntype":"(*randr.GetScreenResourcesReply, error)","Args":""},{"Uniquefunname":"func (m *Manager) handleOutputChanged(ev *randr.OutputChangeNotifyEvent)","Funname":"handleOutputChanged","Returntype":"","Args":"ev *randr.OutputChangeNotifyEvent"},{"Uniquefunname":"func (m *Manager) handleScreenChanged(ev *randr.ScreenChangeNotifyEvent)","Funname":"handleScreenChanged","Returntype":"","Args":"ev *randr.ScreenChangeNotifyEvent"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) initXExtensions()","Funname":"initXExtensions","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) listenEvent()","Funname":"listenEvent","Returntype":"","Args":""},{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) beginMoveMouse()","Funname":"main.Manager.beginMoveMouse","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) beginTouch()","Funname":"main.Manager.beginTouch","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) configure()","Funname":"main.Manager.configure","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) doShowCursor(show bool) error","Funname":"main.Manager.doShowCursor","Returntype":"error","Args":"show bool"},{"Uniquefunname":"func (m *Manager) doXISelectEvents(evMask uint32) error","Funname":"main.Manager.doXISelectEvents","Returntype":"error","Args":"evMask uint32"},{"Uniquefunname":"func (m *Manager) getOutputInfo(output randr.Output) (*randr.GetOutputInfoReply, error)","Funname":"main.Manager.getOutputInfo","Returntype":"(*randr.GetOutputInfoReply, error)","Args":"output randr.Output"},{"Uniquefunname":"func (m *Manager) getScreenResources() (*randr.GetScreenResourcesReply, error)","Funname":"main.Manager.getScreenResources","Returntype":"(*randr.GetScreenResourcesReply, error)","Args":""},{"Uniquefunname":"func (m *Manager) handleOutputChanged(ev *randr.OutputChangeNotifyEvent)","Funname":"main.Manager.handleOutputChanged","Returntype":"","Args":"ev *randr.OutputChangeNotifyEvent"},{"Uniquefunname":"func (m *Manager) handleScreenChanged(ev *randr.ScreenChangeNotifyEvent)","Funname":"main.Manager.handleScreenChanged","Returntype":"","Args":"ev *randr.ScreenChangeNotifyEvent"},{"Uniquefunname":"func (m *Manager) initXExtensions()","Funname":"main.Manager.initXExtensions","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) listenEvent()","Funname":"main.Manager.listenEvent","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) queryPointer() (*x.QueryPointerReply, error)","Funname":"main.Manager.queryPointer","Returntype":"(*x.QueryPointerReply, error)","Args":""},{"Uniquefunname":"func init()","Funname":"main.init","Returntype":"","Args":""},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""},{"Uniquefunname":"func newManager() (*Manager, error)","Funname":"main.newManager","Returntype":"(*Manager, error)","Args":""},{"Uniquefunname":"func newManager() (*Manager, error)","Funname":"newManager","Returntype":"(*Manager, error)","Args":""},{"Uniquefunname":"func (m *Manager) queryPointer() (*x.QueryPointerReply, error)","Funname":"queryPointer","Returntype":"(*x.QueryPointerReply, error)","Args":""}],"Records":[{"Name":"struct:main.Manager","Fields":["main.Manager.configTimestamp x.Timestamp","main.Manager.cursorShowed bool","main.Manager.outputs map[randr.Output]*Output","main.Manager.xConn *x.Conn"]},{"Name":"struct:main.Output","Fields":["main.Output.connected bool","main.Output.id randr.Output","main.Output.name string"]},{"Name":"var:main","Fields":["main._hasRandr1d2","main.logger"]},{"Name":"const:main","Fields":["main.evMaskForHideCursor"]}]}
{"Filepath":"cmd/wl_display_daemon/wl_display_daemon.go","Functions":[{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""}],"Records":null}
{"Filepath":"display/brightness.go","Functions":[{"Uniquefunname":"func (err InvalidOutputNameError) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) changeBrightness(raised bool) error","Funname":"changeBrightness","Returntype":"error","Args":"raised bool"},{"Uniquefunname":"func (err InvalidOutputNameError) Error() string","Funname":"display.InvalidOutputNameError.Error","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) changeBrightness(raised bool) error","Funname":"display.Manager.changeBrightness","Returntype":"error","Args":"raised bool"},{"Uniquefunname":"func (m *Manager) doSetBrightness(value float64, name string) error","Funname":"display.Manager.doSetBrightness","Returntype":"error","Args":"value float64, name string"},{"Uniquefunname":"func (m *Manager) doSetBrightnessAux(fake bool, value float64, name string) error","Funname":"display.Manager.doSetBrightnessAux","Returntype":"error","Args":"fake bool, value float64, name string"},{"Uniquefunname":"func (m *Manager) getBrightnessSetter() string","Funname":"display.Manager.getBrightnessSetter","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) getSavedBrightnessTable() (map[string]float64, error)","Funname":"display.Manager.getSavedBrightnessTable","Returntype":"(map[string]float64, error)","Args":""},{"Uniquefunname":"func (m *Manager) initBrightness()","Funname":"display.Manager.initBrightness","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) isBuiltinMonitor(monitor *Monitor) bool","Funname":"display.Manager.isBuiltinMonitor","Returntype":"bool","Args":"monitor *Monitor"},{"Uniquefunname":"func (m *Manager) saveBrightness()","Funname":"display.Manager.saveBrightness","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) setMonitorBrightness(monitor *Monitor, value float64) error","Funname":"display.Manager.setMonitorBrightness","Returntype":"error","Args":"monitor *Monitor, value float64"},{"Uniquefunname":"func (m *Manager) doSetBrightness(value float64, name string) error","Funname":"doSetBrightness","Returntype":"error","Args":"value float64, name string"},{"Uniquefunname":"func (m *Manager) doSetBrightnessAux(fake bool, value float64, name string) error","Funname":"doSetBrightnessAux","Returntype":"error","Args":"fake bool, value float64, name string"},{"Uniquefunname":"func (m *Manager) getBrightnessSetter() string","Funname":"getBrightnessSetter","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) getSavedBrightnessTable() (map[string]float64, error)","Funname":"getSavedBrightnessTable","Returntype":"(map[string]float64, error)","Args":""},{"Uniquefunname":"func (m *Manager) initBrightness()","Funname":"initBrightness","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) isBuiltinMonitor(monitor *Monitor) bool","Funname":"isBuiltinMonitor","Returntype":"bool","Args":"monitor *Monitor"},{"Uniquefunname":"func (m *Manager) saveBrightness()","Funname":"saveBrightness","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) setMonitorBrightness(monitor *Monitor, value float64) error","Funname":"setMonitorBrightness","Returntype":"error","Args":"monitor *Monitor, value float64"}],"Records":[{"Name":"struct:display.InvalidOutputNameError","Fields":["display.InvalidOutputNameError.Name string"]}]}
{"Filepath":"display/config.go","Functions":[{"Uniquefunname":"func (c Config) save(filename string) error","Funname":"display.Config.save","Returntype":"error","Args":"filename string"},{"Uniquefunname":"func (s *ScreenConfig) getMonitorConfigs(mode uint8, customName string) []*MonitorConfig","Funname":"display.ScreenConfig.getMonitorConfigs","Returntype":"[]*MonitorConfig","Args":"mode uint8, customName string"},{"Uniquefunname":"func display.ScreenConfig.setMonitorConfigs(mode uint8, customName string, configs []*MonitorConfig)","Funname":"display.ScreenConfig.setMonitorConfigs","Returntype":"","Args":"mode uint8, customName string, configs []*MonitorConfig"},{"Uniquefunname":"func (s *ScreenConfig) setMonitorConfigsOnlyOne(configs []*MonitorConfig)","Funname":"display.ScreenConfig.setMonitorConfigsOnlyOne","Returntype":"","Args":"configs []*MonitorConfig"},{"Uniquefunname":"func getMonitorConfigByUuid(configs []*MonitorConfig, uuid string) *MonitorConfig","Funname":"display.getMonitorConfigByUuid","Returntype":"*MonitorConfig","Args":"configs []*MonitorConfig, uuid string"},{"Uniquefunname":"func init()","Funname":"display.init","Returntype":"","Args":""},{"Uniquefunname":"func loadBuiltinMonitorConfig(filename string) (string, error)","Funname":"display.loadBuiltinMonitorConfig","Returntype":"(string, error)","Args":"filename string"},{"Uniquefunname":"func loadConfig() (config Config)","Funname":"display.loadConfig","Returntype":"(config Config)","Args":""},{"Uniquefunname":"func loadConfigV4(filename string) (Config, error)","Funname":"display.loadConfigV4","Returntype":"(Config, error)","Args":"filename string"},{"Uniquefunname":"func saveBuiltinMonitorConfig(filename, name string) error","Funname":"display.saveBuiltinMonitorConfig","Returntype":"error","Args":"filename, name string"},{"Uniquefunname":"func setMonitorConfigsPrimary(configs []*MonitorConfig, uuid string)","Funname":"display.setMonitorConfigsPrimary","Returntype":"","Args":"configs []*MonitorConfig, uuid string"},{"Uniquefunname":"func updateMonitorConfigsName(configs []*MonitorConfig, monitorMap map[randr.Output]*Monitor)","Funname":"display.updateMonitorConfigsName","Returntype":"","Args":"configs []*MonitorConfig, monitorMap map[randr.Output]*Monitor"},{"Uniquefunname":"func getMonitorConfigByUuid(configs []*MonitorConfig, uuid string) *MonitorConfig","Funname":"getMonitorConfigByUuid","Returntype":"*MonitorConfig","Args":"configs []*MonitorConfig, uuid string"},{"Uniquefunname":"func (s *ScreenConfig) getMonitorConfigs(mode uint8, customName string) []*MonitorConfig","Funname":"getMonitorConfigs","Returntype":"[]*MonitorConfig","Args":"mode uint8, customName string"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func loadBuiltinMonitorConfig(filename string) (string, error)","Funname":"loadBuiltinMonitorConfig","Returntype":"(string, error)","Args":"filename string"},{"Uniquefunname":"func loadConfig() (config Config)","Funname":"loadConfig","Returntype":"(config Config)","Args":""},{"Uniquefunname":"func loadConfigV4(filename string) (Config, error)","Funname":"loadConfigV4","Returntype":"(Config, error)","Args":"filename string"},{"Uniquefunname":"func (c Config) save(filename string) error","Funname":"save","Returntype":"error","Args":"filename string"},{"Uniquefunname":"func saveBuiltinMonitorConfig(filename, name string) error","Funname":"saveBuiltinMonitorConfig","Returntype":"error","Args":"filename, name string"},{"Uniquefunname":"func setMonitorConfigs(mode uint8, customName string, configs []*MonitorConfig)","Funname":"setMonitorConfigs","Returntype":"","Args":"mode uint8, customName string, configs []*MonitorConfig"},{"Uniquefunname":"func (s *ScreenConfig) setMonitorConfigsOnlyOne(configs []*MonitorConfig)","Funname":"setMonitorConfigsOnlyOne","Returntype":"","Args":"configs []*MonitorConfig"},{"Uniquefunname":"func setMonitorConfigsPrimary(configs []*MonitorConfig, uuid string)","Funname":"setMonitorConfigsPrimary","Returntype":"","Args":"configs []*MonitorConfig, uuid string"},{"Uniquefunname":"func updateMonitorConfigsName(configs []*MonitorConfig, monitorMap map[randr.Output]*Monitor)","Funname":"updateMonitorConfigsName","Returntype":"","Args":"configs []*MonitorConfig, monitorMap map[randr.Output]*Monitor"}],"Records":[{"Name":"struct:display.CustomModeConfig","Fields":["display.CustomModeConfig.Monitors []*MonitorConfig","display.CustomModeConfig.Name string"]},{"Name":"struct:display.ExtendModeConfig","Fields":["display.ExtendModeConfig.Monitors []*MonitorConfig"]},{"Name":"struct:display.MirrorModeConfig","Fields":["display.MirrorModeConfig.Monitors []*MonitorConfig"]},{"Name":"struct:display.MonitorConfig","Fields":["display.MonitorConfig.Enabled bool","display.MonitorConfig.Height uint16","display.MonitorConfig.Name string","display.MonitorConfig.Primary bool","display.MonitorConfig.Reflect uint16","display.MonitorConfig.RefreshRate float64","display.MonitorConfig.Rotation uint16","display.MonitorConfig.UUID string","display.MonitorConfig.Width uint16","display.MonitorConfig.X int16","display.MonitorConfig.Y int16"]},{"Name":"struct:display.OnlyOneModeConfig","Fields":["display.OnlyOneModeConfig.Monitors []*MonitorConfig"]},{"Name":"struct:display.ScreenConfig","Fields":["display.ScreenConfig.Custom []*CustomModeConfig","display.ScreenConfig.Extend *ExtendModeConfig","display.ScreenConfig.Mirror *MirrorModeConfig","display.ScreenConfig.OnlyOne *OnlyOneModeConfig","display.ScreenConfig.Single *MonitorConfig"]},{"Name":"var:display","Fields":["display.builtinMonitorConfigFile","display.configFile","display.configVersionFile"]},{"Name":"const:display","Fields":["display.configVersion"]}]}
{"Filepath":"display/config_v3_3.go","Functions":[{"Uniquefunname":"func (c ConfigV3_3) toConfig() Config","Funname":"display.ConfigV3_3.toConfig","Returntype":"Config","Args":""},{"Uniquefunname":"func (sc *ScreenConfigV3_3) toMonitorConfigs() []*MonitorConfig","Funname":"display.ScreenConfigV3_3.toMonitorConfigs","Returntype":"[]*MonitorConfig","Args":""},{"Uniquefunname":"func (ck *configKey) getJoinedId() string","Funname":"display.configKey.getJoinedId","Returntype":"string","Args":""},{"Uniquefunname":"func loadConfigV3_3(filename string) (ConfigV3_3, error)","Funname":"display.loadConfigV3_3","Returntype":"(ConfigV3_3, error)","Args":"filename string"},{"Uniquefunname":"func parseConfigKey(str string) configKey","Funname":"display.parseConfigKey","Returntype":"configKey","Args":"str string"},{"Uniquefunname":"func (ck *configKey) getJoinedId() string","Funname":"getJoinedId","Returntype":"string","Args":""},{"Uniquefunname":"func loadConfigV3_3(filename string) (ConfigV3_3, error)","Funname":"loadConfigV3_3","Returntype":"(ConfigV3_3, error)","Args":"filename string"},{"Uniquefunname":"func parseConfigKey(str string) configKey","Funname":"parseConfigKey","Returntype":"configKey","Args":"str string"},{"Uniquefunname":"func (c ConfigV3_3) toConfig() Config","Funname":"toConfig","Returntype":"Config","Args":""},{"Uniquefunname":"func (sc *ScreenConfigV3_3) toMonitorConfigs() []*MonitorConfig","Funname":"toMonitorConfigs","Returntype":"[]*MonitorConfig","Args":""}],"Records":[{"Name":"struct:display.MonitorConfiV3_3","Fields":["display.MonitorConfiV3_3.Enabled bool","display.MonitorConfiV3_3.Height uint16","display.MonitorConfiV3_3.Name string","display.MonitorConfiV3_3.Reflect uint16","display.MonitorConfiV3_3.RefreshRate float64","display.MonitorConfiV3_3.Rotation uint16","display.MonitorConfiV3_3.UUID string","display.MonitorConfiV3_3.Width uint16","display.MonitorConfiV3_3.X int16","display.MonitorConfiV3_3.Y int16"]},{"Name":"struct:display.ScreenConfigV3_3","Fields":["display.ScreenConfigV3_3.BaseInfos []*MonitorConfiV3_3","display.ScreenConfigV3_3.Name string","display.ScreenConfigV3_3.Primary string"]},{"Name":"struct:display.configKey","Fields":["display.configKey.idFields []string","display.configKey.name string"]}]}
{"Filepath":"display/config_v3_3_test.go","Functions":[{"Uniquefunname":"func TestConfig(t *testing.T)","Funname":"TestConfig","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestConfig(t *testing.T)","Funname":"display.TestConfig","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"const:display","Fields":["display.cfgStr0"]}]}
{"Filepath":"display/display.go","Functions":[{"Uniquefunname":"func SetLogLevel(level log.Priority)","Funname":"SetLogLevel","Returntype":"","Args":"level log.Priority"},{"Uniquefunname":"func Start(service *dbusutil.Service) error","Funname":"Start","Returntype":"error","Args":"service *dbusutil.Service"},{"Uniquefunname":"func StartPart2() error","Funname":"StartPart2","Returntype":"error","Args":""},{"Uniquefunname":"func SetLogLevel(level log.Priority)","Funname":"display.SetLogLevel","Returntype":"","Args":"level log.Priority"},{"Uniquefunname":"func Start(service *dbusutil.Service) error","Funname":"display.Start","Returntype":"error","Args":"service *dbusutil.Service"},{"Uniquefunname":"func StartPart2() error","Funname":"display.StartPart2","Returntype":"error","Args":""}],"Records":[{"Name":"var:display","Fields":["display._dpy","display.logger"]},{"Name":"const:display","Fields":["display.dbusInterface","display.dbusPath","display.dbusServiceName"]}]}
{"Filepath":"display/display_dbusutil.go","Functions":[{"Uniquefunname":"func (v *Manager) emitPropChangedBrightness(value map[string]float64) error","Funname":"display.Manager.emitPropChangedBrightness","Returntype":"error","Args":"value map[string]float64"},{"Uniquefunname":"func (v *Manager) emitPropChangedCurrentCustomId(value string) error","Funname":"display.Manager.emitPropChangedCurrentCustomId","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Manager) emitPropChangedCustomIdList(value []string) error","Funname":"display.Manager.emitPropChangedCustomIdList","Returntype":"error","Args":"value []string"},{"Uniquefunname":"func (v *Manager) emitPropChangedDisplayMode(value byte) error","Funname":"display.Manager.emitPropChangedDisplayMode","Returntype":"error","Args":"value byte"},{"Uniquefunname":"func (v *Manager) emitPropChangedHasChanged(value bool) error","Funname":"display.Manager.emitPropChangedHasChanged","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Manager) emitPropChangedMaxBacklightBrightness(value uint32) error","Funname":"display.Manager.emitPropChangedMaxBacklightBrightness","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Manager) emitPropChangedMonitors(value []dbus.ObjectPath) error","Funname":"display.Manager.emitPropChangedMonitors","Returntype":"error","Args":"value []dbus.ObjectPath"},{"Uniquefunname":"func (v *Manager) emitPropChangedPrimary(value string) error","Funname":"display.Manager.emitPropChangedPrimary","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Manager) emitPropChangedPrimaryRect(value x.Rectangle) error","Funname":"display.Manager.emitPropChangedPrimaryRect","Returntype":"error","Args":"value x.Rectangle"},{"Uniquefunname":"func (v *Manager) emitPropChangedScreenHeight(value uint16) error","Funname":"display.Manager.emitPropChangedScreenHeight","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) emitPropChangedScreenWidth(value uint16) error","Funname":"display.Manager.emitPropChangedScreenWidth","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) emitPropChangedTouchMap(value map[string]string) error","Funname":"display.Manager.emitPropChangedTouchMap","Returntype":"error","Args":"value map[string]string"},{"Uniquefunname":"func (v *Manager) emitPropChangedTouchscreens(value dxTouchscreens) error","Funname":"display.Manager.emitPropChangedTouchscreens","Returntype":"error","Args":"value dxTouchscreens"},{"Uniquefunname":"func (v *Manager) setPropBrightness(value map[string]float64)","Funname":"display.Manager.setPropBrightness","Returntype":"","Args":"value map[string]float64"},{"Uniquefunname":"func (v *Manager) setPropCurrentCustomId(value string) (changed bool)","Funname":"display.Manager.setPropCurrentCustomId","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Manager) setPropCustomIdList(value []string)","Funname":"display.Manager.setPropCustomIdList","Returntype":"","Args":"value []string"},{"Uniquefunname":"func (v *Manager) setPropDisplayMode(value byte) (changed bool)","Funname":"display.Manager.setPropDisplayMode","Returntype":"(changed bool)","Args":"value byte"},{"Uniquefunname":"func (v *Manager) setPropHasChanged(value bool) (changed bool)","Funname":"display.Manager.setPropHasChanged","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Manager) setPropMaxBacklightBrightness(value uint32) (changed bool)","Funname":"display.Manager.setPropMaxBacklightBrightness","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Manager) setPropMonitors(value []dbus.ObjectPath)","Funname":"display.Manager.setPropMonitors","Returntype":"","Args":"value []dbus.ObjectPath"},{"Uniquefunname":"func (v *Manager) setPropPrimary(value string) (changed bool)","Funname":"display.Manager.setPropPrimary","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Manager) setPropPrimaryRect(value x.Rectangle)","Funname":"display.Manager.setPropPrimaryRect","Returntype":"","Args":"value x.Rectangle"},{"Uniquefunname":"func (v *Manager) setPropScreenHeight(value uint16) (changed bool)","Funname":"display.Manager.setPropScreenHeight","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) setPropScreenWidth(value uint16) (changed bool)","Funname":"display.Manager.setPropScreenWidth","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) setPropTouchMap(value map[string]string)","Funname":"display.Manager.setPropTouchMap","Returntype":"","Args":"value map[string]string"},{"Uniquefunname":"func (v *Manager) setPropTouchscreens(value dxTouchscreens)","Funname":"display.Manager.setPropTouchscreens","Returntype":"","Args":"value dxTouchscreens"},{"Uniquefunname":"func (v *Monitor) emitPropChangedBestMode(value ModeInfo) error","Funname":"display.Monitor.emitPropChangedBestMode","Returntype":"error","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Monitor) emitPropChangedConnected(value bool) error","Funname":"display.Monitor.emitPropChangedConnected","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Monitor) emitPropChangedCurrentMode(value ModeInfo) error","Funname":"display.Monitor.emitPropChangedCurrentMode","Returntype":"error","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Monitor) emitPropChangedEnabled(value bool) error","Funname":"display.Monitor.emitPropChangedEnabled","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Monitor) emitPropChangedHeight(value uint16) error","Funname":"display.Monitor.emitPropChangedHeight","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedID(value uint32) error","Funname":"display.Monitor.emitPropChangedID","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) emitPropChangedMmHeight(value uint32) error","Funname":"display.Monitor.emitPropChangedMmHeight","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) emitPropChangedMmWidth(value uint32) error","Funname":"display.Monitor.emitPropChangedMmWidth","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) emitPropChangedModes(value []ModeInfo) error","Funname":"display.Monitor.emitPropChangedModes","Returntype":"error","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Monitor) emitPropChangedName(value string) error","Funname":"display.Monitor.emitPropChangedName","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Monitor) emitPropChangedPreferredModes(value []ModeInfo) error","Funname":"display.Monitor.emitPropChangedPreferredModes","Returntype":"error","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Monitor) emitPropChangedReflect(value uint16) error","Funname":"display.Monitor.emitPropChangedReflect","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedReflects(value []uint16) error","Funname":"display.Monitor.emitPropChangedReflects","Returntype":"error","Args":"value []uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedRefreshRate(value float64) error","Funname":"display.Monitor.emitPropChangedRefreshRate","Returntype":"error","Args":"value float64"},{"Uniquefunname":"func (v *Monitor) emitPropChangedRotation(value uint16) error","Funname":"display.Monitor.emitPropChangedRotation","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedRotations(value []uint16) error","Funname":"display.Monitor.emitPropChangedRotations","Returntype":"error","Args":"value []uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedWidth(value uint16) error","Funname":"display.Monitor.emitPropChangedWidth","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedX(value int16) error","Funname":"display.Monitor.emitPropChangedX","Returntype":"error","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedY(value int16) error","Funname":"display.Monitor.emitPropChangedY","Returntype":"error","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) setPropBestMode(value ModeInfo)","Funname":"display.Monitor.setPropBestMode","Returntype":"","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Monitor) setPropConnected(value bool) (changed bool)","Funname":"display.Monitor.setPropConnected","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Monitor) setPropCurrentMode(value ModeInfo)","Funname":"display.Monitor.setPropCurrentMode","Returntype":"","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Monitor) setPropEnabled(value bool) (changed bool)","Funname":"display.Monitor.setPropEnabled","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Monitor) setPropHeight(value uint16) (changed bool)","Funname":"display.Monitor.setPropHeight","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropID(value uint32) (changed bool)","Funname":"display.Monitor.setPropID","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) setPropManufacturer(value string)","Funname":"display.Monitor.setPropManufacturer","Returntype":"","Args":"value string"},{"Uniquefunname":"func (v *Monitor) setPropMmHeight(value uint32) (changed bool)","Funname":"display.Monitor.setPropMmHeight","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) setPropMmWidth(value uint32) (changed bool)","Funname":"display.Monitor.setPropMmWidth","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) setPropModel(value string)","Funname":"display.Monitor.setPropModel","Returntype":"","Args":"value string"},{"Uniquefunname":"func (v *Monitor) setPropModes(value []ModeInfo)","Funname":"display.Monitor.setPropModes","Returntype":"","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Monitor) setPropName(value string) (changed bool)","Funname":"display.Monitor.setPropName","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Monitor) setPropPreferredModes(value []ModeInfo)","Funname":"display.Monitor.setPropPreferredModes","Returntype":"","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Monitor) setPropReflect(value uint16) (changed bool)","Funname":"display.Monitor.setPropReflect","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropReflects(value []uint16)","Funname":"display.Monitor.setPropReflects","Returntype":"","Args":"value []uint16"},{"Uniquefunname":"func (v *Monitor) setPropRefreshRate(value float64) (changed bool)","Funname":"display.Monitor.setPropRefreshRate","Returntype":"(changed bool)","Args":"value float64"},{"Uniquefunname":"func (v *Monitor) setPropRotation(value uint16) (changed bool)","Funname":"display.Monitor.setPropRotation","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropRotations(value []uint16)","Funname":"display.Monitor.setPropRotations","Returntype":"","Args":"value []uint16"},{"Uniquefunname":"func (v *Monitor) setPropWidth(value uint16) (changed bool)","Funname":"display.Monitor.setPropWidth","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropX(value int16) (changed bool)","Funname":"display.Monitor.setPropX","Returntype":"(changed bool)","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) setPropY(value int16) (changed bool)","Funname":"display.Monitor.setPropY","Returntype":"(changed bool)","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedBestMode(value ModeInfo) error","Funname":"emitPropChangedBestMode","Returntype":"error","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Manager) emitPropChangedBrightness(value map[string]float64) error","Funname":"emitPropChangedBrightness","Returntype":"error","Args":"value map[string]float64"},{"Uniquefunname":"func (v *Monitor) emitPropChangedConnected(value bool) error","Funname":"emitPropChangedConnected","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Manager) emitPropChangedCurrentCustomId(value string) error","Funname":"emitPropChangedCurrentCustomId","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Monitor) emitPropChangedCurrentMode(value ModeInfo) error","Funname":"emitPropChangedCurrentMode","Returntype":"error","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Manager) emitPropChangedCustomIdList(value []string) error","Funname":"emitPropChangedCustomIdList","Returntype":"error","Args":"value []string"},{"Uniquefunname":"func (v *Manager) emitPropChangedDisplayMode(value byte) error","Funname":"emitPropChangedDisplayMode","Returntype":"error","Args":"value byte"},{"Uniquefunname":"func (v *Monitor) emitPropChangedEnabled(value bool) error","Funname":"emitPropChangedEnabled","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Manager) emitPropChangedHasChanged(value bool) error","Funname":"emitPropChangedHasChanged","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Monitor) emitPropChangedHeight(value uint16) error","Funname":"emitPropChangedHeight","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedID(value uint32) error","Funname":"emitPropChangedID","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Manager) emitPropChangedMaxBacklightBrightness(value uint32) error","Funname":"emitPropChangedMaxBacklightBrightness","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) emitPropChangedMmHeight(value uint32) error","Funname":"emitPropChangedMmHeight","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) emitPropChangedMmWidth(value uint32) error","Funname":"emitPropChangedMmWidth","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) emitPropChangedModes(value []ModeInfo) error","Funname":"emitPropChangedModes","Returntype":"error","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Manager) emitPropChangedMonitors(value []dbus.ObjectPath) error","Funname":"emitPropChangedMonitors","Returntype":"error","Args":"value []dbus.ObjectPath"},{"Uniquefunname":"func (v *Monitor) emitPropChangedName(value string) error","Funname":"emitPropChangedName","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Monitor) emitPropChangedPreferredModes(value []ModeInfo) error","Funname":"emitPropChangedPreferredModes","Returntype":"error","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Manager) emitPropChangedPrimary(value string) error","Funname":"emitPropChangedPrimary","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Manager) emitPropChangedPrimaryRect(value x.Rectangle) error","Funname":"emitPropChangedPrimaryRect","Returntype":"error","Args":"value x.Rectangle"},{"Uniquefunname":"func (v *Monitor) emitPropChangedReflect(value uint16) error","Funname":"emitPropChangedReflect","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedReflects(value []uint16) error","Funname":"emitPropChangedReflects","Returntype":"error","Args":"value []uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedRefreshRate(value float64) error","Funname":"emitPropChangedRefreshRate","Returntype":"error","Args":"value float64"},{"Uniquefunname":"func (v *Monitor) emitPropChangedRotation(value uint16) error","Funname":"emitPropChangedRotation","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedRotations(value []uint16) error","Funname":"emitPropChangedRotations","Returntype":"error","Args":"value []uint16"},{"Uniquefunname":"func (v *Manager) emitPropChangedScreenHeight(value uint16) error","Funname":"emitPropChangedScreenHeight","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) emitPropChangedScreenWidth(value uint16) error","Funname":"emitPropChangedScreenWidth","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) emitPropChangedTouchMap(value map[string]string) error","Funname":"emitPropChangedTouchMap","Returntype":"error","Args":"value map[string]string"},{"Uniquefunname":"func (v *Manager) emitPropChangedTouchscreens(value dxTouchscreens) error","Funname":"emitPropChangedTouchscreens","Returntype":"error","Args":"value dxTouchscreens"},{"Uniquefunname":"func (v *Monitor) emitPropChangedWidth(value uint16) error","Funname":"emitPropChangedWidth","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedX(value int16) error","Funname":"emitPropChangedX","Returntype":"error","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedY(value int16) error","Funname":"emitPropChangedY","Returntype":"error","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) setPropBestMode(value ModeInfo)","Funname":"setPropBestMode","Returntype":"","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Manager) setPropBrightness(value map[string]float64)","Funname":"setPropBrightness","Returntype":"","Args":"value map[string]float64"},{"Uniquefunname":"func (v *Monitor) setPropConnected(value bool) (changed bool)","Funname":"setPropConnected","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Manager) setPropCurrentCustomId(value string) (changed bool)","Funname":"setPropCurrentCustomId","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Monitor) setPropCurrentMode(value ModeInfo)","Funname":"setPropCurrentMode","Returntype":"","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Manager) setPropCustomIdList(value []string)","Funname":"setPropCustomIdList","Returntype":"","Args":"value []string"},{"Uniquefunname":"func (v *Manager) setPropDisplayMode(value byte) (changed bool)","Funname":"setPropDisplayMode","Returntype":"(changed bool)","Args":"value byte"},{"Uniquefunname":"func (v *Monitor) setPropEnabled(value bool) (changed bool)","Funname":"setPropEnabled","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Manager) setPropHasChanged(value bool) (changed bool)","Funname":"setPropHasChanged","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Monitor) setPropHeight(value uint16) (changed bool)","Funname":"setPropHeight","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropID(value uint32) (changed bool)","Funname":"setPropID","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) setPropManufacturer(value string)","Funname":"setPropManufacturer","Returntype":"","Args":"value string"},{"Uniquefunname":"func (v *Manager) setPropMaxBacklightBrightness(value uint32) (changed bool)","Funname":"setPropMaxBacklightBrightness","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) setPropMmHeight(value uint32) (changed bool)","Funname":"setPropMmHeight","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) setPropMmWidth(value uint32) (changed bool)","Funname":"setPropMmWidth","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) setPropModel(value string)","Funname":"setPropModel","Returntype":"","Args":"value string"},{"Uniquefunname":"func (v *Monitor) setPropModes(value []ModeInfo)","Funname":"setPropModes","Returntype":"","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Manager) setPropMonitors(value []dbus.ObjectPath)","Funname":"setPropMonitors","Returntype":"","Args":"value []dbus.ObjectPath"},{"Uniquefunname":"func (v *Monitor) setPropName(value string) (changed bool)","Funname":"setPropName","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Monitor) setPropPreferredModes(value []ModeInfo)","Funname":"setPropPreferredModes","Returntype":"","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Manager) setPropPrimary(value string) (changed bool)","Funname":"setPropPrimary","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Manager) setPropPrimaryRect(value x.Rectangle)","Funname":"setPropPrimaryRect","Returntype":"","Args":"value x.Rectangle"},{"Uniquefunname":"func (v *Monitor) setPropReflect(value uint16) (changed bool)","Funname":"setPropReflect","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropReflects(value []uint16)","Funname":"setPropReflects","Returntype":"","Args":"value []uint16"},{"Uniquefunname":"func (v *Monitor) setPropRefreshRate(value float64) (changed bool)","Funname":"setPropRefreshRate","Returntype":"(changed bool)","Args":"value float64"},{"Uniquefunname":"func (v *Monitor) setPropRotation(value uint16) (changed bool)","Funname":"setPropRotation","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropRotations(value []uint16)","Funname":"setPropRotations","Returntype":"","Args":"value []uint16"},{"Uniquefunname":"func (v *Manager) setPropScreenHeight(value uint16) (changed bool)","Funname":"setPropScreenHeight","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) setPropScreenWidth(value uint16) (changed bool)","Funname":"setPropScreenWidth","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) setPropTouchMap(value map[string]string)","Funname":"setPropTouchMap","Returntype":"","Args":"value map[string]string"},{"Uniquefunname":"func (v *Manager) setPropTouchscreens(value dxTouchscreens)","Funname":"setPropTouchscreens","Returntype":"","Args":"value dxTouchscreens"},{"Uniquefunname":"func (v *Monitor) setPropWidth(value uint16) (changed bool)","Funname":"setPropWidth","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropX(value int16) (changed bool)","Funname":"setPropX","Returntype":"(changed bool)","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) setPropY(value int16) (changed bool)","Funname":"setPropY","Returntype":"(changed bool)","Args":"value int16"}],"Records":null}
{"Filepath":"display/display_test.go","Functions":[{"Uniquefunname":"func TestCalcRecommendedScaleFactor(t *testing.T)","Funname":"TestCalcRecommendedScaleFactor","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_filterModeInfos(t *testing.T)","Funname":"Test_filterModeInfos","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_getMaxAreaSize(t *testing.T)","Funname":"Test_getMaxAreaSize","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCalcRecommendedScaleFactor(t *testing.T)","Funname":"display.TestCalcRecommendedScaleFactor","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_filterModeInfos(t *testing.T)","Funname":"display.Test_filterModeInfos","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_getMaxAreaSize(t *testing.T)","Funname":"display.Test_getMaxAreaSize","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"display/handle_event.go","Functions":[{"Uniquefunname":"func (m *Manager) handleCrtcChanged(ev *randr.CrtcChangeNotifyEvent)","Funname":"display.Manager.handleCrtcChanged","Returntype":"","Args":"ev *randr.CrtcChangeNotifyEvent"},{"Uniquefunname":"func (m *Manager) handleOutputChanged(ev *randr.OutputChangeNotifyEvent)","Funname":"display.Manager.handleOutputChanged","Returntype":"","Args":"ev *randr.OutputChangeNotifyEvent"},{"Uniquefunname":"func (m *Manager) handleOutputPropertyChanged(ev *randr.OutputPropertyNotifyEvent)","Funname":"display.Manager.handleOutputPropertyChanged","Returntype":"","Args":"ev *randr.OutputPropertyNotifyEvent"},{"Uniquefunname":"func (m *Manager) handleScreenChanged(ev *randr.ScreenChangeNotifyEvent)","Funname":"display.Manager.handleScreenChanged","Returntype":"","Args":"ev *randr.ScreenChangeNotifyEvent"},{"Uniquefunname":"func (m *Manager) listenEvent()","Funname":"display.Manager.listenEvent","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) handleCrtcChanged(ev *randr.CrtcChangeNotifyEvent)","Funname":"handleCrtcChanged","Returntype":"","Args":"ev *randr.CrtcChangeNotifyEvent"},{"Uniquefunname":"func (m *Manager) handleOutputChanged(ev *randr.OutputChangeNotifyEvent)","Funname":"handleOutputChanged","Returntype":"","Args":"ev *randr.OutputChangeNotifyEvent"},{"Uniquefunname":"func (m *Manager) handleOutputPropertyChanged(ev *randr.OutputPropertyNotifyEvent)","Funname":"handleOutputPropertyChanged","Returntype":"","Args":"ev *randr.OutputPropertyNotifyEvent"},{"Uniquefunname":"func (m *Manager) handleScreenChanged(ev *randr.ScreenChangeNotifyEvent)","Funname":"handleScreenChanged","Returntype":"","Args":"ev *randr.ScreenChangeNotifyEvent"},{"Uniquefunname":"func (m *Manager) listenEvent()","Funname":"listenEvent","Returntype":"","Args":""}],"Records":null}
{"Filepath":"display/manager.go","Functions":[{"Uniquefunname":"func GetRecommendedScaleFactor() float64","Funname":"GetRecommendedScaleFactor","Returntype":"float64","Args":""},{"Uniquefunname":"func Init(xConn *x.Conn)","Funname":"Init","Returntype":"","Args":"xConn *x.Conn"},{"Uniquefunname":"func (m *Manager) addMonitor(output randr.Output, outputInfo *randr.GetOutputInfoReply) error","Funname":"addMonitor","Returntype":"error","Args":"output randr.Output, outputInfo *randr.GetOutputInfoReply"},{"Uniquefunname":"func (m *Manager) addMonitorFallback(screenInfo *randr.GetScreenInfoReply) (*Monitor, error)","Funname":"addMonitorFallback","Returntype":"(*Monitor, error)","Args":"screenInfo *randr.GetScreenInfoReply"},{"Uniquefunname":"func (m *Manager) apply() error","Funname":"apply","Returntype":"error","Args":""},{"Uniquefunname":"func (m *Manager) applyConfigs(configs []*MonitorConfig) error","Funname":"applyConfigs","Returntype":"error","Args":"configs []*MonitorConfig"},{"Uniquefunname":"func (m *Manager) applyDisplayMode()","Funname":"applyDisplayMode","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) associateTouch(outputName, touchSerial string) error","Funname":"associateTouch","Returntype":"error","Args":"outputName, touchSerial string"},{"Uniquefunname":"func calcRecommendedScaleFactor(widthPx, heightPx, widthMm, heightMm float64) float64","Funname":"calcRecommendedScaleFactor","Returntype":"float64","Args":"widthPx, heightPx, widthMm, heightMm float64"},{"Uniquefunname":"func (m *Manager) deleteCustomMode(name string) (err error)","Funname":"deleteCustomMode","Returntype":"(err error)","Args":"name string"},{"Uniquefunname":"func (m *Manager) disableCrtc(crtc randr.Crtc, cfgTs x.Timestamp) error","Funname":"disableCrtc","Returntype":"error","Args":"crtc randr.Crtc, cfgTs x.Timestamp"},{"Uniquefunname":"func GetRecommendedScaleFactor() float64","Funname":"display.GetRecommendedScaleFactor","Returntype":"float64","Args":""},{"Uniquefunname":"func Init(xConn *x.Conn)","Funname":"display.Init","Returntype":"","Args":"xConn *x.Conn"},{"Uniquefunname":"func (m *Manager) addMonitor(output randr.Output, outputInfo *randr.GetOutputInfoReply) error","Funname":"display.Manager.addMonitor","Returntype":"error","Args":"output randr.Output, outputInfo *randr.GetOutputInfoReply"},{"Uniquefunname":"func (m *Manager) addMonitorFallback(screenInfo *randr.GetScreenInfoReply) (*Monitor, error)","Funname":"display.Manager.addMonitorFallback","Returntype":"(*Monitor, error)","Args":"screenInfo *randr.GetScreenInfoReply"},{"Uniquefunname":"func (m *Manager) apply() error","Funname":"display.Manager.apply","Returntype":"error","Args":""},{"Uniquefunname":"func (m *Manager) applyConfigs(configs []*MonitorConfig) error","Funname":"display.Manager.applyConfigs","Returntype":"error","Args":"configs []*MonitorConfig"},{"Uniquefunname":"func (m *Manager) applyDisplayMode()","Funname":"display.Manager.applyDisplayMode","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) associateTouch(outputName, touchSerial string) error","Funname":"display.Manager.associateTouch","Returntype":"error","Args":"outputName, touchSerial string"},{"Uniquefunname":"func (m *Manager) deleteCustomMode(name string) (err error)","Funname":"display.Manager.deleteCustomMode","Returntype":"(err error)","Args":"name string"},{"Uniquefunname":"func (m *Manager) disableCrtc(crtc randr.Crtc, cfgTs x.Timestamp) error","Funname":"display.Manager.disableCrtc","Returntype":"error","Args":"crtc randr.Crtc, cfgTs x.Timestamp"},{"Uniquefunname":"func (m *Manager) doMapTouches()","Funname":"display.Manager.doMapTouches","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) doSetTouchMap(output, touchSerial string) error","Funname":"display.Manager.doSetTouchMap","Returntype":"error","Args":"output, touchSerial string"},{"Uniquefunname":"func (m *Manager) findFreeCrtc(output randr.Output) randr.Crtc","Funname":"display.Manager.findFreeCrtc","Returntype":"randr.Crtc","Args":"output randr.Output"},{"Uniquefunname":"func (m *Manager) getConnectedMonitors() Monitors","Funname":"display.Manager.getConnectedMonitors","Returntype":"Monitors","Args":""},{"Uniquefunname":"func (m *Manager) getCrtcInfo(crtc randr.Crtc) (*randr.GetCrtcInfoReply, error)","Funname":"display.Manager.getCrtcInfo","Returntype":"(*randr.GetCrtcInfoReply, error)","Args":"crtc randr.Crtc"},{"Uniquefunname":"func (m *Manager) getCustomIdList() []string","Funname":"display.Manager.getCustomIdList","Returntype":"[]string","Args":""},{"Uniquefunname":"func (m *Manager) getDefaultPrimaryMonitor(monitors []*Monitor) *Monitor","Funname":"display.Manager.getDefaultPrimaryMonitor","Returntype":"*Monitor","Args":"monitors []*Monitor"},{"Uniquefunname":"func (m *Manager) getModeInfo(mode randr.Mode) ModeInfo","Funname":"display.Manager.getModeInfo","Returntype":"ModeInfo","Args":"mode randr.Mode"},{"Uniquefunname":"func (m *Manager) getModeInfos(modes []randr.Mode) []ModeInfo","Funname":"display.Manager.getModeInfos","Returntype":"[]ModeInfo","Args":"modes []randr.Mode"},{"Uniquefunname":"func (m *Manager) getMonitorsId() string","Funname":"display.Manager.getMonitorsId","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) getOutputInfo(output randr.Output) (*randr.GetOutputInfoReply, error)","Funname":"display.Manager.getOutputInfo","Returntype":"(*randr.GetOutputInfoReply, error)","Args":"output randr.Output"},{"Uniquefunname":"func (m *Manager) getOutputPrimary() (randr.Output, error)","Funname":"display.Manager.getOutputPrimary","Returntype":"(randr.Output, error)","Args":""},{"Uniquefunname":"func (m *Manager) getPortType(name string) string","Funname":"display.Manager.getPortType","Returntype":"string","Args":"name string"},{"Uniquefunname":"func (m *Manager) getPriorMonitor(monitors []*Monitor) *Monitor","Funname":"display.Manager.getPriorMonitor","Returntype":"*Monitor","Args":"monitors []*Monitor"},{"Uniquefunname":"func (m *Manager) getScreenConfig() *ScreenConfig","Funname":"display.Manager.getScreenConfig","Returntype":"*ScreenConfig","Args":""},{"Uniquefunname":"func (m *Manager) getScreenResourcesCurrent() (*randr.GetScreenResourcesCurrentReply, error)","Funname":"display.Manager.getScreenResourcesCurrent","Returntype":"(*randr.GetScreenResourcesCurrentReply, error)","Args":""},{"Uniquefunname":"func (m *Manager) getScreenSize() (sw, sh uint16)","Funname":"display.Manager.getScreenSize","Returntype":"(sw, sh uint16)","Args":""},{"Uniquefunname":"func (m *Manager) getScreenSize1() screenSize","Funname":"display.Manager.getScreenSize1","Returntype":"screenSize","Args":""},{"Uniquefunname":"func (m *Manager) handleTouchscreenChanged()","Funname":"display.Manager.handleTouchscreenChanged","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) init()","Funname":"display.Manager.init","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) initBuiltinMonitor()","Funname":"display.Manager.initBuiltinMonitor","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) initColorTemperature()","Funname":"display.Manager.initColorTemperature","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) initCrtcMap(crtcs []randr.Crtc) error","Funname":"display.Manager.initCrtcMap","Returntype":"error","Args":"crtcs []randr.Crtc"},{"Uniquefunname":"func (m *Manager) initOutputMap(outputs []randr.Output) error","Funname":"display.Manager.initOutputMap","Returntype":"error","Args":"outputs []randr.Output"},{"Uniquefunname":"func (m *Manager) initTouchMap()","Funname":"display.Manager.initTouchMap","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) initTouchscreens()","Funname":"display.Manager.initTouchscreens","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) isCustomModeBeingUsed(name string) bool","Funname":"display.Manager.isCustomModeBeingUsed","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (m *Manager) markClean()","Funname":"display.Manager.markClean","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) modifyConfigName(name, newName string) (err error)","Funname":"display.Manager.modifyConfigName","Returntype":"(err error)","Args":"name, newName string"},{"Uniquefunname":"func (m *Manager) save() (err error)","Funname":"display.Manager.save","Returntype":"(err error)","Args":""},{"Uniquefunname":"func (m *Manager) saveConfig() error","Funname":"display.Manager.saveConfig","Returntype":"error","Args":""},{"Uniquefunname":"func (m *Manager) setCurrentCustomId(name string)","Funname":"display.Manager.setCurrentCustomId","Returntype":"","Args":"name string"},{"Uniquefunname":"func (m *Manager) setDisplayMode(mode byte)","Funname":"display.Manager.setDisplayMode","Returntype":"","Args":"mode byte"},{"Uniquefunname":"func (m *Manager) setOutputPrimary(output randr.Output) error","Funname":"display.Manager.setOutputPrimary","Returntype":"error","Args":"output randr.Output"},{"Uniquefunname":"func (m *Manager) setPrimary(name string) error","Funname":"display.Manager.setPrimary","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (m *Manager) setScreenSize(ss screenSize) error","Funname":"display.Manager.setScreenSize","Returntype":"error","Args":"ss screenSize"},{"Uniquefunname":"func (m *Manager) showTouchscreenDialog(touchscreenSerial string) error","Funname":"display.Manager.showTouchscreenDialog","Returntype":"error","Args":"touchscreenSerial string"},{"Uniquefunname":"func (m *Manager) switchMode(mode byte, name string) (err error)","Funname":"display.Manager.switchMode","Returntype":"(err error)","Args":"mode byte, name string"},{"Uniquefunname":"func (m *Manager) switchModeCustom(name string) (err error)","Funname":"display.Manager.switchModeCustom","Returntype":"(err error)","Args":"name string"},{"Uniquefunname":"func (m *Manager) switchModeExtend(primary string) (err error)","Funname":"display.Manager.switchModeExtend","Returntype":"(err error)","Args":"primary string"},{"Uniquefunname":"func (m *Manager) switchModeMirror() (err error)","Funname":"display.Manager.switchModeMirror","Returntype":"(err error)","Args":""},{"Uniquefunname":"func (m *Manager) switchModeMirrorAux() (err error, monitor0 *Monitor)","Funname":"display.Manager.switchModeMirrorAux","Returntype":"(err error, monitor0 *Monitor)","Args":""},{"Uniquefunname":"func (m *Manager) switchModeOnlyOne(name string) (err error)","Funname":"display.Manager.switchModeOnlyOne","Returntype":"(err error)","Args":"name string"},{"Uniquefunname":"func (m *Manager) updateBuiltinMonitorOnDisconnected(id uint32)","Funname":"display.Manager.updateBuiltinMonitorOnDisconnected","Returntype":"","Args":"id uint32"},{"Uniquefunname":"func (m *Manager) updateCrtcInfo(crtc randr.Crtc) (*randr.GetCrtcInfoReply, error)","Funname":"display.Manager.updateCrtcInfo","Returntype":"(*randr.GetCrtcInfoReply, error)","Args":"crtc randr.Crtc"},{"Uniquefunname":"func (m *Manager) updateMonitor(output randr.Output, outputInfo *randr.GetOutputInfoReply)","Funname":"display.Manager.updateMonitor","Returntype":"","Args":"output randr.Output, outputInfo *randr.GetOutputInfoReply"},{"Uniquefunname":"func (m *Manager) updateMonitorCrtcInfo(monitor *Monitor, crtcInfo *randr.GetCrtcInfoReply)","Funname":"display.Manager.updateMonitorCrtcInfo","Returntype":"","Args":"monitor *Monitor, crtcInfo *randr.GetCrtcInfoReply"},{"Uniquefunname":"func (m *Manager) updateMonitorFallback(screenInfo *randr.GetScreenInfoReply) *Monitor","Funname":"display.Manager.updateMonitorFallback","Returntype":"*Monitor","Args":"screenInfo *randr.GetScreenInfoReply"},{"Uniquefunname":"func (m *Manager) updateOutputInfo(output randr.Output) (*randr.GetOutputInfoReply, error)","Funname":"display.Manager.updateOutputInfo","Returntype":"(*randr.GetOutputInfoReply, error)","Args":"output randr.Output"},{"Uniquefunname":"func (m *Manager) updateOutputPrimary()","Funname":"display.Manager.updateOutputPrimary","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) updatePropMonitors()","Funname":"display.Manager.updatePropMonitors","Returntype":"","Args":""},{"Uniquefunname":"func calcRecommendedScaleFactor(widthPx, heightPx, widthMm, heightMm float64) float64","Funname":"display.calcRecommendedScaleFactor","Returntype":"float64","Args":"widthPx, heightPx, widthMm, heightMm float64"},{"Uniquefunname":"func display.getScreenInfoSize(screenInfo *randr.GetScreenInfoReply)(size randr.ScreenSize, err error)","Funname":"display.getScreenInfoSize","Returntype":"(size randr.ScreenSize, err error)","Args":"screenInfo *randr.GetScreenInfoReply"},{"Uniquefunname":"func getScreenResources(xConn *x.Conn) (*randr.GetScreenResourcesReply, error)","Funname":"display.getScreenResources","Returntype":"(*randr.GetScreenResourcesReply, error)","Args":"xConn *x.Conn"},{"Uniquefunname":"func monitorsRemove(monitors []*Monitor, id uint32) []*Monitor","Funname":"display.monitorsRemove","Returntype":"[]*Monitor","Args":"monitors []*Monitor, id uint32"},{"Uniquefunname":"func newManager(service *dbusutil.Service) *Manager","Funname":"display.newManager","Returntype":"*Manager","Args":"service *dbusutil.Service"},{"Uniquefunname":"func toListedScaleFactor(s float64) float64","Funname":"display.toListedScaleFactor","Returntype":"float64","Args":"s float64"},{"Uniquefunname":"func (m *Manager) doMapTouches()","Funname":"doMapTouches","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) doSetTouchMap(output, touchSerial string) error","Funname":"doSetTouchMap","Returntype":"error","Args":"output, touchSerial string"},{"Uniquefunname":"func (m *Manager) findFreeCrtc(output randr.Output) randr.Crtc","Funname":"findFreeCrtc","Returntype":"randr.Crtc","Args":"output randr.Output"},{"Uniquefunname":"func (m *Manager) getConnectedMonitors() Monitors","Funname":"getConnectedMonitors","Returntype":"Monitors","Args":""},{"Uniquefunname":"func (m *Manager) getCrtcInfo(crtc randr.Crtc) (*randr.GetCrtcInfoReply, error)","Funname":"getCrtcInfo","Returntype":"(*randr.GetCrtcInfoReply, error)","Args":"crtc randr.Crtc"},{"Uniquefunname":"func (m *Manager) getCustomIdList() []string","Funname":"getCustomIdList","Returntype":"[]string","Args":""},{"Uniquefunname":"func (m *Manager) getDefaultPrimaryMonitor(monitors []*Monitor) *Monitor","Funname":"getDefaultPrimaryMonitor","Returntype":"*Monitor","Args":"monitors []*Monitor"},{"Uniquefunname":"func (m *Manager) getModeInfo(mode randr.Mode) ModeInfo","Funname":"getModeInfo","Returntype":"ModeInfo","Args":"mode randr.Mode"},{"Uniquefunname":"func (m *Manager) getModeInfos(modes []randr.Mode) []ModeInfo","Funname":"getModeInfos","Returntype":"[]ModeInfo","Args":"modes []randr.Mode"},{"Uniquefunname":"func (m *Manager) getMonitorsId() string","Funname":"getMonitorsId","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) getOutputInfo(output randr.Output) (*randr.GetOutputInfoReply, error)","Funname":"getOutputInfo","Returntype":"(*randr.GetOutputInfoReply, error)","Args":"output randr.Output"},{"Uniquefunname":"func (m *Manager) getOutputPrimary() (randr.Output, error)","Funname":"getOutputPrimary","Returntype":"(randr.Output, error)","Args":""},{"Uniquefunname":"func (m *Manager) getPortType(name string) string","Funname":"getPortType","Returntype":"string","Args":"name string"},{"Uniquefunname":"func (m *Manager) getPriorMonitor(monitors []*Monitor) *Monitor","Funname":"getPriorMonitor","Returntype":"*Monitor","Args":"monitors []*Monitor"},{"Uniquefunname":"func (m *Manager) getScreenConfig() *ScreenConfig","Funname":"getScreenConfig","Returntype":"*ScreenConfig","Args":""},{"Uniquefunname":"func getScreenInfoSize(screenInfo *randr.GetScreenInfoReply)(size randr.ScreenSize, err error)","Funname":"getScreenInfoSize","Returntype":"(size randr.ScreenSize, err error)","Args":"screenInfo *randr.GetScreenInfoReply"},{"Uniquefunname":"func getScreenResources(xConn *x.Conn) (*randr.GetScreenResourcesReply, error)","Funname":"getScreenResources","Returntype":"(*randr.GetScreenResourcesReply, error)","Args":"xConn *x.Conn"},{"Uniquefunname":"func (m *Manager) getScreenResourcesCurrent() (*randr.GetScreenResourcesCurrentReply, error)","Funname":"getScreenResourcesCurrent","Returntype":"(*randr.GetScreenResourcesCurrentReply, error)","Args":""},{"Uniquefunname":"func (m *Manager) getScreenSize() (sw, sh uint16)","Funname":"getScreenSize","Returntype":"(sw, sh uint16)","Args":""},{"Uniquefunname":"func (m *Manager) getScreenSize1() screenSize","Funname":"getScreenSize1","Returntype":"screenSize","Args":""},{"Uniquefunname":"func (m *Manager) handleTouchscreenChanged()","Funname":"handleTouchscreenChanged","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) initBuiltinMonitor()","Funname":"initBuiltinMonitor","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) initColorTemperature()","Funname":"initColorTemperature","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) initCrtcMap(crtcs []randr.Crtc) error","Funname":"initCrtcMap","Returntype":"error","Args":"crtcs []randr.Crtc"},{"Uniquefunname":"func (m *Manager) initOutputMap(outputs []randr.Output) error","Funname":"initOutputMap","Returntype":"error","Args":"outputs []randr.Output"},{"Uniquefunname":"func (m *Manager) initTouchMap()","Funname":"initTouchMap","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) initTouchscreens()","Funname":"initTouchscreens","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) isCustomModeBeingUsed(name string) bool","Funname":"isCustomModeBeingUsed","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (m *Manager) markClean()","Funname":"markClean","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) modifyConfigName(name, newName string) (err error)","Funname":"modifyConfigName","Returntype":"(err error)","Args":"name, newName string"},{"Uniquefunname":"func monitorsRemove(monitors []*Monitor, id uint32) []*Monitor","Funname":"monitorsRemove","Returntype":"[]*Monitor","Args":"monitors []*Monitor, id uint32"},{"Uniquefunname":"func newManager(service *dbusutil.Service) *Manager","Funname":"newManager","Returntype":"*Manager","Args":"service *dbusutil.Service"},{"Uniquefunname":"func (m *Manager) save() (err error)","Funname":"save","Returntype":"(err error)","Args":""},{"Uniquefunname":"func (m *Manager) saveConfig() error","Funname":"saveConfig","Returntype":"error","Args":""},{"Uniquefunname":"func (m *Manager) setCurrentCustomId(name string)","Funname":"setCurrentCustomId","Returntype":"","Args":"name string"},{"Uniquefunname":"func (m *Manager) setDisplayMode(mode byte)","Funname":"setDisplayMode","Returntype":"","Args":"mode byte"},{"Uniquefunname":"func (m *Manager) setOutputPrimary(output randr.Output) error","Funname":"setOutputPrimary","Returntype":"error","Args":"output randr.Output"},{"Uniquefunname":"func (m *Manager) setPrimary(name string) error","Funname":"setPrimary","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (m *Manager) setScreenSize(ss screenSize) error","Funname":"setScreenSize","Returntype":"error","Args":"ss screenSize"},{"Uniquefunname":"func (m *Manager) showTouchscreenDialog(touchscreenSerial string) error","Funname":"showTouchscreenDialog","Returntype":"error","Args":"touchscreenSerial string"},{"Uniquefunname":"func (m *Manager) switchMode(mode byte, name string) (err error)","Funname":"switchMode","Returntype":"(err error)","Args":"mode byte, name string"},{"Uniquefunname":"func (m *Manager) switchModeCustom(name string) (err error)","Funname":"switchModeCustom","Returntype":"(err error)","Args":"name string"},{"Uniquefunname":"func (m *Manager) switchModeExtend(primary string) (err error)","Funname":"switchModeExtend","Returntype":"(err error)","Args":"primary string"},{"Uniquefunname":"func (m *Manager) switchModeMirror() (err error)","Funname":"switchModeMirror","Returntype":"(err error)","Args":""},{"Uniquefunname":"func (m *Manager) switchModeMirrorAux() (err error, monitor0 *Monitor)","Funname":"switchModeMirrorAux","Returntype":"(err error, monitor0 *Monitor)","Args":""},{"Uniquefunname":"func (m *Manager) switchModeOnlyOne(name string) (err error)","Funname":"switchModeOnlyOne","Returntype":"(err error)","Args":"name string"},{"Uniquefunname":"func toListedScaleFactor(s float64) float64","Funname":"toListedScaleFactor","Returntype":"float64","Args":"s float64"},{"Uniquefunname":"func (m *Manager) updateBuiltinMonitorOnDisconnected(id uint32)","Funname":"updateBuiltinMonitorOnDisconnected","Returntype":"","Args":"id uint32"},{"Uniquefunname":"func (m *Manager) updateCrtcInfo(crtc randr.Crtc) (*randr.GetCrtcInfoReply, error)","Funname":"updateCrtcInfo","Returntype":"(*randr.GetCrtcInfoReply, error)","Args":"crtc randr.Crtc"},{"Uniquefunname":"func (m *Manager) updateMonitor(output randr.Output, outputInfo *randr.GetOutputInfoReply)","Funname":"updateMonitor","Returntype":"","Args":"output randr.Output, outputInfo *randr.GetOutputInfoReply"},{"Uniquefunname":"func (m *Manager) updateMonitorCrtcInfo(monitor *Monitor, crtcInfo *randr.GetCrtcInfoReply)","Funname":"updateMonitorCrtcInfo","Returntype":"","Args":"monitor *Monitor, crtcInfo *randr.GetCrtcInfoReply"},{"Uniquefunname":"func (m *Manager) updateMonitorFallback(screenInfo *randr.GetScreenInfoReply) *Monitor","Funname":"updateMonitorFallback","Returntype":"*Monitor","Args":"screenInfo *randr.GetScreenInfoReply"},{"Uniquefunname":"func (m *Manager) updateOutputInfo(output randr.Output) (*randr.GetOutputInfoReply, error)","Funname":"updateOutputInfo","Returntype":"(*randr.GetOutputInfoReply, error)","Args":"output randr.Output"},{"Uniquefunname":"func (m *Manager) updateOutputPrimary()","Funname":"updateOutputPrimary","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) updatePropMonitors()","Funname":"updatePropMonitors","Returntype":"","Args":""}],"Records":[{"Name":"const:display","Fields":["display.ColorTemperatureModeAuto","display.ColorTemperatureModeManual","display.ColorTemperatureModeNormal","display.DisplayModeCustom","display.DisplayModeExtend","display.DisplayModeMirror","display.DisplayModeOnlyOne","display.DisplayModeUnknow","display.cmdTouchscreenDialogBin","display.customModeDelim","display.gsKeyBrightness","display.gsKeyColorTemperatureManual","display.gsKeyColorTemperatureMode","display.gsKeyCustomMode","display.gsKeyDisplayMode","display.gsKeyMapOutput","display.gsKeySetter","display.gsSchemaDisplay","display.monitorsIdDelimiter","display.priorityDP","display.priorityDVI","display.priorityEDP","display.priorityHDMI","display.priorityOther","display.priorityVGA"]},{"Name":"struct:display.Manager","Fields":["display.Manager.Brightness map[string]float64","display.Manager.ColorTemperatureManual gsprop.Int","display.Manager.ColorTemperatureMode gsprop.Enum","display.Manager.CurrentCustomId string","display.Manager.CustomIdList []string","display.Manager.DisplayMode byte","display.Manager.HasChanged bool","display.Manager.MaxBacklightBrightness uint32","display.Manager.Monitors []dbus.ObjectPath","display.Manager.Primary string","display.Manager.PrimaryRect x.Rectangle","display.Manager.PropsMu sync.RWMutex","display.Manager.ScreenHeight uint16","display.Manager.ScreenWidth uint16","display.Manager.TouchMap map[string]string","display.Manager.Touchscreens dxTouchscreens","display.Manager.builtinMonitor *Monitor","display.Manager.builtinMonitorMu sync.Mutex","display.Manager.candidateBuiltinMonitors []*Monitor","display.Manager.config Config","display.Manager.configTimestamp x.Timestamp","display.Manager.crtcMap map[randr.Crtc]*randr.GetCrtcInfoReply","display.Manager.crtcMapMu sync.Mutex","display.Manager.isLaptop bool","display.Manager.methods *struct { AssociateTouch func() `in:\"outputName,touchSerial\"`; ChangeBrightness func() `in:\"raised\"`; DeleteCustomMode func() `in:\"name\"`; GetBrightness func() `out:\"values\"`; ListOutputNames func() `out:\"names\"`; ListOutputsCommonModes func() `out:\"modes\"`; ModifyConfigName func() `in:\"name,newName\"`; SetAndSaveBrightness func() `in:\"outputName,value\"`; SetBrightness func() `in:\"outputName,value\"`; SetPrimary func() `in:\"outputName\"`; SwitchMode func() `in:\"mode,name\"`; CanRotate func() `out:\"can\"`;","display.Manager.modeChanged bool","display.Manager.modes []randr.ModeInfo","display.Manager.monitorMap map[randr.Output]*Monitor","display.Manager.monitorMapMu sync.Mutex","display.Manager.monitorsId string","display.Manager.outputMap map[randr.Output]*randr.GetOutputInfoReply","display.Manager.outputMapMu sync.Mutex","display.Manager.recommendScaleFactor float64","display.Manager.service *dbusutil.Service","display.Manager.settings *gio.Settings","display.Manager.xConn *x.Conn"]},{"Name":"struct:display.ModeInfo","Fields":["display.ModeInfo.Height uint16","display.ModeInfo.Id uint32","display.ModeInfo.Rate float64","display.ModeInfo.Width uint16","display.ModeInfo.name string"]},{"Name":"var:display","Fields":["display._hasRandr1d2","display._xConn","display.monitorPriority"]},{"Name":"struct:display.crtcConfig","Fields":["display.crtcConfig.crtc randr.Crtc","display.crtcConfig.mode randr.Mode","display.crtcConfig.outputs []randr.Output","display.crtcConfig.rotation uint16","display.crtcConfig.x int16","display.crtcConfig.y int16"]},{"Name":"struct:display.monitorSizeInfo","Fields":["display.monitorSizeInfo.height uint16","display.monitorSizeInfo.mmHeight uint32","display.monitorSizeInfo.mmWidth uint32","display.monitorSizeInfo.width uint16"]},{"Name":"struct:display.screenSize","Fields":["display.screenSize.height uint16","display.screenSize.mmHeight uint32","display.screenSize.mmWidth uint32","display.screenSize.width uint16"]}]}
{"Filepath":"display/manager_ifc.go","Functions":[{"Uniquefunname":"func (m *Manager) ApplyChanges() *dbus.Error","Funname":"ApplyChanges","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) AssociateTouch(outputName, touchSerial string) *dbus.Error","Funname":"AssociateTouch","Returntype":"*dbus.Error","Args":"outputName, touchSerial string"},{"Uniquefunname":"func (m *Manager) CanRotate() (bool, *dbus.Error)","Funname":"CanRotate","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) CanSetBrightness(outputName string) (bool, *dbus.Error)","Funname":"CanSetBrightness","Returntype":"(bool, *dbus.Error)","Args":"outputName string"},{"Uniquefunname":"func (m *Manager) ChangeBrightness(raised bool) *dbus.Error","Funname":"ChangeBrightness","Returntype":"*dbus.Error","Args":"raised bool"},{"Uniquefunname":"func (m *Manager) DeleteCustomMode(name string) *dbus.Error","Funname":"DeleteCustomMode","Returntype":"*dbus.Error","Args":"name string"},{"Uniquefunname":"func (m *Manager) GetBrightness() (map[string]float64, *dbus.Error)","Funname":"GetBrightness","Returntype":"(map[string]float64, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) GetBuiltinMonitor() (string, dbus.ObjectPath, *dbus.Error)","Funname":"GetBuiltinMonitor","Returntype":"(string, dbus.ObjectPath, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) GetRealDisplayMode() (uint8, *dbus.Error)","Funname":"GetRealDisplayMode","Returntype":"(uint8, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) ListOutputNames() ([]string, *dbus.Error)","Funname":"ListOutputNames","Returntype":"([]string, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) ListOutputsCommonModes() ([]ModeInfo, *dbus.Error)","Funname":"ListOutputsCommonModes","Returntype":"([]ModeInfo, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) ModifyConfigName(name, newName string) *dbus.Error","Funname":"ModifyConfigName","Returntype":"*dbus.Error","Args":"name, newName string"},{"Uniquefunname":"func (m *Manager) RefreshBrightness() *dbus.Error","Funname":"RefreshBrightness","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) Reset() *dbus.Error","Funname":"Reset","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) ResetChanges() *dbus.Error","Funname":"ResetChanges","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) Save() *dbus.Error","Funname":"Save","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) SetAndSaveBrightness(outputName string, value float64) *dbus.Error","Funname":"SetAndSaveBrightness","Returntype":"*dbus.Error","Args":"outputName string, value float64"},{"Uniquefunname":"func (m *Manager) SetBrightness(outputName string, value float64) *dbus.Error","Funname":"SetBrightness","Returntype":"*dbus.Error","Args":"outputName string, value float64"},{"Uniquefunname":"func (m *Manager) SetColorTemperature(value int32) *dbus.Error","Funname":"SetColorTemperature","Returntype":"*dbus.Error","Args":"value int32"},{"Uniquefunname":"func (m *Manager) SetMethodAdjustCCT(adjustMethod int32) *dbus.Error","Funname":"SetMethodAdjustCCT","Returntype":"*dbus.Error","Args":"adjustMethod int32"},{"Uniquefunname":"func (m *Manager) SetPrimary(outputName string) *dbus.Error","Funname":"SetPrimary","Returntype":"*dbus.Error","Args":"outputName string"},{"Uniquefunname":"func (m *Manager) SwitchMode(mode byte, name string) *dbus.Error","Funname":"SwitchMode","Returntype":"*dbus.Error","Args":"mode byte, name string"},{"Uniquefunname":"func controlRedshift(action string)","Funname":"controlRedshift","Returntype":"","Args":"action string"},{"Uniquefunname":"func (m *Manager) ApplyChanges() *dbus.Error","Funname":"display.Manager.ApplyChanges","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) AssociateTouch(outputName, touchSerial string) *dbus.Error","Funname":"display.Manager.AssociateTouch","Returntype":"*dbus.Error","Args":"outputName, touchSerial string"},{"Uniquefunname":"func (m *Manager) CanRotate() (bool, *dbus.Error)","Funname":"display.Manager.CanRotate","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) CanSetBrightness(outputName string) (bool, *dbus.Error)","Funname":"display.Manager.CanSetBrightness","Returntype":"(bool, *dbus.Error)","Args":"outputName string"},{"Uniquefunname":"func (m *Manager) ChangeBrightness(raised bool) *dbus.Error","Funname":"display.Manager.ChangeBrightness","Returntype":"*dbus.Error","Args":"raised bool"},{"Uniquefunname":"func (m *Manager) DeleteCustomMode(name string) *dbus.Error","Funname":"display.Manager.DeleteCustomMode","Returntype":"*dbus.Error","Args":"name string"},{"Uniquefunname":"func (m *Manager) GetBrightness() (map[string]float64, *dbus.Error)","Funname":"display.Manager.GetBrightness","Returntype":"(map[string]float64, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) GetBuiltinMonitor() (string, dbus.ObjectPath, *dbus.Error)","Funname":"display.Manager.GetBuiltinMonitor","Returntype":"(string, dbus.ObjectPath, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) GetInterfaceName() string","Funname":"display.Manager.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) GetRealDisplayMode() (uint8, *dbus.Error)","Funname":"display.Manager.GetRealDisplayMode","Returntype":"(uint8, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) ListOutputNames() ([]string, *dbus.Error)","Funname":"display.Manager.ListOutputNames","Returntype":"([]string, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) ListOutputsCommonModes() ([]ModeInfo, *dbus.Error)","Funname":"display.Manager.ListOutputsCommonModes","Returntype":"([]ModeInfo, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) ModifyConfigName(name, newName string) *dbus.Error","Funname":"display.Manager.ModifyConfigName","Returntype":"*dbus.Error","Args":"name, newName string"},{"Uniquefunname":"func (m *Manager) RefreshBrightness() *dbus.Error","Funname":"display.Manager.RefreshBrightness","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) Reset() *dbus.Error","Funname":"display.Manager.Reset","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) ResetChanges() *dbus.Error","Funname":"display.Manager.ResetChanges","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) Save() *dbus.Error","Funname":"display.Manager.Save","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) SetAndSaveBrightness(outputName string, value float64) *dbus.Error","Funname":"display.Manager.SetAndSaveBrightness","Returntype":"*dbus.Error","Args":"outputName string, value float64"},{"Uniquefunname":"func (m *Manager) SetBrightness(outputName string, value float64) *dbus.Error","Funname":"display.Manager.SetBrightness","Returntype":"*dbus.Error","Args":"outputName string, value float64"},{"Uniquefunname":"func (m *Manager) SetColorTemperature(value int32) *dbus.Error","Funname":"display.Manager.SetColorTemperature","Returntype":"*dbus.Error","Args":"value int32"},{"Uniquefunname":"func (m *Manager) SetMethodAdjustCCT(adjustMethod int32) *dbus.Error","Funname":"display.Manager.SetMethodAdjustCCT","Returntype":"*dbus.Error","Args":"adjustMethod int32"},{"Uniquefunname":"func (m *Manager) SetPrimary(outputName string) *dbus.Error","Funname":"display.Manager.SetPrimary","Returntype":"*dbus.Error","Args":"outputName string"},{"Uniquefunname":"func (m *Manager) SwitchMode(mode byte, name string) *dbus.Error","Funname":"display.Manager.SwitchMode","Returntype":"*dbus.Error","Args":"mode byte, name string"},{"Uniquefunname":"func (m *Manager) getBuiltinMonitor() *Monitor","Funname":"display.Manager.getBuiltinMonitor","Returntype":"*Monitor","Args":""},{"Uniquefunname":"func controlRedshift(action string)","Funname":"display.controlRedshift","Returntype":"","Args":"action string"},{"Uniquefunname":"func display.generateRedshiftConfFile()error","Funname":"display.generateRedshiftConfFile","Returntype":"error","Args":""},{"Uniquefunname":"func resetColorTemp()","Funname":"display.resetColorTemp","Returntype":"","Args":""},{"Uniquefunname":"func setColorTempOneShot(colorTemp string)","Funname":"display.setColorTempOneShot","Returntype":"","Args":"colorTemp string"},{"Uniquefunname":"func generateRedshiftConfFile()error","Funname":"generateRedshiftConfFile","Returntype":"error","Args":""},{"Uniquefunname":"func (m *Manager) getBuiltinMonitor() *Monitor","Funname":"getBuiltinMonitor","Returntype":"*Monitor","Args":""},{"Uniquefunname":"func resetColorTemp()","Funname":"resetColorTemp","Returntype":"","Args":""},{"Uniquefunname":"func setColorTempOneShot(colorTemp string)","Funname":"setColorTempOneShot","Returntype":"","Args":"colorTemp string"}],"Records":null}
{"Filepath":"display/monitor.go","Functions":[{"Uniquefunname":"func (m *Monitor) Enable(enabled bool) *dbus.Error","Funname":"Enable","Returntype":"*dbus.Error","Args":"enabled bool"},{"Uniquefunname":"func (monitors Monitors) GetByName(name string) *Monitor","Funname":"GetByName","Returntype":"*Monitor","Args":"name string"},{"Uniquefunname":"func (m *Monitor) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Monitor) SetMode(mode uint32) *dbus.Error","Funname":"SetMode","Returntype":"*dbus.Error","Args":"mode uint32"},{"Uniquefunname":"func (m *Monitor) SetModeBySize(width, height uint16) *dbus.Error","Funname":"SetModeBySize","Returntype":"*dbus.Error","Args":"width, height uint16"},{"Uniquefunname":"func (m *Monitor) SetPosition(X, y int16) *dbus.Error","Funname":"SetPosition","Returntype":"*dbus.Error","Args":"X, y int16"},{"Uniquefunname":"func (m *Monitor) SetReflect(value uint16) *dbus.Error","Funname":"SetReflect","Returntype":"*dbus.Error","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) SetRefreshRate(value float64) *dbus.Error","Funname":"SetRefreshRate","Returntype":"*dbus.Error","Args":"value float64"},{"Uniquefunname":"func (m *Monitor) SetRotation(value uint16) *dbus.Error","Funname":"SetRotation","Returntype":"*dbus.Error","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Monitor) applyConfig(cfg crtcConfig) error","Funname":"applyConfig","Returntype":"error","Args":"cfg crtcConfig"},{"Uniquefunname":"func (m *Monitor) Enable(enabled bool) *dbus.Error","Funname":"display.Monitor.Enable","Returntype":"*dbus.Error","Args":"enabled bool"},{"Uniquefunname":"func (m *Monitor) GetInterfaceName() string","Funname":"display.Monitor.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Monitor) SetMode(mode uint32) *dbus.Error","Funname":"display.Monitor.SetMode","Returntype":"*dbus.Error","Args":"mode uint32"},{"Uniquefunname":"func (m *Monitor) SetModeBySize(width, height uint16) *dbus.Error","Funname":"display.Monitor.SetModeBySize","Returntype":"*dbus.Error","Args":"width, height uint16"},{"Uniquefunname":"func (m *Monitor) SetPosition(X, y int16) *dbus.Error","Funname":"display.Monitor.SetPosition","Returntype":"*dbus.Error","Args":"X, y int16"},{"Uniquefunname":"func (m *Monitor) SetReflect(value uint16) *dbus.Error","Funname":"display.Monitor.SetReflect","Returntype":"*dbus.Error","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) SetRefreshRate(value float64) *dbus.Error","Funname":"display.Monitor.SetRefreshRate","Returntype":"*dbus.Error","Args":"value float64"},{"Uniquefunname":"func (m *Monitor) SetRotation(value uint16) *dbus.Error","Funname":"display.Monitor.SetRotation","Returntype":"*dbus.Error","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) String() string","Funname":"display.Monitor.String","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Monitor) applyConfig(cfg crtcConfig) error","Funname":"display.Monitor.applyConfig","Returntype":"error","Args":"cfg crtcConfig"},{"Uniquefunname":"func (m *Monitor) enable(enabled bool)","Funname":"display.Monitor.enable","Returntype":"","Args":"enabled bool"},{"Uniquefunname":"func (m *Monitor) getBestMode(manager *Manager, outputInfo *randr.GetOutputInfoReply) ModeInfo","Funname":"display.Monitor.getBestMode","Returntype":"ModeInfo","Args":"manager *Manager, outputInfo *randr.GetOutputInfoReply"},{"Uniquefunname":"func (m *Monitor) getPath() dbus.ObjectPath","Funname":"display.Monitor.getPath","Returntype":"dbus.ObjectPath","Args":""},{"Uniquefunname":"func (m *Monitor) markChanged()","Funname":"display.Monitor.markChanged","Returntype":"","Args":""},{"Uniquefunname":"func (m *Monitor) resetChanges()","Funname":"display.Monitor.resetChanges","Returntype":"","Args":""},{"Uniquefunname":"func (m *Monitor) selectMode(width, height uint16, rate float64) ModeInfo","Funname":"display.Monitor.selectMode","Returntype":"ModeInfo","Args":"width, height uint16, rate float64"},{"Uniquefunname":"func (m *Monitor) setMode(mode ModeInfo)","Funname":"display.Monitor.setMode","Returntype":"","Args":"mode ModeInfo"},{"Uniquefunname":"func (m *Monitor) setPosition(X, y int16)","Funname":"display.Monitor.setPosition","Returntype":"","Args":"X, y int16"},{"Uniquefunname":"func (m *Monitor) setReflect(value uint16)","Funname":"display.Monitor.setReflect","Returntype":"","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) setRotation(value uint16)","Funname":"display.Monitor.setRotation","Returntype":"","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) toConfig() *MonitorConfig","Funname":"display.Monitor.toConfig","Returntype":"*MonitorConfig","Args":""},{"Uniquefunname":"func (monitors Monitors) GetByName(name string) *Monitor","Funname":"display.Monitors.GetByName","Returntype":"*Monitor","Args":"name string"},{"Uniquefunname":"func getFirstModeBySize(modes []ModeInfo, width, height uint16) ModeInfo","Funname":"display.getFirstModeBySize","Returntype":"ModeInfo","Args":"modes []ModeInfo, width, height uint16"},{"Uniquefunname":"func getFirstModeBySizeRate(modes []ModeInfo, width, height uint16, rate float64) ModeInfo","Funname":"display.getFirstModeBySizeRate","Returntype":"ModeInfo","Args":"modes []ModeInfo, width, height uint16, rate float64"},{"Uniquefunname":"func getRandrStatusStr(status uint8) string","Funname":"display.getRandrStatusStr","Returntype":"string","Args":"status uint8"},{"Uniquefunname":"func toMonitorConfigs(monitors []*Monitor, primary string) []*MonitorConfig","Funname":"display.toMonitorConfigs","Returntype":"[]*MonitorConfig","Args":"monitors []*Monitor, primary string"},{"Uniquefunname":"func (m *Monitor) enable(enabled bool)","Funname":"enable","Returntype":"","Args":"enabled bool"},{"Uniquefunname":"func (m *Monitor) getBestMode(manager *Manager, outputInfo *randr.GetOutputInfoReply) ModeInfo","Funname":"getBestMode","Returntype":"ModeInfo","Args":"manager *Manager, outputInfo *randr.GetOutputInfoReply"},{"Uniquefunname":"func getFirstModeBySize(modes []ModeInfo, width, height uint16) ModeInfo","Funname":"getFirstModeBySize","Returntype":"ModeInfo","Args":"modes []ModeInfo, width, height uint16"},{"Uniquefunname":"func getFirstModeBySizeRate(modes []ModeInfo, width, height uint16, rate float64) ModeInfo","Funname":"getFirstModeBySizeRate","Returntype":"ModeInfo","Args":"modes []ModeInfo, width, height uint16, rate float64"},{"Uniquefunname":"func (m *Monitor) getPath() dbus.ObjectPath","Funname":"getPath","Returntype":"dbus.ObjectPath","Args":""},{"Uniquefunname":"func getRandrStatusStr(status uint8) string","Funname":"getRandrStatusStr","Returntype":"string","Args":"status uint8"},{"Uniquefunname":"func (m *Monitor) markChanged()","Funname":"markChanged","Returntype":"","Args":""},{"Uniquefunname":"func (m *Monitor) resetChanges()","Funname":"resetChanges","Returntype":"","Args":""},{"Uniquefunname":"func (m *Monitor) selectMode(width, height uint16, rate float64) ModeInfo","Funname":"selectMode","Returntype":"ModeInfo","Args":"width, height uint16, rate float64"},{"Uniquefunname":"func (m *Monitor) setMode(mode ModeInfo)","Funname":"setMode","Returntype":"","Args":"mode ModeInfo"},{"Uniquefunname":"func (m *Monitor) setPosition(X, y int16)","Funname":"setPosition","Returntype":"","Args":"X, y int16"},{"Uniquefunname":"func (m *Monitor) setReflect(value uint16)","Funname":"setReflect","Returntype":"","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) setRotation(value uint16)","Funname":"setRotation","Returntype":"","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) toConfig() *MonitorConfig","Funname":"toConfig","Returntype":"*MonitorConfig","Args":""},{"Uniquefunname":"func toMonitorConfigs(monitors []*Monitor, primary string) []*MonitorConfig","Funname":"toMonitorConfigs","Returntype":"[]*MonitorConfig","Args":"monitors []*Monitor, primary string"}],"Records":[{"Name":"struct:display.Monitor","Fields":["display.Monitor.BestMode ModeInfo","display.Monitor.Connected bool","display.Monitor.CurrentMode ModeInfo","display.Monitor.Enabled bool","display.Monitor.Height uint16","display.Monitor.ID uint32","display.Monitor.Manufacturer string","display.Monitor.MmHeight uint32","display.Monitor.MmWidth uint32","display.Monitor.Model string","display.Monitor.Modes []ModeInfo","display.Monitor.Name string","display.Monitor.PreferredModes []ModeInfo","display.Monitor.PropsMu sync.RWMutex","display.Monitor.Reflect uint16","display.Monitor.Reflects []uint16","display.Monitor.RefreshRate float64","display.Monitor.Rotation uint16","display.Monitor.Rotations []uint16","display.Monitor.Width uint16","display.Monitor.X int16","display.Monitor.Y int16","display.Monitor.backup *MonitorBackup","display.Monitor.crtc randr.Crtc","display.Monitor.lastConnectedTime time.Time","display.Monitor.m *Manager","display.Monitor.methods *struct { Enable func() `in:\"enabled\"`; SetMode func() `in:\"mode\"`; SetModeBySize func() `in:\"width,height\"`; SetPosition func() `in:\"x,y\"`; SetReflect func() `in:\"value\"`; SetRotation func() `in:\"value\"`; SetRefreshRate func() `in:\"value\"`; }","display.Monitor.oldRotation uint16","display.Monitor.service *dbusutil.Service","display.Monitor.uuid string"]},{"Name":"struct:display.MonitorBackup","Fields":["display.MonitorBackup.Enabled bool","display.MonitorBackup.Mode ModeInfo","display.MonitorBackup.Reflect uint16","display.MonitorBackup.Rotation uint16","display.MonitorBackup.X int16","display.MonitorBackup.Y int16"]},{"Name":"const:display","Fields":["display.dbusInterfaceMonitor"]}]}
{"Filepath":"display/touchscreen.go","Functions":[{"Uniquefunname":"func (m *Manager) touchScreenSetRotation(direction uint16, output string)","Funname":"display.Manager.touchScreenSetRotation","Returntype":"","Args":"direction uint16, output string"},{"Uniquefunname":"func getDeviceInfos(force bool) common.DeviceInfos","Funname":"display.getDeviceInfos","Returntype":"common.DeviceInfos","Args":"force bool"},{"Uniquefunname":"func getTouchscreenInfos(force bool) dxTouchscreens","Funname":"display.getTouchscreenInfos","Returntype":"dxTouchscreens","Args":"force bool"},{"Uniquefunname":"func handleDeviceChanged()","Funname":"display.handleDeviceChanged","Returntype":"","Args":""},{"Uniquefunname":"func startDeviceListener()","Funname":"display.startDeviceListener","Returntype":"","Args":""},{"Uniquefunname":"func getDeviceInfos(force bool) common.DeviceInfos","Funname":"getDeviceInfos","Returntype":"common.DeviceInfos","Args":"force bool"},{"Uniquefunname":"func getTouchscreenInfos(force bool) dxTouchscreens","Funname":"getTouchscreenInfos","Returntype":"dxTouchscreens","Args":"force bool"},{"Uniquefunname":"func handleDeviceChanged()","Funname":"handleDeviceChanged","Returntype":"","Args":""},{"Uniquefunname":"func startDeviceListener()","Funname":"startDeviceListener","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) touchScreenSetRotation(direction uint16, output string)","Funname":"touchScreenSetRotation","Returntype":"","Args":"direction uint16, output string"}],"Records":[{"Name":"struct:display.Touchscreen","Fields":["display.Touchscreen.DeviceNode string","display.Touchscreen.Id int32","display.Touchscreen.Name string","display.Touchscreen.Serial string"]},{"Name":"var:display","Fields":["display.devInfos","display.gudevClient","display.touchscreenInfos","display.touchscreenInfosMu"]}]}
{"Filepath":"display/util.go","Functions":[{"Uniquefunname":"func calcModeRate(info randr.ModeInfo) float64","Funname":"calcModeRate","Returntype":"float64","Args":"info randr.ModeInfo"},{"Uniquefunname":"func containsRate(src, target string) bool","Funname":"containsRate","Returntype":"bool","Args":"src, target string"},{"Uniquefunname":"func calcModeRate(info randr.ModeInfo) float64","Funname":"display.calcModeRate","Returntype":"float64","Args":"info randr.ModeInfo"},{"Uniquefunname":"func containsRate(src, target string) bool","Funname":"display.containsRate","Returntype":"bool","Args":"src, target string"},{"Uniquefunname":"func doAction(cmd string) error","Funname":"display.doAction","Returntype":"error","Args":"cmd string"},{"Uniquefunname":"func filterModeInfos(modes []ModeInfo) []ModeInfo","Funname":"display.filterModeInfos","Returntype":"[]ModeInfo","Args":"modes []ModeInfo"},{"Uniquefunname":"func filterModeInfosByRefreshRate(modes []ModeInfo) []ModeInfo","Funname":"display.filterModeInfosByRefreshRate","Returntype":"[]ModeInfo","Args":"modes []ModeInfo"},{"Uniquefunname":"func findFirstMode(modes []ModeInfo, fn func(mode ModeInfo) bool) *ModeInfo","Funname":"display.findFirstMode","Returntype":"*ModeInfo","Args":"modes []ModeInfo, fn func(mode ModeInfo) bool"},{"Uniquefunname":"func formatRate(v float64) string","Funname":"display.formatRate","Returntype":"string","Args":"v float64"},{"Uniquefunname":"func getComputeChassis() (string, error)","Funname":"display.getComputeChassis","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func getConfigVersion(filename string) (string, error)","Funname":"display.getConfigVersion","Returntype":"(string, error)","Args":"filename string"},{"Uniquefunname":"func getCrtcRect(crtcInfo *randr.GetCrtcInfoReply) x.Rectangle","Funname":"display.getCrtcRect","Returntype":"x.Rectangle","Args":"crtcInfo *randr.GetCrtcInfoReply"},{"Uniquefunname":"func getFilterRefreshRateMap(pciId string) map[string]string","Funname":"display.getFilterRefreshRateMap","Returntype":"map[string]string","Args":"pciId string"},{"Uniquefunname":"func getGraphicsCardPciId() string","Funname":"display.getGraphicsCardPciId","Returntype":"string","Args":""},{"Uniquefunname":"func getMaxAreaSize(sizes []Size) Size","Funname":"display.getMaxAreaSize","Returntype":"Size","Args":"sizes []Size"},{"Uniquefunname":"func getMinIDMonitor(monitors []*Monitor) *Monitor","Funname":"display.getMinIDMonitor","Returntype":"*Monitor","Args":"monitors []*Monitor"},{"Uniquefunname":"func getMinLastConnectedTimeMonitor(monitors []*Monitor) *Monitor","Funname":"display.getMinLastConnectedTimeMonitor","Returntype":"*Monitor","Args":"monitors []*Monitor"},{"Uniquefunname":"func getMonitorsCommonSizes(monitors []*Monitor) []Size","Funname":"display.getMonitorsCommonSizes","Returntype":"[]Size","Args":"monitors []*Monitor"},{"Uniquefunname":"func getOutputUUID(name string, edid []byte) string","Funname":"display.getOutputUUID","Returntype":"string","Args":"name string, edid []byte"},{"Uniquefunname":"func getReflects(origin uint16) []uint16","Funname":"display.getReflects","Returntype":"[]uint16","Args":"origin uint16"},{"Uniquefunname":"func getRotations(origin uint16) []uint16","Funname":"display.getRotations","Returntype":"[]uint16","Args":"origin uint16"},{"Uniquefunname":"func getSizeModeMap(modes []ModeInfo) map[Size][]uint32","Funname":"display.getSizeModeMap","Returntype":"map[Size][]uint32","Args":"modes []ModeInfo"},{"Uniquefunname":"func isDigit(b byte) bool","Funname":"display.isDigit","Returntype":"bool","Args":"b byte"},{"Uniquefunname":"func jsonMarshal(v interface","Funname":"display.jsonMarshal","Returntype":"string","Args":"v interface{}"},{"Uniquefunname":"func jsonUnmarshal(data string, ret interface","Funname":"display.jsonUnmarshal","Returntype":"error","Args":"data string, ret interface{}"},{"Uniquefunname":"func needSwapWidthHeight(rotation uint16) bool","Funname":"display.needSwapWidthHeight","Returntype":"bool","Args":"rotation uint16"},{"Uniquefunname":"func outputSliceContains(outputs []randr.Output, output randr.Output) bool","Funname":"display.outputSliceContains","Returntype":"bool","Args":"outputs []randr.Output, output randr.Output"},{"Uniquefunname":"func parseCrtcRotation(origin uint16) (rotation, reflect uint16)","Funname":"display.parseCrtcRotation","Returntype":"(rotation, reflect uint16)","Args":"origin uint16"},{"Uniquefunname":"func parseEDID(edid []byte) (string, string)","Funname":"display.parseEDID","Returntype":"(string, string)","Args":"edid []byte"},{"Uniquefunname":"func sortMonitorsByID(monitors []*Monitor)","Funname":"display.sortMonitorsByID","Returntype":"","Args":"monitors []*Monitor"},{"Uniquefunname":"func toModeInfo(info randr.ModeInfo) ModeInfo","Funname":"display.toModeInfo","Returntype":"ModeInfo","Args":"info randr.ModeInfo"},{"Uniquefunname":"func doAction(cmd string) error","Funname":"doAction","Returntype":"error","Args":"cmd string"},{"Uniquefunname":"func filterModeInfos(modes []ModeInfo) []ModeInfo","Funname":"filterModeInfos","Returntype":"[]ModeInfo","Args":"modes []ModeInfo"},{"Uniquefunname":"func filterModeInfosByRefreshRate(modes []ModeInfo) []ModeInfo","Funname":"filterModeInfosByRefreshRate","Returntype":"[]ModeInfo","Args":"modes []ModeInfo"},{"Uniquefunname":"func findFirstMode(modes []ModeInfo, fn func(mode ModeInfo) bool) *ModeInfo","Funname":"findFirstMode","Returntype":"*ModeInfo","Args":"modes []ModeInfo, fn func(mode ModeInfo) bool"},{"Uniquefunname":"func formatRate(v float64) string","Funname":"formatRate","Returntype":"string","Args":"v float64"},{"Uniquefunname":"func getComputeChassis() (string, error)","Funname":"getComputeChassis","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func getConfigVersion(filename string) (string, error)","Funname":"getConfigVersion","Returntype":"(string, error)","Args":"filename string"},{"Uniquefunname":"func getCrtcRect(crtcInfo *randr.GetCrtcInfoReply) x.Rectangle","Funname":"getCrtcRect","Returntype":"x.Rectangle","Args":"crtcInfo *randr.GetCrtcInfoReply"},{"Uniquefunname":"func getFilterRefreshRateMap(pciId string) map[string]string","Funname":"getFilterRefreshRateMap","Returntype":"map[string]string","Args":"pciId string"},{"Uniquefunname":"func getGraphicsCardPciId() string","Funname":"getGraphicsCardPciId","Returntype":"string","Args":""},{"Uniquefunname":"func getMaxAreaSize(sizes []Size) Size","Funname":"getMaxAreaSize","Returntype":"Size","Args":"sizes []Size"},{"Uniquefunname":"func getMinIDMonitor(monitors []*Monitor) *Monitor","Funname":"getMinIDMonitor","Returntype":"*Monitor","Args":"monitors []*Monitor"},{"Uniquefunname":"func getMinLastConnectedTimeMonitor(monitors []*Monitor) *Monitor","Funname":"getMinLastConnectedTimeMonitor","Returntype":"*Monitor","Args":"monitors []*Monitor"},{"Uniquefunname":"func getMonitorsCommonSizes(monitors []*Monitor) []Size","Funname":"getMonitorsCommonSizes","Returntype":"[]Size","Args":"monitors []*Monitor"},{"Uniquefunname":"func getOutputUUID(name string, edid []byte) string","Funname":"getOutputUUID","Returntype":"string","Args":"name string, edid []byte"},{"Uniquefunname":"func getReflects(origin uint16) []uint16","Funname":"getReflects","Returntype":"[]uint16","Args":"origin uint16"},{"Uniquefunname":"func getRotations(origin uint16) []uint16","Funname":"getRotations","Returntype":"[]uint16","Args":"origin uint16"},{"Uniquefunname":"func getSizeModeMap(modes []ModeInfo) map[Size][]uint32","Funname":"getSizeModeMap","Returntype":"map[Size][]uint32","Args":"modes []ModeInfo"},{"Uniquefunname":"func isDigit(b byte) bool","Funname":"isDigit","Returntype":"bool","Args":"b byte"},{"Uniquefunname":"func jsonMarshal(v interface","Funname":"jsonMarshal","Returntype":"string","Args":"v interface{}"},{"Uniquefunname":"func jsonUnmarshal(data string, ret interface","Funname":"jsonUnmarshal","Returntype":"error","Args":"data string, ret interface{}"},{"Uniquefunname":"func needSwapWidthHeight(rotation uint16) bool","Funname":"needSwapWidthHeight","Returntype":"bool","Args":"rotation uint16"},{"Uniquefunname":"func outputSliceContains(outputs []randr.Output, output randr.Output) bool","Funname":"outputSliceContains","Returntype":"bool","Args":"outputs []randr.Output, output randr.Output"},{"Uniquefunname":"func parseCrtcRotation(origin uint16) (rotation, reflect uint16)","Funname":"parseCrtcRotation","Returntype":"(rotation, reflect uint16)","Args":"origin uint16"},{"Uniquefunname":"func parseEDID(edid []byte) (string, string)","Funname":"parseEDID","Returntype":"(string, string)","Args":"edid []byte"},{"Uniquefunname":"func sortMonitorsByID(monitors []*Monitor)","Funname":"sortMonitorsByID","Returntype":"","Args":"monitors []*Monitor"},{"Uniquefunname":"func toModeInfo(info randr.ModeInfo) ModeInfo","Funname":"toModeInfo","Returntype":"ModeInfo","Args":"info randr.ModeInfo"}],"Records":[{"Name":"struct:display.Size","Fields":["display.Size.height uint16","display.Size.width uint16"]},{"Name":"const:display","Fields":["display.filterFilePath"]},{"Name":"var:display","Fields":["display.regMode"]}]}
{"Filepath":"display/brightness/brightness.go","Functions":[{"Uniquefunname":"func GetBacklightController(outputId uint32, conn *x.Conn) (*displayBl.Controller, error)","Funname":"GetBacklightController","Returntype":"(*displayBl.Controller, error)","Args":"outputId uint32, conn *x.Conn"},{"Uniquefunname":"func GetMaxBacklightBrightness() int","Funname":"GetMaxBacklightBrightness","Returntype":"int","Args":""},{"Uniquefunname":"func InitBacklightHelper()","Funname":"InitBacklightHelper","Returntype":"","Args":""},{"Uniquefunname":"func Set(value float64, setter string, isBuiltin bool, outputId uint32, conn *x.Conn) error","Funname":"Set","Returntype":"error","Args":"value float64, setter string, isBuiltin bool, outputId uint32, conn *x.Conn"},{"Uniquefunname":"func _setBacklight(value float64, controller *displayBl.Controller) error","Funname":"_setBacklight","Returntype":"error","Args":"value float64, controller *displayBl.Controller"},{"Uniquefunname":"func GetBacklightController(outputId uint32, conn *x.Conn) (*displayBl.Controller, error)","Funname":"brightness.GetBacklightController","Returntype":"(*displayBl.Controller, error)","Args":"outputId uint32, conn *x.Conn"},{"Uniquefunname":"func GetMaxBacklightBrightness() int","Funname":"brightness.GetMaxBacklightBrightness","Returntype":"int","Args":""},{"Uniquefunname":"func InitBacklightHelper()","Funname":"brightness.InitBacklightHelper","Returntype":"","Args":""},{"Uniquefunname":"func Set(value float64, setter string, isBuiltin bool, outputId uint32, conn *x.Conn) error","Funname":"brightness.Set","Returntype":"error","Args":"value float64, setter string, isBuiltin bool, outputId uint32, conn *x.Conn"},{"Uniquefunname":"func _setBacklight(value float64, controller *displayBl.Controller) error","Funname":"brightness._setBacklight","Returntype":"error","Args":"value float64, controller *displayBl.Controller"},{"Uniquefunname":"func genGammaRamp(size uint16, brightness float64) (red, green, blue []uint16)","Funname":"brightness.genGammaRamp","Returntype":"(red, green, blue []uint16)","Args":"size uint16, brightness float64"},{"Uniquefunname":"func init()","Funname":"brightness.init","Returntype":"","Args":""},{"Uniquefunname":"func setBacklight(value float64, output randr.Output, conn *x.Conn) error","Funname":"brightness.setBacklight","Returntype":"error","Args":"value float64, output randr.Output, conn *x.Conn"},{"Uniquefunname":"func setOutputCrtcGamma(value float64, output randr.Output, conn *x.Conn) error","Funname":"brightness.setOutputCrtcGamma","Returntype":"error","Args":"value float64, output randr.Output, conn *x.Conn"},{"Uniquefunname":"func supportBacklight(output randr.Output, conn *x.Conn) bool","Funname":"brightness.supportBacklight","Returntype":"bool","Args":"output randr.Output, conn *x.Conn"},{"Uniquefunname":"func genGammaRamp(size uint16, brightness float64) (red, green, blue []uint16)","Funname":"genGammaRamp","Returntype":"(red, green, blue []uint16)","Args":"size uint16, brightness float64"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func setBacklight(value float64, output randr.Output, conn *x.Conn) error","Funname":"setBacklight","Returntype":"error","Args":"value float64, output randr.Output, conn *x.Conn"},{"Uniquefunname":"func setOutputCrtcGamma(value float64, output randr.Output, conn *x.Conn) error","Funname":"setOutputCrtcGamma","Returntype":"error","Args":"value float64, output randr.Output, conn *x.Conn"},{"Uniquefunname":"func supportBacklight(output randr.Output, conn *x.Conn) bool","Funname":"supportBacklight","Returntype":"bool","Args":"output randr.Output, conn *x.Conn"}],"Records":[{"Name":"const:brightness","Fields":["brightness.SetterAuto","brightness.SetterBacklight","brightness.SetterGamma"]},{"Name":"var:brightness","Fields":["brightness.controllers","brightness.helper","brightness.logger"]}]}
{"Filepath":"display/utils/utils.go","Functions":[{"Uniquefunname":"func GetEDIDChecksum(edid []byte) string","Funname":"GetEDIDChecksum","Returntype":"string","Args":"edid []byte"},{"Uniquefunname":"func GetOutputEDID(conn *x.Conn, output randr.Output) ([]byte, error)","Funname":"GetOutputEDID","Returntype":"([]byte, error)","Args":"conn *x.Conn, output randr.Output"},{"Uniquefunname":"func GetEDIDChecksum(edid []byte) string","Funname":"utils.GetEDIDChecksum","Returntype":"string","Args":"edid []byte"},{"Uniquefunname":"func GetOutputEDID(conn *x.Conn, output randr.Output) ([]byte, error)","Funname":"utils.GetOutputEDID","Returntype":"([]byte, error)","Args":"conn *x.Conn, output randr.Output"}],"Records":null}
{"Filepath":"iowait/iowait.go","Functions":[{"Uniquefunname":"func Start(logger *log.Logger)","Funname":"Start","Returntype":"","Args":"logger *log.Logger"},{"Uniquefunname":"func canShowWatch(user, sys, wait float64) bool","Funname":"canShowWatch","Returntype":"bool","Args":"user, sys, wait float64"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func Start(logger *log.Logger)","Funname":"iowait.Start","Returntype":"","Args":"logger *log.Logger"},{"Uniquefunname":"func canShowWatch(user, sys, wait float64) bool","Funname":"iowait.canShowWatch","Returntype":"bool","Args":"user, sys, wait float64"},{"Uniquefunname":"func init()","Funname":"iowait.init","Returntype":"","Args":""},{"Uniquefunname":"func showIOWait()","Funname":"iowait.showIOWait","Returntype":"","Args":""},{"Uniquefunname":"func stof(v string) float64","Funname":"iowait.stof","Returntype":"float64","Args":"v string"},{"Uniquefunname":"func xcLeftPtrToWatch(enabled bool)","Funname":"iowait.xcLeftPtrToWatch","Returntype":"","Args":"enabled bool"},{"Uniquefunname":"func showIOWait()","Funname":"showIOWait","Returntype":"","Args":""},{"Uniquefunname":"func stof(v string) float64","Funname":"stof","Returntype":"float64","Args":"v string"},{"Uniquefunname":"func xcLeftPtrToWatch(enabled bool)","Funname":"xcLeftPtrToWatch","Returntype":"","Args":"enabled bool"}],"Records":[{"Name":"struct:iowait.CPUStat","Fields":["iowait.CPUStat.Count float64","iowait.CPUStat.IOWait float64","iowait.CPUStat.Idle float64","iowait.CPUStat.System float64","iowait.CPUStat.User float64"]},{"Name":"var:iowait","Fields":["iowait._logger","iowait._max","iowait.cpuState","iowait.isWatch"]},{"Name":"const:iowait","Fields":["iowait.ddeMaxIOWait"]}]}
{"Filepath":"keyring/keyring.go","Functions":[{"Uniquefunname":"func CheckLogin() error","Funname":"CheckLogin","Returntype":"error","Args":""},{"Uniquefunname":"func CheckLogin() error","Funname":"keyring.CheckLogin","Returntype":"error","Args":""}],"Records":null}
{"Filepath":"memanalyzer/cgroup.go","Functions":[{"Uniquefunname":"func getCGroupDDEPath() (string, error)","Funname":"getCGroupDDEPath","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func getPidsInCGroup(cgroupName string) ([]uint16, error)","Funname":"getPidsInCGroup","Returntype":"([]uint16, error)","Args":"cgroupName string"},{"Uniquefunname":"func getProcessList(pid uint16) ([]uint16, error)","Funname":"getProcessList","Returntype":"([]uint16, error)","Args":"pid uint16"},{"Uniquefunname":"func getSessionID() (string, error)","Funname":"getSessionID","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func isPidFound(pid uint16, filename string) (bool, []uint16)","Funname":"isPidFound","Returntype":"(bool, []uint16)","Args":"pid uint16, filename string"},{"Uniquefunname":"func getCGroupDDEPath() (string, error)","Funname":"memanalyzer.getCGroupDDEPath","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func getPidsInCGroup(cgroupName string) ([]uint16, error)","Funname":"memanalyzer.getPidsInCGroup","Returntype":"([]uint16, error)","Args":"cgroupName string"},{"Uniquefunname":"func getProcessList(pid uint16) ([]uint16, error)","Funname":"memanalyzer.getProcessList","Returntype":"([]uint16, error)","Args":"pid uint16"},{"Uniquefunname":"func getSessionID() (string, error)","Funname":"memanalyzer.getSessionID","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func isPidFound(pid uint16, filename string) (bool, []uint16)","Funname":"memanalyzer.isPidFound","Returntype":"(bool, []uint16)","Args":"pid uint16, filename string"},{"Uniquefunname":"func strvToUint16(list []string) []uint16","Funname":"memanalyzer.strvToUint16","Returntype":"[]uint16","Args":"list []string"},{"Uniquefunname":"func strvToUint16(list []string) []uint16","Funname":"strvToUint16","Returntype":"[]uint16","Args":"list []string"}],"Records":[{"Name":"var:memanalyzer","Fields":["memanalyzer._sessionID"]},{"Name":"const:memanalyzer","Fields":["memanalyzer.login1Dest","memanalyzer.login1SelfPath","memanalyzer.login1SessionIFC"]}]}
{"Filepath":"memanalyzer/config.go","Functions":[{"Uniquefunname":"func DumpDB() string","Funname":"DumpDB","Returntype":"string","Args":""},{"Uniquefunname":"func doSaveDB(filename string) error","Funname":"doSaveDB","Returntype":"error","Args":"filename string"},{"Uniquefunname":"func getConfigPath() string","Funname":"getConfigPath","Returntype":"string","Args":""},{"Uniquefunname":"func getDB(k string) uint64","Funname":"getDB","Returntype":"uint64","Args":"k string"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func loadConfig(filename string) (map[string]uint64, error)","Funname":"loadConfig","Returntype":"(map[string]uint64, error)","Args":"filename string"},{"Uniquefunname":"func DumpDB() string","Funname":"memanalyzer.DumpDB","Returntype":"string","Args":""},{"Uniquefunname":"func doSaveDB(filename string) error","Funname":"memanalyzer.doSaveDB","Returntype":"error","Args":"filename string"},{"Uniquefunname":"func getConfigPath() string","Funname":"memanalyzer.getConfigPath","Returntype":"string","Args":""},{"Uniquefunname":"func getDB(k string) uint64","Funname":"memanalyzer.getDB","Returntype":"uint64","Args":"k string"},{"Uniquefunname":"func init()","Funname":"memanalyzer.init","Returntype":"","Args":""},{"Uniquefunname":"func loadConfig(filename string) (map[string]uint64, error)","Funname":"memanalyzer.loadConfig","Returntype":"(map[string]uint64, error)","Args":"filename string"},{"Uniquefunname":"func setDB(k string, v uint64)","Funname":"memanalyzer.setDB","Returntype":"","Args":"k string, v uint64"},{"Uniquefunname":"func setDB(k string, v uint64)","Funname":"setDB","Returntype":"","Args":"k string, v uint64"}],"Records":[{"Name":"var:memanalyzer","Fields":["memanalyzer._memDB","memanalyzer._memLocker"]}]}
{"Filepath":"memanalyzer/memory.go","Functions":[{"Uniquefunname":"func GetCGroupMemory(cgroupName string) (uint64, error)","Funname":"GetCGroupMemory","Returntype":"(uint64, error)","Args":"cgroupName string"},{"Uniquefunname":"func GetPidMemory(pid uint16) (uint64, error)","Funname":"GetPidMemory","Returntype":"(uint64, error)","Args":"pid uint16"},{"Uniquefunname":"func GetProcessMemory(name string) (uint64, error)","Funname":"GetProcessMemory","Returntype":"(uint64, error)","Args":"name string"},{"Uniquefunname":"func SaveProcessMemory(name string, mem uint64) error","Funname":"SaveProcessMemory","Returntype":"error","Args":"name string, mem uint64"},{"Uniquefunname":"func getInteger(line string) (uint64, error)","Funname":"getInteger","Returntype":"(uint64, error)","Args":"line string"},{"Uniquefunname":"func GetCGroupMemory(cgroupName string) (uint64, error)","Funname":"memanalyzer.GetCGroupMemory","Returntype":"(uint64, error)","Args":"cgroupName string"},{"Uniquefunname":"func GetPidMemory(pid uint16) (uint64, error)","Funname":"memanalyzer.GetPidMemory","Returntype":"(uint64, error)","Args":"pid uint16"},{"Uniquefunname":"func GetProcessMemory(name string) (uint64, error)","Funname":"memanalyzer.GetProcessMemory","Returntype":"(uint64, error)","Args":"name string"},{"Uniquefunname":"func SaveProcessMemory(name string, mem uint64) error","Funname":"memanalyzer.SaveProcessMemory","Returntype":"error","Args":"name string, mem uint64"},{"Uniquefunname":"func getInteger(line string) (uint64, error)","Funname":"memanalyzer.getInteger","Returntype":"(uint64, error)","Args":"line string"},{"Uniquefunname":"func sumMemByFile(filename string) (uint64, error)","Funname":"memanalyzer.sumMemByFile","Returntype":"(uint64, error)","Args":"filename string"},{"Uniquefunname":"func sumMemByPid(pid uint16) (uint64, error)","Funname":"memanalyzer.sumMemByPid","Returntype":"(uint64, error)","Args":"pid uint16"},{"Uniquefunname":"func sumPidsMemory(pids []uint16) uint64","Funname":"memanalyzer.sumPidsMemory","Returntype":"uint64","Args":"pids []uint16"},{"Uniquefunname":"func sumMemByFile(filename string) (uint64, error)","Funname":"sumMemByFile","Returntype":"(uint64, error)","Args":"filename string"},{"Uniquefunname":"func sumMemByPid(pid uint16) (uint64, error)","Funname":"sumMemByPid","Returntype":"(uint64, error)","Args":"pid uint16"},{"Uniquefunname":"func sumPidsMemory(pids []uint16) uint64","Funname":"sumPidsMemory","Returntype":"uint64","Args":"pids []uint16"}],"Records":null}
{"Filepath":"memchecker/config.go","Functions":[{"Uniquefunname":"func getConfigPath() string","Funname":"getConfigPath","Returntype":"string","Args":""},{"Uniquefunname":"func loadConfig(filename string) (*configInfo, error)","Funname":"loadConfig","Returntype":"(*configInfo, error)","Args":"filename string"},{"Uniquefunname":"func getConfigPath() string","Funname":"memchecker.getConfigPath","Returntype":"string","Args":""},{"Uniquefunname":"func loadConfig(filename string) (*configInfo, error)","Funname":"memchecker.loadConfig","Returntype":"(*configInfo, error)","Args":"filename string"}],"Records":[{"Name":"struct:memchecker.configInfo","Fields":["memchecker.configInfo.MaxSwapUsed uint64","memchecker.configInfo.MinMemAvail uint64"]},{"Name":"const:memchecker","Fields":["memchecker.defaultMaxSwapUsed","memchecker.defaultMinMemAvail","memchecker.sysConfigFile"]}]}
{"Filepath":"memchecker/memchecker.go","Functions":[{"Uniquefunname":"func GetConfig() *configInfo","Funname":"GetConfig","Returntype":"*configInfo","Args":""},{"Uniquefunname":"func IsSufficient() bool","Funname":"IsSufficient","Returntype":"bool","Args":""},{"Uniquefunname":"func correctConfig()","Funname":"correctConfig","Returntype":"","Args":""},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func GetConfig() *configInfo","Funname":"memchecker.GetConfig","Returntype":"*configInfo","Args":""},{"Uniquefunname":"func IsSufficient() bool","Funname":"memchecker.IsSufficient","Returntype":"bool","Args":""},{"Uniquefunname":"func correctConfig()","Funname":"memchecker.correctConfig","Returntype":"","Args":""},{"Uniquefunname":"func init()","Funname":"memchecker.init","Returntype":"","Args":""}],"Records":[{"Name":"var:memchecker","Fields":["memchecker._config"]}]}
{"Filepath":"memchecker/memory.go","Functions":[{"Uniquefunname":"func GetMemInfo() (*MemoryInfo, error)","Funname":"GetMemInfo","Returntype":"(*MemoryInfo, error)","Args":""},{"Uniquefunname":"func doGetMemInfo(filename string) (*MemoryInfo, error)","Funname":"doGetMemInfo","Returntype":"(*MemoryInfo, error)","Args":"filename string"},{"Uniquefunname":"func GetMemInfo() (*MemoryInfo, error)","Funname":"memchecker.GetMemInfo","Returntype":"(*MemoryInfo, error)","Args":""},{"Uniquefunname":"func doGetMemInfo(filename string) (*MemoryInfo, error)","Funname":"memchecker.doGetMemInfo","Returntype":"(*MemoryInfo, error)","Args":"filename string"},{"Uniquefunname":"func parseMemLine(line string) []string","Funname":"memchecker.parseMemLine","Returntype":"[]string","Args":"line string"},{"Uniquefunname":"func stou(s string) uint64","Funname":"memchecker.stou","Returntype":"uint64","Args":"s string"},{"Uniquefunname":"func parseMemLine(line string) []string","Funname":"parseMemLine","Returntype":"[]string","Args":"line string"},{"Uniquefunname":"func stou(s string) uint64","Funname":"stou","Returntype":"uint64","Args":"s string"}],"Records":[{"Name":"struct:memchecker.MemoryInfo","Fields":["memchecker.MemoryInfo.Buffers uint64","memchecker.MemoryInfo.Cached uint64","memchecker.MemoryInfo.MaxSwapUsed uint64","memchecker.MemoryInfo.MemAvailable uint64","memchecker.MemoryInfo.MemFree uint64","memchecker.MemoryInfo.MemTotal uint64","memchecker.MemoryInfo.MinAvailable uint64","memchecker.MemoryInfo.SwapCached uint64","memchecker.MemoryInfo.SwapFree uint64","memchecker.MemoryInfo.SwapTotal uint64"]}]}
{"Filepath":"swapsched/cg-tool.go","Functions":[{"Uniquefunname":"func ParseMemoryStatKB(filePath string, keys ...string) map[string]uint64","Funname":"ParseMemoryStatKB","Returntype":"map[string]uint64","Args":"filePath string, keys ...string"},{"Uniquefunname":"func cancelSoftLimit(memCtl *cgroup.Controller) error","Funname":"cancelSoftLimit","Returntype":"error","Args":"memCtl *cgroup.Controller"},{"Uniquefunname":"func getHomeDirBlockDevice() (string, error)","Funname":"getHomeDirBlockDevice","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func getProcMemoryInfo() (memInfo ProcMemoryInfo)","Funname":"getProcMemoryInfo","Returntype":"(memInfo ProcMemoryInfo)","Args":""},{"Uniquefunname":"func getProcessesSwap(pids ...int) uint64","Funname":"getProcessesSwap","Returntype":"uint64","Args":"pids ...int"},{"Uniquefunname":"func getRSSUsed(memCtl *cgroup.Controller) uint64","Funname":"getRSSUsed","Returntype":"uint64","Args":"memCtl *cgroup.Controller"},{"Uniquefunname":"func major(dev uint64) uint32","Funname":"major","Returntype":"uint32","Args":"dev uint64"},{"Uniquefunname":"func max(a, b uint64) uint64","Funname":"max","Returntype":"uint64","Args":"a, b uint64"},{"Uniquefunname":"func min(a, b uint64) uint64","Funname":"min","Returntype":"uint64","Args":"a, b uint64"},{"Uniquefunname":"func minor(dev uint64) uint32","Funname":"minor","Returntype":"uint32","Args":"dev uint64"},{"Uniquefunname":"func setHardLimit(memCtl *cgroup.Controller, v uint64) error","Funname":"setHardLimit","Returntype":"error","Args":"memCtl *cgroup.Controller, v uint64"},{"Uniquefunname":"func setReadBPS(blkioCtl *cgroup.Controller, device string, v uint64) error","Funname":"setReadBPS","Returntype":"error","Args":"blkioCtl *cgroup.Controller, device string, v uint64"},{"Uniquefunname":"func setSoftLimit(memCtl *cgroup.Controller, v uint64) error","Funname":"setSoftLimit","Returntype":"error","Args":"memCtl *cgroup.Controller, v uint64"},{"Uniquefunname":"func setWriteBPS(blkioCtl *cgroup.Controller, device string, v uint64) error","Funname":"setWriteBPS","Returntype":"error","Args":"blkioCtl *cgroup.Controller, device string, v uint64"},{"Uniquefunname":"func ParseMemoryStatKB(filePath string, keys ...string) map[string]uint64","Funname":"swapsched.ParseMemoryStatKB","Returntype":"map[string]uint64","Args":"filePath string, keys ...string"},{"Uniquefunname":"func cancelSoftLimit(memCtl *cgroup.Controller) error","Funname":"swapsched.cancelSoftLimit","Returntype":"error","Args":"memCtl *cgroup.Controller"},{"Uniquefunname":"func getHomeDirBlockDevice() (string, error)","Funname":"swapsched.getHomeDirBlockDevice","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func getProcMemoryInfo() (memInfo ProcMemoryInfo)","Funname":"swapsched.getProcMemoryInfo","Returntype":"(memInfo ProcMemoryInfo)","Args":""},{"Uniquefunname":"func getProcessesSwap(pids ...int) uint64","Funname":"swapsched.getProcessesSwap","Returntype":"uint64","Args":"pids ...int"},{"Uniquefunname":"func getRSSUsed(memCtl *cgroup.Controller) uint64","Funname":"swapsched.getRSSUsed","Returntype":"uint64","Args":"memCtl *cgroup.Controller"},{"Uniquefunname":"func major(dev uint64) uint32","Funname":"swapsched.major","Returntype":"uint32","Args":"dev uint64"},{"Uniquefunname":"func max(a, b uint64) uint64","Funname":"swapsched.max","Returntype":"uint64","Args":"a, b uint64"},{"Uniquefunname":"func min(a, b uint64) uint64","Funname":"swapsched.min","Returntype":"uint64","Args":"a, b uint64"},{"Uniquefunname":"func minor(dev uint64) uint32","Funname":"swapsched.minor","Returntype":"uint32","Args":"dev uint64"},{"Uniquefunname":"func setHardLimit(memCtl *cgroup.Controller, v uint64) error","Funname":"swapsched.setHardLimit","Returntype":"error","Args":"memCtl *cgroup.Controller, v uint64"},{"Uniquefunname":"func setReadBPS(blkioCtl *cgroup.Controller, device string, v uint64) error","Funname":"swapsched.setReadBPS","Returntype":"error","Args":"blkioCtl *cgroup.Controller, device string, v uint64"},{"Uniquefunname":"func setSoftLimit(memCtl *cgroup.Controller, v uint64) error","Funname":"swapsched.setSoftLimit","Returntype":"error","Args":"memCtl *cgroup.Controller, v uint64"},{"Uniquefunname":"func setWriteBPS(blkioCtl *cgroup.Controller, device string, v uint64) error","Funname":"swapsched.setWriteBPS","Returntype":"error","Args":"blkioCtl *cgroup.Controller, device string, v uint64"},{"Uniquefunname":"func toLines(v []byte, hasErr error) []string","Funname":"swapsched.toLines","Returntype":"[]string","Args":"v []byte, hasErr error"},{"Uniquefunname":"func toLines(v []byte, hasErr error) []string","Funname":"toLines","Returntype":"[]string","Args":"v []byte, hasErr error"}],"Records":[{"Name":"const:swapsched","Fields":["swapsched.GB","swapsched.KB","swapsched.MB","swapsched.SystemCGroupRoot"]},{"Name":"struct:swapsched.ProcMemoryInfo","Fields":["swapsched.ProcMemoryInfo.MemAvailable uint64","swapsched.ProcMemoryInfo.MemTotal uint64","swapsched.ProcMemoryInfo.SwapFree uint64","swapsched.ProcMemoryInfo.SwapTotal uint64"]}]}
{"Filepath":"swapsched/dispatch.go","Functions":[{"Uniquefunname":"func (info MemInfo) ActiveAppLimit() uint64","Funname":"ActiveAppLimit","Returntype":"uint64","Args":""},{"Uniquefunname":"func (d *Dispatcher) AddApp(app *UIApp)","Funname":"AddApp","Returntype":"","Args":"app *UIApp"},{"Uniquefunname":"func (d *Dispatcher) Balance()","Funname":"Balance","Returntype":"","Args":""},{"Uniquefunname":"func (d *Dispatcher) GetAppsSeqDescMap() map[uint32]string","Funname":"GetAppsSeqDescMap","Returntype":"map[uint32]string","Args":""},{"Uniquefunname":"func (d *Dispatcher) GetDECGroup() string","Funname":"GetDECGroup","Returntype":"string","Args":""},{"Uniquefunname":"func (info MemInfo) InactiveAppLimit(desiredRSS uint64) uint64","Funname":"InactiveAppLimit","Returntype":"uint64","Args":"desiredRSS uint64"},{"Uniquefunname":"func (d *Dispatcher) NewApp(desc string, limit *AppResourcesLimit) (*UIApp, error)","Funname":"NewApp","Returntype":"(*UIApp, error)","Args":"desc string, limit *AppResourcesLimit"},{"Uniquefunname":"func NewDispatcher(cfg Config) (*Dispatcher, error)","Funname":"NewDispatcher","Returntype":"(*Dispatcher, error)","Args":"cfg Config"},{"Uniquefunname":"func SetLogger(l *log.Logger)","Funname":"SetLogger","Returntype":"","Args":"l *log.Logger"},{"Uniquefunname":"func (info MemInfo) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (info MemInfo) TailorLimit(v uint64) uint64","Funname":"TailorLimit","Returntype":"uint64","Args":"v uint64"},{"Uniquefunname":"func (info MemInfo) UIAppsTotalLimit() uint64","Funname":"UIAppsTotalLimit","Returntype":"uint64","Args":""},{"Uniquefunname":"func (d *Dispatcher) balance()","Funname":"balance","Returntype":"","Args":""},{"Uniquefunname":"func (d *Dispatcher) cancelLimit()","Funname":"cancelLimit","Returntype":"","Args":""},{"Uniquefunname":"func (d *Dispatcher) counter() uint32","Funname":"counter","Returntype":"uint32","Args":""},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func (d *Dispatcher) sample() (MemInfo, bool)","Funname":"sample","Returntype":"(MemInfo, bool)","Args":""},{"Uniquefunname":"func (d *Dispatcher) setActiveApp(activeApp *UIApp)","Funname":"setActiveApp","Returntype":"","Args":"activeApp *UIApp"},{"Uniquefunname":"func (d *Dispatcher) shouldApplyLimit(memInfo ProcMemoryInfo) bool","Funname":"shouldApplyLimit","Returntype":"bool","Args":"memInfo ProcMemoryInfo"},{"Uniquefunname":"func (d *Dispatcher) AddApp(app *UIApp)","Funname":"swapsched.Dispatcher.AddApp","Returntype":"","Args":"app *UIApp"},{"Uniquefunname":"func (d *Dispatcher) Balance()","Funname":"swapsched.Dispatcher.Balance","Returntype":"","Args":""},{"Uniquefunname":"func (d *Dispatcher) GetAppsSeqDescMap() map[uint32]string","Funname":"swapsched.Dispatcher.GetAppsSeqDescMap","Returntype":"map[uint32]string","Args":""},{"Uniquefunname":"func (d *Dispatcher) GetDECGroup() string","Funname":"swapsched.Dispatcher.GetDECGroup","Returntype":"string","Args":""},{"Uniquefunname":"func (d *Dispatcher) NewApp(desc string, limit *AppResourcesLimit) (*UIApp, error)","Funname":"swapsched.Dispatcher.NewApp","Returntype":"(*UIApp, error)","Args":"desc string, limit *AppResourcesLimit"},{"Uniquefunname":"func (d *Dispatcher) balance()","Funname":"swapsched.Dispatcher.balance","Returntype":"","Args":""},{"Uniquefunname":"func (d *Dispatcher) cancelLimit()","Funname":"swapsched.Dispatcher.cancelLimit","Returntype":"","Args":""},{"Uniquefunname":"func (d *Dispatcher) counter() uint32","Funname":"swapsched.Dispatcher.counter","Returntype":"uint32","Args":""},{"Uniquefunname":"func (d *Dispatcher) sample() (MemInfo, bool)","Funname":"swapsched.Dispatcher.sample","Returntype":"(MemInfo, bool)","Args":""},{"Uniquefunname":"func (d *Dispatcher) setActiveApp(activeApp *UIApp)","Funname":"swapsched.Dispatcher.setActiveApp","Returntype":"","Args":"activeApp *UIApp"},{"Uniquefunname":"func (d *Dispatcher) shouldApplyLimit(memInfo ProcMemoryInfo) bool","Funname":"swapsched.Dispatcher.shouldApplyLimit","Returntype":"bool","Args":"memInfo ProcMemoryInfo"},{"Uniquefunname":"func (d *Dispatcher) testCgroups() bool","Funname":"swapsched.Dispatcher.testCgroups","Returntype":"bool","Args":""},{"Uniquefunname":"func (info MemInfo) ActiveAppLimit() uint64","Funname":"swapsched.MemInfo.ActiveAppLimit","Returntype":"uint64","Args":""},{"Uniquefunname":"func (info MemInfo) InactiveAppLimit(desiredRSS uint64) uint64","Funname":"swapsched.MemInfo.InactiveAppLimit","Returntype":"uint64","Args":"desiredRSS uint64"},{"Uniquefunname":"func (info MemInfo) String() string","Funname":"swapsched.MemInfo.String","Returntype":"string","Args":""},{"Uniquefunname":"func (info MemInfo) TailorLimit(v uint64) uint64","Funname":"swapsched.MemInfo.TailorLimit","Returntype":"uint64","Args":"v uint64"},{"Uniquefunname":"func (info MemInfo) UIAppsTotalLimit() uint64","Funname":"swapsched.MemInfo.UIAppsTotalLimit","Returntype":"uint64","Args":""},{"Uniquefunname":"func NewDispatcher(cfg Config) (*Dispatcher, error)","Funname":"swapsched.NewDispatcher","Returntype":"(*Dispatcher, error)","Args":"cfg Config"},{"Uniquefunname":"func SetLogger(l *log.Logger)","Funname":"swapsched.SetLogger","Returntype":"","Args":"l *log.Logger"},{"Uniquefunname":"func init()","Funname":"swapsched.init","Returntype":"","Args":""},{"Uniquefunname":"func (d *Dispatcher) testCgroups() bool","Funname":"testCgroups","Returntype":"bool","Args":""}],"Records":[{"Name":"const:swapsched","Fields":["swapsched.ActiveAppBonus","swapsched.ActiveAppSWAPRatioInLimit","swapsched.DESoftLimit","swapsched.DefaultSamplePeriod","swapsched.KernelCacheReserve","swapsched.MaximumLimitPlus","swapsched.MinimumLimit","swapsched.enableSwapTotalMin","swapsched.limitInBytes","swapsched.softLimitInBytes"]},{"Name":"struct:swapsched.AppResourcesLimit","Fields":["swapsched.AppResourcesLimit.BlkioReadBPS uint64","swapsched.AppResourcesLimit.BlkioWriteBPS uint64","swapsched.AppResourcesLimit.MemHardLimit uint64"]},{"Name":"struct:swapsched.Config","Fields":["swapsched.Config.DECGroup string","swapsched.Config.DisableMemAvailMin uint64","swapsched.Config.EnableMemAvailMax uint64","swapsched.Config.SamplePeroid int","swapsched.Config.UIAppsCGroup string"]},{"Name":"struct:swapsched.Dispatcher","Fields":["swapsched.Dispatcher.activeApp *UIApp","swapsched.Dispatcher.activeXID int","swapsched.Dispatcher.cfg Config","swapsched.Dispatcher.cnt uint32","swapsched.Dispatcher.deCg *cgroup.Cgroup","swapsched.Dispatcher.enabled bool","swapsched.Dispatcher.inactiveApps []*UIApp","swapsched.Dispatcher.uiAppsCg *cgroup.Cgroup"]},{"Name":"struct:swapsched.MemInfo","Fields":["swapsched.MemInfo.ActiveAppRSS uint64","swapsched.MemInfo.ActiveAppSWAP uint64","swapsched.MemInfo.InactiveAppsRSS uint64","swapsched.MemInfo.TotalRAM uint64","swapsched.MemInfo.TotalRSSFree uint64","swapsched.MemInfo.TotalUsedSwap uint64","swapsched.MemInfo.n int"]},{"Name":"var:swapsched","Fields":["swapsched.debugBalance","swapsched.logger"]}]}
{"Filepath":"swapsched/uiapp.go","Functions":[{"Uniquefunname":"func (app *UIApp) GetCGroup() string","Funname":"GetCGroup","Returntype":"string","Args":""},{"Uniquefunname":"func (app *UIApp) HasChild(pid int) bool","Funname":"HasChild","Returntype":"bool","Args":"pid int"},{"Uniquefunname":"func (app *UIApp) IsLive() bool","Funname":"IsLive","Returntype":"bool","Args":""},{"Uniquefunname":"func (app *UIApp) LimitRSS() uint64","Funname":"LimitRSS","Returntype":"uint64","Args":""},{"Uniquefunname":"func (app *UIApp) SetLimitRSS(v uint64) error","Funname":"SetLimitRSS","Returntype":"error","Args":"v uint64"},{"Uniquefunname":"func (app *UIApp) SetStateEnd()","Funname":"SetStateEnd","Returntype":"","Args":""},{"Uniquefunname":"func (app *UIApp) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (app *UIApp) Update()","Funname":"Update","Returntype":"","Args":""},{"Uniquefunname":"func (app *UIApp) cancelLimitRSS() error","Funname":"cancelLimitRSS","Returntype":"error","Args":""},{"Uniquefunname":"func (app *UIApp) maybeDestroy()","Funname":"maybeDestroy","Returntype":"","Args":""},{"Uniquefunname":"func newApp(seqNum uint32, cg *cgroup.Cgroup, desc string, limit *AppResourcesLimit)(*UIApp, error)","Funname":"newApp","Returntype":"(*UIApp, error)","Args":"seqNum uint32, cg *cgroup.Cgroup, desc string, limit *AppResourcesLimit"},{"Uniquefunname":"func (app *UIApp) GetCGroup() string","Funname":"swapsched.UIApp.GetCGroup","Returntype":"string","Args":""},{"Uniquefunname":"func (app *UIApp) HasChild(pid int) bool","Funname":"swapsched.UIApp.HasChild","Returntype":"bool","Args":"pid int"},{"Uniquefunname":"func (app *UIApp) IsLive() bool","Funname":"swapsched.UIApp.IsLive","Returntype":"bool","Args":""},{"Uniquefunname":"func (app *UIApp) LimitRSS() uint64","Funname":"swapsched.UIApp.LimitRSS","Returntype":"uint64","Args":""},{"Uniquefunname":"func (app *UIApp) SetLimitRSS(v uint64) error","Funname":"swapsched.UIApp.SetLimitRSS","Returntype":"error","Args":"v uint64"},{"Uniquefunname":"func (app *UIApp) SetStateEnd()","Funname":"swapsched.UIApp.SetStateEnd","Returntype":"","Args":""},{"Uniquefunname":"func (app *UIApp) String() string","Funname":"swapsched.UIApp.String","Returntype":"string","Args":""},{"Uniquefunname":"func (app *UIApp) Update()","Funname":"swapsched.UIApp.Update","Returntype":"","Args":""},{"Uniquefunname":"func (app *UIApp) cancelLimitRSS() error","Funname":"swapsched.UIApp.cancelLimitRSS","Returntype":"error","Args":""},{"Uniquefunname":"func (app *UIApp) maybeDestroy()","Funname":"swapsched.UIApp.maybeDestroy","Returntype":"","Args":""},{"Uniquefunname":"func (app *UIApp) updatePids()","Funname":"swapsched.UIApp.updatePids","Returntype":"","Args":""},{"Uniquefunname":"func swapsched.newApp(seqNum uint32, cg *cgroup.Cgroup, desc string, limit *AppResourcesLimit)(*UIApp, error)","Funname":"swapsched.newApp","Returntype":"(*UIApp, error)","Args":"seqNum uint32, cg *cgroup.Cgroup, desc string, limit *AppResourcesLimit"},{"Uniquefunname":"func (app *UIApp) updatePids()","Funname":"updatePids","Returntype":"","Args":""}],"Records":[{"Name":"const:swapsched","Fields":["swapsched.AppStateDead","swapsched.AppStateEnd","swapsched.AppStateInit"]},{"Name":"struct:swapsched.UIApp","Fields":["swapsched.UIApp.cg *cgroup.Cgroup","swapsched.UIApp.desc string","swapsched.UIApp.limit uint64","swapsched.UIApp.mu sync.Mutex","swapsched.UIApp.pids []int","swapsched.UIApp.rssUsed uint64","swapsched.UIApp.seqNum uint32","swapsched.UIApp.state AppState"]}]}
{"Filepath":"swapsched/wm.go","Functions":[{"Uniquefunname":"func (d *Dispatcher) ActiveWindowHandler(pid int, xid int)","Funname":"ActiveWindowHandler","Returntype":"","Args":"pid int, xid int"},{"Uniquefunname":"func (cb ActiveWindowHandler) Monitor() error","Funname":"Monitor","Returntype":"error","Args":""},{"Uniquefunname":"func (cb ActiveWindowHandler) Monitor() error","Funname":"swapsched.ActiveWindowHandler.Monitor","Returntype":"error","Args":""},{"Uniquefunname":"func (d *Dispatcher) ActiveWindowHandler(pid int, xid int)","Funname":"swapsched.Dispatcher.ActiveWindowHandler","Returntype":"","Args":"pid int, xid int"}],"Records":null}
{"Filepath":"watchdog/dde_desktop.go","Functions":[{"Uniquefunname":"func isDdeDesktopRunning() (bool, error)","Funname":"isDdeDesktopRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchDdeDesktop() error","Funname":"launchDdeDesktop","Returntype":"error","Args":""},{"Uniquefunname":"func newDdeDesktopTask() *taskInfo","Funname":"newDdeDesktopTask","Returntype":"*taskInfo","Args":""},{"Uniquefunname":"func isDdeDesktopRunning() (bool, error)","Funname":"watchdog.isDdeDesktopRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchDdeDesktop() error","Funname":"watchdog.launchDdeDesktop","Returntype":"error","Args":""},{"Uniquefunname":"func newDdeDesktopTask() *taskInfo","Funname":"watchdog.newDdeDesktopTask","Returntype":"*taskInfo","Args":""}],"Records":[{"Name":"const:watchdog","Fields":["watchdog.ddeDesktopServiceName","watchdog.ddeDesktopTaskName"]}]}
{"Filepath":"watchdog/dde_dock.go","Functions":[{"Uniquefunname":"func isDdeDockRunning() (bool, error)","Funname":"isDdeDockRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchDdeDock() error","Funname":"launchDdeDock","Returntype":"error","Args":""},{"Uniquefunname":"func newDdeDockTask() *taskInfo","Funname":"newDdeDockTask","Returntype":"*taskInfo","Args":""},{"Uniquefunname":"func isDdeDockRunning() (bool, error)","Funname":"watchdog.isDdeDockRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchDdeDock() error","Funname":"watchdog.launchDdeDock","Returntype":"error","Args":""},{"Uniquefunname":"func newDdeDockTask() *taskInfo","Funname":"watchdog.newDdeDockTask","Returntype":"*taskInfo","Args":""}],"Records":[{"Name":"const:watchdog","Fields":["watchdog.ddeDockCommand","watchdog.ddeDockServiceName","watchdog.ddeDockTaskName"]}]}
{"Filepath":"watchdog/dde_kwin.go","Functions":[{"Uniquefunname":"func isDdeKWinRunning() (bool, error)","Funname":"isDdeKWinRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchDdeKWin() error","Funname":"launchDdeKWin","Returntype":"error","Args":""},{"Uniquefunname":"func newDdeKWinTask() *taskInfo","Funname":"newDdeKWinTask","Returntype":"*taskInfo","Args":""},{"Uniquefunname":"func isDdeKWinRunning() (bool, error)","Funname":"watchdog.isDdeKWinRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchDdeKWin() error","Funname":"watchdog.launchDdeKWin","Returntype":"error","Args":""},{"Uniquefunname":"func newDdeKWinTask() *taskInfo","Funname":"watchdog.newDdeKWinTask","Returntype":"*taskInfo","Args":""}],"Records":[{"Name":"const:watchdog","Fields":["watchdog.ddeKWinCommand","watchdog.kWinServiceName"]}]}
{"Filepath":"watchdog/dde_lock.go","Functions":[{"Uniquefunname":"func launchDdeLock() error","Funname":"launchDdeLock","Returntype":"error","Args":""},{"Uniquefunname":"func newDdeLock(getLockedFn func() bool) *taskInfo","Funname":"newDdeLock","Returntype":"*taskInfo","Args":"getLockedFn func() bool"},{"Uniquefunname":"func launchDdeLock() error","Funname":"watchdog.launchDdeLock","Returntype":"error","Args":""},{"Uniquefunname":"func newDdeLock(getLockedFn func() bool) *taskInfo","Funname":"watchdog.newDdeLock","Returntype":"*taskInfo","Args":"getLockedFn func() bool"}],"Records":[{"Name":"const:watchdog","Fields":["watchdog.ddeLockServiceName","watchdog.ddeLockTaskName"]}]}
{"Filepath":"watchdog/dde_polkit_agent.go","Functions":[{"Uniquefunname":"func isDdePolkitAgentRunning() (bool, error)","Funname":"isDdePolkitAgentRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchDdePolkitAgent() error","Funname":"launchDdePolkitAgent","Returntype":"error","Args":""},{"Uniquefunname":"func newDdePolkitAgent() *taskInfo","Funname":"newDdePolkitAgent","Returntype":"*taskInfo","Args":""},{"Uniquefunname":"func isDdePolkitAgentRunning() (bool, error)","Funname":"watchdog.isDdePolkitAgentRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchDdePolkitAgent() error","Funname":"watchdog.launchDdePolkitAgent","Returntype":"error","Args":""},{"Uniquefunname":"func newDdePolkitAgent() *taskInfo","Funname":"watchdog.newDdePolkitAgent","Returntype":"*taskInfo","Args":""}],"Records":[{"Name":"const:watchdog","Fields":["watchdog.ddePolkitAgentCommand","watchdog.ddePolkitAgentTaskName"]}]}
{"Filepath":"watchdog/dde_shutdown.go","Functions":[{"Uniquefunname":"func isDdeShutdownRunning() (bool, error)","Funname":"isDdeShutdownRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchCommand(command string, args []string, name string) error","Funname":"launchCommand","Returntype":"error","Args":"command string, args []string, name string"},{"Uniquefunname":"func launchDdeShutdown() error","Funname":"launchDdeShutdown","Returntype":"error","Args":""},{"Uniquefunname":"func newDdeShutdownTask() *taskInfo","Funname":"newDdeShutdownTask","Returntype":"*taskInfo","Args":""},{"Uniquefunname":"func isDdeShutdownRunning() (bool, error)","Funname":"watchdog.isDdeShutdownRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchCommand(command string, args []string, name string) error","Funname":"watchdog.launchCommand","Returntype":"error","Args":"command string, args []string, name string"},{"Uniquefunname":"func launchDdeShutdown() error","Funname":"watchdog.launchDdeShutdown","Returntype":"error","Args":""},{"Uniquefunname":"func newDdeShutdownTask() *taskInfo","Funname":"watchdog.newDdeShutdownTask","Returntype":"*taskInfo","Args":""}],"Records":[{"Name":"const:watchdog","Fields":["watchdog.ddeShutdownCommand","watchdog.ddeShutdownServiceName","watchdog.ddeShutdownTaskName"]}]}
{"Filepath":"watchdog/deepinid_daemon.go","Functions":[{"Uniquefunname":"func isDeepinidDaemonRunning() (bool, error)","Funname":"isDeepinidDaemonRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchDeepinidDaemon() error","Funname":"launchDeepinidDaemon","Returntype":"error","Args":""},{"Uniquefunname":"func newDeepinidDaemonTask() *taskInfo","Funname":"newDeepinidDaemonTask","Returntype":"*taskInfo","Args":""},{"Uniquefunname":"func isDeepinidDaemonRunning() (bool, error)","Funname":"watchdog.isDeepinidDaemonRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchDeepinidDaemon() error","Funname":"watchdog.launchDeepinidDaemon","Returntype":"error","Args":""},{"Uniquefunname":"func newDeepinidDaemonTask() *taskInfo","Funname":"watchdog.newDeepinidDaemonTask","Returntype":"*taskInfo","Args":""}],"Records":[{"Name":"const:watchdog","Fields":["watchdog.deepinidDaemonCommand","watchdog.deepinidDaemonServiceName","watchdog.deepinidDaemonTaskName"]}]}
{"Filepath":"watchdog/manager.go","Functions":[{"Uniquefunname":"func (m *Manager) AddDBusTask(dbusServiceName string, task *taskInfo)","Funname":"AddDBusTask","Returntype":"","Args":"dbusServiceName string, task *taskInfo"},{"Uniquefunname":"func (m *Manager) AddTimedTask(task *taskInfo)","Funname":"AddTimedTask","Returntype":"","Args":"task *taskInfo"},{"Uniquefunname":"func (m *Manager) GetTask(name string) *taskInfo","Funname":"GetTask","Returntype":"*taskInfo","Args":"name string"},{"Uniquefunname":"func (m *Manager) QuitLoop()","Funname":"QuitLoop","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) StartLoop()","Funname":"StartLoop","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) getTaskEnabled(taskName string) bool","Funname":"getTaskEnabled","Returntype":"bool","Args":"taskName string"},{"Uniquefunname":"func (m *Manager) handleSettingsChanged()","Funname":"handleSettingsChanged","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) hasAnyRunnableTimedTask() bool","Funname":"hasAnyRunnableTimedTask","Returntype":"bool","Args":""},{"Uniquefunname":"func (m *Manager) launchAllTimedTasks()","Funname":"launchAllTimedTasks","Returntype":"","Args":""},{"Uniquefunname":"func newManager() *Manager","Funname":"newManager","Returntype":"*Manager","Args":""},{"Uniquefunname":"func (m *Manager) AddDBusTask(dbusServiceName string, task *taskInfo)","Funname":"watchdog.Manager.AddDBusTask","Returntype":"","Args":"dbusServiceName string, task *taskInfo"},{"Uniquefunname":"func (m *Manager) AddTimedTask(task *taskInfo)","Funname":"watchdog.Manager.AddTimedTask","Returntype":"","Args":"task *taskInfo"},{"Uniquefunname":"func (m *Manager) GetTask(name string) *taskInfo","Funname":"watchdog.Manager.GetTask","Returntype":"*taskInfo","Args":"name string"},{"Uniquefunname":"func (m *Manager) QuitLoop()","Funname":"watchdog.Manager.QuitLoop","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) StartLoop()","Funname":"watchdog.Manager.StartLoop","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) getTaskEnabled(taskName string) bool","Funname":"watchdog.Manager.getTaskEnabled","Returntype":"bool","Args":"taskName string"},{"Uniquefunname":"func (m *Manager) handleSettingsChanged()","Funname":"watchdog.Manager.handleSettingsChanged","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) hasAnyRunnableTimedTask() bool","Funname":"watchdog.Manager.hasAnyRunnableTimedTask","Returntype":"bool","Args":""},{"Uniquefunname":"func (m *Manager) launchAllTimedTasks()","Funname":"watchdog.Manager.launchAllTimedTasks","Returntype":"","Args":""},{"Uniquefunname":"func newManager() *Manager","Funname":"watchdog.newManager","Returntype":"*Manager","Args":""}],"Records":[{"Name":"struct:watchdog.Manager","Fields":["watchdog.Manager.dbusTasks map[string]*taskInfo","watchdog.Manager.quit chan struct{}","watchdog.Manager.setting *gio.Settings","watchdog.Manager.timedTasks []*taskInfo"]},{"Name":"const:watchdog","Fields":["watchdog.schemaId"]}]}
{"Filepath":"watchdog/task.go","Functions":[{"Uniquefunname":"func (task *taskInfo) CanLaunch() bool","Funname":"CanLaunch","Returntype":"bool","Args":""},{"Uniquefunname":"func (task *taskInfo) Enable(enabled bool)","Funname":"Enable","Returntype":"","Args":"enabled bool"},{"Uniquefunname":"func (task *taskInfo) GetFailed() bool","Funname":"GetFailed","Returntype":"bool","Args":""},{"Uniquefunname":"func (task *taskInfo) Launch() error","Funname":"Launch","Returntype":"error","Args":""},{"Uniquefunname":"func (task *taskInfo) Reset()","Funname":"Reset","Returntype":"","Args":""},{"Uniquefunname":"func (task *taskInfo) getFailed() bool","Funname":"getFailed","Returntype":"bool","Args":""},{"Uniquefunname":"func newTaskInfo(name string, isRunning func() (bool, error), launcher func() error)*taskInfo","Funname":"newTaskInfo","Returntype":"*taskInfo","Args":"name string, isRunning func() (bool, error), launcher func() error"},{"Uniquefunname":"func watchdog.newTaskInfo(name string, isRunning func() (bool, error), launcher func() error)*taskInfo","Funname":"watchdog.newTaskInfo","Returntype":"*taskInfo","Args":"name string, isRunning func() (bool, error), launcher func() error"},{"Uniquefunname":"func (task *taskInfo) CanLaunch() bool","Funname":"watchdog.taskInfo.CanLaunch","Returntype":"bool","Args":""},{"Uniquefunname":"func (task *taskInfo) Enable(enabled bool)","Funname":"watchdog.taskInfo.Enable","Returntype":"","Args":"enabled bool"},{"Uniquefunname":"func (task *taskInfo) GetFailed() bool","Funname":"watchdog.taskInfo.GetFailed","Returntype":"bool","Args":""},{"Uniquefunname":"func (task *taskInfo) Launch() error","Funname":"watchdog.taskInfo.Launch","Returntype":"error","Args":""},{"Uniquefunname":"func (task *taskInfo) Reset()","Funname":"watchdog.taskInfo.Reset","Returntype":"","Args":""},{"Uniquefunname":"func (task *taskInfo) getFailed() bool","Funname":"watchdog.taskInfo.getFailed","Returntype":"bool","Args":""}],"Records":[{"Name":"const:watchdog","Fields":["watchdog.admissibleDuration","watchdog.loopDuration"]},{"Name":"var:watchdog","Fields":["watchdog.errNoNeedLaunch"]},{"Name":"struct:watchdog.taskInfo","Fields":["watchdog.taskInfo.Name string","watchdog.taskInfo.Times int","watchdog.taskInfo.enabled bool","watchdog.taskInfo.failed bool","watchdog.taskInfo.isRunning func() (bool, error)","watchdog.taskInfo.launch func() error","watchdog.taskInfo.launchDelay time.Duration","watchdog.taskInfo.locker sync.Mutex","watchdog.taskInfo.prevTimestamp int64"]}]}
{"Filepath":"watchdog/utils.go","Functions":[{"Uniquefunname":"func initDBusObject() error","Funname":"initDBusObject","Returntype":"error","Args":""},{"Uniquefunname":"func isDBusServiceExist(name string) (bool, error)","Funname":"isDBusServiceExist","Returntype":"(bool, error)","Args":"name string"},{"Uniquefunname":"func isItemInList(item string, list []string) bool","Funname":"isItemInList","Returntype":"bool","Args":"item string, list []string"},{"Uniquefunname":"func startService(name string) error","Funname":"startService","Returntype":"error","Args":"name string"},{"Uniquefunname":"func initDBusObject() error","Funname":"watchdog.initDBusObject","Returntype":"error","Args":""},{"Uniquefunname":"func isDBusServiceExist(name string) (bool, error)","Funname":"watchdog.isDBusServiceExist","Returntype":"(bool, error)","Args":"name string"},{"Uniquefunname":"func isItemInList(item string, list []string) bool","Funname":"watchdog.isItemInList","Returntype":"bool","Args":"item string, list []string"},{"Uniquefunname":"func startService(name string) error","Funname":"watchdog.startService","Returntype":"error","Args":"name string"}],"Records":[{"Name":"var:watchdog","Fields":["watchdog.busObj"]},{"Name":"const:watchdog","Fields":["watchdog.orgFreedesktopDBus"]}]}
{"Filepath":"watchdog/watchdog.go","Functions":[{"Uniquefunname":"func GetManager() *Manager","Funname":"GetManager","Returntype":"*Manager","Args":""},{"Uniquefunname":"func SetLogLevel(level log.Priority)","Funname":"SetLogLevel","Returntype":"","Args":"level log.Priority"},{"Uniquefunname":"func Start(getLockedFn func() bool, useKwin bool)","Funname":"Start","Returntype":"","Args":"getLockedFn func() bool, useKwin bool"},{"Uniquefunname":"func Stop()","Funname":"Stop","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) listenDBusSignals() error","Funname":"listenDBusSignals","Returntype":"error","Args":""},{"Uniquefunname":"func GetManager() *Manager","Funname":"watchdog.GetManager","Returntype":"*Manager","Args":""},{"Uniquefunname":"func (m *Manager) listenDBusSignals() error","Funname":"watchdog.Manager.listenDBusSignals","Returntype":"error","Args":""},{"Uniquefunname":"func SetLogLevel(level log.Priority)","Funname":"watchdog.SetLogLevel","Returntype":"","Args":"level log.Priority"},{"Uniquefunname":"func Start(getLockedFn func() bool, useKwin bool)","Funname":"watchdog.Start","Returntype":"","Args":"getLockedFn func() bool, useKwin bool"},{"Uniquefunname":"func Stop()","Funname":"watchdog.Stop","Returntype":"","Args":""}],"Records":[{"Name":"var:watchdog","Fields":["watchdog._manager","watchdog.logger","watchdog.maxLaunchTimes"]},{"Name":"const:watchdog","Fields":["watchdog.envMaxLaunchTimes"]}]}
{"Filepath":"watchdog/watchdog_test.go","Functions":[{"Uniquefunname":"func TestDBusExists(t *testing.T)","Funname":"TestDBusExists","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStrInList(t *testing.T)","Funname":"TestStrInList","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTaskInfo(t *testing.T)","Funname":"TestTaskInfo","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDBusExists(t *testing.T)","Funname":"watchdog.TestDBusExists","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStrInList(t *testing.T)","Funname":"watchdog.TestStrInList","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTaskInfo(t *testing.T)","Funname":"watchdog.TestTaskInfo","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"watchdog/wm.go","Functions":[{"Uniquefunname":"func isWMRunning() (bool, error)","Funname":"isWMRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchWM() error","Funname":"launchWM","Returntype":"error","Args":""},{"Uniquefunname":"func newWMTask() *taskInfo","Funname":"newWMTask","Returntype":"*taskInfo","Args":""},{"Uniquefunname":"func isWMRunning() (bool, error)","Funname":"watchdog.isWMRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func launchWM() error","Funname":"watchdog.launchWM","Returntype":"error","Args":""},{"Uniquefunname":"func newWMTask() *taskInfo","Funname":"watchdog.newWMTask","Returntype":"*taskInfo","Args":""}],"Records":[{"Name":"const:watchdog","Fields":["watchdog.wmServiceName","watchdog.wmTaskName"]}]}
{"Filepath":"wl_display/brightness.go","Functions":[{"Uniquefunname":"func (err InvalidOutputNameError) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) changeBrightness(raised bool) error","Funname":"changeBrightness","Returntype":"error","Args":"raised bool"},{"Uniquefunname":"func (err InvalidOutputNameError) Error() string","Funname":"display.InvalidOutputNameError.Error","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) changeBrightness(raised bool) error","Funname":"display.Manager.changeBrightness","Returntype":"error","Args":"raised bool"},{"Uniquefunname":"func (m *Manager) doSetBrightness(value float64, name string) error","Funname":"display.Manager.doSetBrightness","Returntype":"error","Args":"value float64, name string"},{"Uniquefunname":"func (m *Manager) doSetBrightnessAux(fake bool, value float64, name string) error","Funname":"display.Manager.doSetBrightnessAux","Returntype":"error","Args":"fake bool, value float64, name string"},{"Uniquefunname":"func (m *Manager) doSetBrightnessFake(value float64, name string) error","Funname":"display.Manager.doSetBrightnessFake","Returntype":"error","Args":"value float64, name string"},{"Uniquefunname":"func (m *Manager) getBrightnessSetter() string","Funname":"display.Manager.getBrightnessSetter","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) getSavedBrightnessTable() (map[string]float64, error)","Funname":"display.Manager.getSavedBrightnessTable","Returntype":"(map[string]float64, error)","Args":""},{"Uniquefunname":"func (m *Manager) initBrightness()","Funname":"display.Manager.initBrightness","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) saveBrightness()","Funname":"display.Manager.saveBrightness","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) setMonitorBrightness(monitor *Monitor, value float64) error","Funname":"display.Manager.setMonitorBrightness","Returntype":"error","Args":"monitor *Monitor, value float64"},{"Uniquefunname":"func (m *Manager) doSetBrightness(value float64, name string) error","Funname":"doSetBrightness","Returntype":"error","Args":"value float64, name string"},{"Uniquefunname":"func (m *Manager) doSetBrightnessAux(fake bool, value float64, name string) error","Funname":"doSetBrightnessAux","Returntype":"error","Args":"fake bool, value float64, name string"},{"Uniquefunname":"func (m *Manager) doSetBrightnessFake(value float64, name string) error","Funname":"doSetBrightnessFake","Returntype":"error","Args":"value float64, name string"},{"Uniquefunname":"func (m *Manager) getBrightnessSetter() string","Funname":"getBrightnessSetter","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) getSavedBrightnessTable() (map[string]float64, error)","Funname":"getSavedBrightnessTable","Returntype":"(map[string]float64, error)","Args":""},{"Uniquefunname":"func (m *Manager) initBrightness()","Funname":"initBrightness","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) saveBrightness()","Funname":"saveBrightness","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) setMonitorBrightness(monitor *Monitor, value float64) error","Funname":"setMonitorBrightness","Returntype":"error","Args":"monitor *Monitor, value float64"}],"Records":[{"Name":"struct:display.InvalidOutputNameError","Fields":["display.InvalidOutputNameError.Name string"]}]}
{"Filepath":"wl_display/config.go","Functions":[{"Uniquefunname":"func (c Config) save(filename string) error","Funname":"display.Config.save","Returntype":"error","Args":"filename string"},{"Uniquefunname":"func (s *ScreenConfig) getMonitorConfigs(mode uint8, customName string) []*MonitorConfig","Funname":"display.ScreenConfig.getMonitorConfigs","Returntype":"[]*MonitorConfig","Args":"mode uint8, customName string"},{"Uniquefunname":"func display.ScreenConfig.setMonitorConfigs(mode uint8, customName string, configs []*MonitorConfig)","Funname":"display.ScreenConfig.setMonitorConfigs","Returntype":"","Args":"mode uint8, customName string, configs []*MonitorConfig"},{"Uniquefunname":"func (s *ScreenConfig) setMonitorConfigsOnlyOne(configs []*MonitorConfig)","Funname":"display.ScreenConfig.setMonitorConfigsOnlyOne","Returntype":"","Args":"configs []*MonitorConfig"},{"Uniquefunname":"func getMonitorConfigByUuid(configs []*MonitorConfig, uuid string) *MonitorConfig","Funname":"display.getMonitorConfigByUuid","Returntype":"*MonitorConfig","Args":"configs []*MonitorConfig, uuid string"},{"Uniquefunname":"func init()","Funname":"display.init","Returntype":"","Args":""},{"Uniquefunname":"func loadConfig() (config Config)","Funname":"display.loadConfig","Returntype":"(config Config)","Args":""},{"Uniquefunname":"func loadConfigV4(filename string) (Config, error)","Funname":"display.loadConfigV4","Returntype":"(Config, error)","Args":"filename string"},{"Uniquefunname":"func setMonitorConfigsPrimary(configs []*MonitorConfig, uuid string)","Funname":"display.setMonitorConfigsPrimary","Returntype":"","Args":"configs []*MonitorConfig, uuid string"},{"Uniquefunname":"func updateMonitorConfigsName(configs []*MonitorConfig, monitorMap map[uint32]*Monitor)","Funname":"display.updateMonitorConfigsName","Returntype":"","Args":"configs []*MonitorConfig, monitorMap map[uint32]*Monitor"},{"Uniquefunname":"func getMonitorConfigByUuid(configs []*MonitorConfig, uuid string) *MonitorConfig","Funname":"getMonitorConfigByUuid","Returntype":"*MonitorConfig","Args":"configs []*MonitorConfig, uuid string"},{"Uniquefunname":"func (s *ScreenConfig) getMonitorConfigs(mode uint8, customName string) []*MonitorConfig","Funname":"getMonitorConfigs","Returntype":"[]*MonitorConfig","Args":"mode uint8, customName string"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func loadConfig() (config Config)","Funname":"loadConfig","Returntype":"(config Config)","Args":""},{"Uniquefunname":"func loadConfigV4(filename string) (Config, error)","Funname":"loadConfigV4","Returntype":"(Config, error)","Args":"filename string"},{"Uniquefunname":"func (c Config) save(filename string) error","Funname":"save","Returntype":"error","Args":"filename string"},{"Uniquefunname":"func setMonitorConfigs(mode uint8, customName string, configs []*MonitorConfig)","Funname":"setMonitorConfigs","Returntype":"","Args":"mode uint8, customName string, configs []*MonitorConfig"},{"Uniquefunname":"func (s *ScreenConfig) setMonitorConfigsOnlyOne(configs []*MonitorConfig)","Funname":"setMonitorConfigsOnlyOne","Returntype":"","Args":"configs []*MonitorConfig"},{"Uniquefunname":"func setMonitorConfigsPrimary(configs []*MonitorConfig, uuid string)","Funname":"setMonitorConfigsPrimary","Returntype":"","Args":"configs []*MonitorConfig, uuid string"},{"Uniquefunname":"func updateMonitorConfigsName(configs []*MonitorConfig, monitorMap map[uint32]*Monitor)","Funname":"updateMonitorConfigsName","Returntype":"","Args":"configs []*MonitorConfig, monitorMap map[uint32]*Monitor"}],"Records":[{"Name":"struct:display.CustomModeConfig","Fields":["display.CustomModeConfig.Monitors []*MonitorConfig","display.CustomModeConfig.Name string"]},{"Name":"struct:display.ExtendModeConfig","Fields":["display.ExtendModeConfig.Monitors []*MonitorConfig"]},{"Name":"struct:display.MirrorModeConfig","Fields":["display.MirrorModeConfig.Monitors []*MonitorConfig"]},{"Name":"struct:display.MonitorConfig","Fields":["display.MonitorConfig.Enabled bool","display.MonitorConfig.Height uint16","display.MonitorConfig.Name string","display.MonitorConfig.Primary bool","display.MonitorConfig.Reflect uint16","display.MonitorConfig.RefreshRate float64","display.MonitorConfig.Rotation uint16","display.MonitorConfig.UUID string","display.MonitorConfig.Width uint16","display.MonitorConfig.X int16","display.MonitorConfig.Y int16"]},{"Name":"struct:display.OnlyOneModeConfig","Fields":["display.OnlyOneModeConfig.Monitors []*MonitorConfig"]},{"Name":"struct:display.ScreenConfig","Fields":["display.ScreenConfig.Custom []*CustomModeConfig","display.ScreenConfig.Extend *ExtendModeConfig","display.ScreenConfig.Mirror *MirrorModeConfig","display.ScreenConfig.OnlyOne *OnlyOneModeConfig","display.ScreenConfig.Single *MonitorConfig"]},{"Name":"var:display","Fields":["display.configFile","display.configVersionFile"]},{"Name":"const:display","Fields":["display.configVersion"]}]}
{"Filepath":"wl_display/config_v3_3.go","Functions":[{"Uniquefunname":"func (c ConfigV3_3) toConfig() Config","Funname":"display.ConfigV3_3.toConfig","Returntype":"Config","Args":""},{"Uniquefunname":"func (sc *ScreenConfigV3_3) toMonitorConfigs() []*MonitorConfig","Funname":"display.ScreenConfigV3_3.toMonitorConfigs","Returntype":"[]*MonitorConfig","Args":""},{"Uniquefunname":"func (ck *configKey) getJoinedId() string","Funname":"display.configKey.getJoinedId","Returntype":"string","Args":""},{"Uniquefunname":"func loadConfigV3_3(filename string) (ConfigV3_3, error)","Funname":"display.loadConfigV3_3","Returntype":"(ConfigV3_3, error)","Args":"filename string"},{"Uniquefunname":"func parseConfigKey(str string) configKey","Funname":"display.parseConfigKey","Returntype":"configKey","Args":"str string"},{"Uniquefunname":"func (ck *configKey) getJoinedId() string","Funname":"getJoinedId","Returntype":"string","Args":""},{"Uniquefunname":"func loadConfigV3_3(filename string) (ConfigV3_3, error)","Funname":"loadConfigV3_3","Returntype":"(ConfigV3_3, error)","Args":"filename string"},{"Uniquefunname":"func parseConfigKey(str string) configKey","Funname":"parseConfigKey","Returntype":"configKey","Args":"str string"},{"Uniquefunname":"func (c ConfigV3_3) toConfig() Config","Funname":"toConfig","Returntype":"Config","Args":""},{"Uniquefunname":"func (sc *ScreenConfigV3_3) toMonitorConfigs() []*MonitorConfig","Funname":"toMonitorConfigs","Returntype":"[]*MonitorConfig","Args":""}],"Records":[{"Name":"struct:display.MonitorConfiV3_3","Fields":["display.MonitorConfiV3_3.Enabled bool","display.MonitorConfiV3_3.Height uint16","display.MonitorConfiV3_3.Name string","display.MonitorConfiV3_3.Reflect uint16","display.MonitorConfiV3_3.RefreshRate float64","display.MonitorConfiV3_3.Rotation uint16","display.MonitorConfiV3_3.UUID string","display.MonitorConfiV3_3.Width uint16","display.MonitorConfiV3_3.X int16","display.MonitorConfiV3_3.Y int16"]},{"Name":"struct:display.ScreenConfigV3_3","Fields":["display.ScreenConfigV3_3.BaseInfos []*MonitorConfiV3_3","display.ScreenConfigV3_3.Name string","display.ScreenConfigV3_3.Primary string"]},{"Name":"struct:display.configKey","Fields":["display.configKey.idFields []string","display.configKey.name string"]}]}
{"Filepath":"wl_display/config_v3_3_test.go","Functions":[{"Uniquefunname":"func TestConfig(t *testing.T)","Funname":"TestConfig","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestConfig(t *testing.T)","Funname":"display.TestConfig","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"const:display","Fields":["display.cfgStr0"]}]}
{"Filepath":"wl_display/display.go","Functions":[{"Uniquefunname":"func GetRecommendedScaleFactor() float64","Funname":"GetRecommendedScaleFactor","Returntype":"float64","Args":""},{"Uniquefunname":"func SetLogLevel(level log.Priority)","Funname":"SetLogLevel","Returntype":"","Args":"level log.Priority"},{"Uniquefunname":"func Start() error","Funname":"Start","Returntype":"error","Args":""},{"Uniquefunname":"func GetRecommendedScaleFactor() float64","Funname":"display.GetRecommendedScaleFactor","Returntype":"float64","Args":""},{"Uniquefunname":"func SetLogLevel(level log.Priority)","Funname":"display.SetLogLevel","Returntype":"","Args":"level log.Priority"},{"Uniquefunname":"func Start() error","Funname":"display.Start","Returntype":"error","Args":""}],"Records":[{"Name":"var:display","Fields":["display._dpy","display.logger"]},{"Name":"const:display","Fields":["display.dbusInterface","display.dbusPath","display.dbusServiceName"]}]}
{"Filepath":"wl_display/display_dbusutil.go","Functions":[{"Uniquefunname":"func (v *Manager) emitPropChangedBrightness(value map[string]float64) error","Funname":"display.Manager.emitPropChangedBrightness","Returntype":"error","Args":"value map[string]float64"},{"Uniquefunname":"func (v *Manager) emitPropChangedCurrentCustomId(value string) error","Funname":"display.Manager.emitPropChangedCurrentCustomId","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Manager) emitPropChangedCustomIdList(value []string) error","Funname":"display.Manager.emitPropChangedCustomIdList","Returntype":"error","Args":"value []string"},{"Uniquefunname":"func (v *Manager) emitPropChangedDisplayMode(value byte) error","Funname":"display.Manager.emitPropChangedDisplayMode","Returntype":"error","Args":"value byte"},{"Uniquefunname":"func (v *Manager) emitPropChangedHasChanged(value bool) error","Funname":"display.Manager.emitPropChangedHasChanged","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Manager) emitPropChangedMonitors(value []dbus.ObjectPath) error","Funname":"display.Manager.emitPropChangedMonitors","Returntype":"error","Args":"value []dbus.ObjectPath"},{"Uniquefunname":"func (v *Manager) emitPropChangedPrimary(value string) error","Funname":"display.Manager.emitPropChangedPrimary","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Manager) emitPropChangedPrimaryRect(value x.Rectangle) error","Funname":"display.Manager.emitPropChangedPrimaryRect","Returntype":"error","Args":"value x.Rectangle"},{"Uniquefunname":"func (v *Manager) emitPropChangedScreenHeight(value uint16) error","Funname":"display.Manager.emitPropChangedScreenHeight","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) emitPropChangedScreenWidth(value uint16) error","Funname":"display.Manager.emitPropChangedScreenWidth","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) emitPropChangedTouchMap(value map[string]string) error","Funname":"display.Manager.emitPropChangedTouchMap","Returntype":"error","Args":"value map[string]string"},{"Uniquefunname":"func (v *Manager) setPropBrightness(value map[string]float64)","Funname":"display.Manager.setPropBrightness","Returntype":"","Args":"value map[string]float64"},{"Uniquefunname":"func (v *Manager) setPropCurrentCustomId(value string) (changed bool)","Funname":"display.Manager.setPropCurrentCustomId","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Manager) setPropCustomIdList(value []string)","Funname":"display.Manager.setPropCustomIdList","Returntype":"","Args":"value []string"},{"Uniquefunname":"func (v *Manager) setPropDisplayMode(value byte) (changed bool)","Funname":"display.Manager.setPropDisplayMode","Returntype":"(changed bool)","Args":"value byte"},{"Uniquefunname":"func (v *Manager) setPropHasChanged(value bool) (changed bool)","Funname":"display.Manager.setPropHasChanged","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Manager) setPropMonitors(value []dbus.ObjectPath)","Funname":"display.Manager.setPropMonitors","Returntype":"","Args":"value []dbus.ObjectPath"},{"Uniquefunname":"func (v *Manager) setPropPrimary(value string) (changed bool)","Funname":"display.Manager.setPropPrimary","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Manager) setPropPrimaryRect(value x.Rectangle)","Funname":"display.Manager.setPropPrimaryRect","Returntype":"","Args":"value x.Rectangle"},{"Uniquefunname":"func (v *Manager) setPropScreenHeight(value uint16) (changed bool)","Funname":"display.Manager.setPropScreenHeight","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) setPropScreenWidth(value uint16) (changed bool)","Funname":"display.Manager.setPropScreenWidth","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) setPropTouchMap(value map[string]string)","Funname":"display.Manager.setPropTouchMap","Returntype":"","Args":"value map[string]string"},{"Uniquefunname":"func (v *Monitor) emitPropChangedBestMode(value ModeInfo) error","Funname":"display.Monitor.emitPropChangedBestMode","Returntype":"error","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Monitor) emitPropChangedConnected(value bool) error","Funname":"display.Monitor.emitPropChangedConnected","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Monitor) emitPropChangedCurrentMode(value ModeInfo) error","Funname":"display.Monitor.emitPropChangedCurrentMode","Returntype":"error","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Monitor) emitPropChangedEnabled(value bool) error","Funname":"display.Monitor.emitPropChangedEnabled","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Monitor) emitPropChangedHeight(value uint16) error","Funname":"display.Monitor.emitPropChangedHeight","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedID(value uint32) error","Funname":"display.Monitor.emitPropChangedID","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) emitPropChangedMmHeight(value uint32) error","Funname":"display.Monitor.emitPropChangedMmHeight","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) emitPropChangedMmWidth(value uint32) error","Funname":"display.Monitor.emitPropChangedMmWidth","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) emitPropChangedModes(value []ModeInfo) error","Funname":"display.Monitor.emitPropChangedModes","Returntype":"error","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Monitor) emitPropChangedName(value string) error","Funname":"display.Monitor.emitPropChangedName","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Monitor) emitPropChangedPreferredModes(value []ModeInfo) error","Funname":"display.Monitor.emitPropChangedPreferredModes","Returntype":"error","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Monitor) emitPropChangedReflect(value uint16) error","Funname":"display.Monitor.emitPropChangedReflect","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedReflects(value []uint16) error","Funname":"display.Monitor.emitPropChangedReflects","Returntype":"error","Args":"value []uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedRefreshRate(value float64) error","Funname":"display.Monitor.emitPropChangedRefreshRate","Returntype":"error","Args":"value float64"},{"Uniquefunname":"func (v *Monitor) emitPropChangedRotation(value uint16) error","Funname":"display.Monitor.emitPropChangedRotation","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedRotations(value []uint16) error","Funname":"display.Monitor.emitPropChangedRotations","Returntype":"error","Args":"value []uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedWidth(value uint16) error","Funname":"display.Monitor.emitPropChangedWidth","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedX(value int16) error","Funname":"display.Monitor.emitPropChangedX","Returntype":"error","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedY(value int16) error","Funname":"display.Monitor.emitPropChangedY","Returntype":"error","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) setPropBestMode(value ModeInfo)","Funname":"display.Monitor.setPropBestMode","Returntype":"","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Monitor) setPropConnected(value bool) (changed bool)","Funname":"display.Monitor.setPropConnected","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Monitor) setPropCurrentMode(value ModeInfo)","Funname":"display.Monitor.setPropCurrentMode","Returntype":"","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Monitor) setPropEnabled(value bool) (changed bool)","Funname":"display.Monitor.setPropEnabled","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Monitor) setPropHeight(value uint16) (changed bool)","Funname":"display.Monitor.setPropHeight","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropID(value uint32) (changed bool)","Funname":"display.Monitor.setPropID","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) setPropMmHeight(value uint32) (changed bool)","Funname":"display.Monitor.setPropMmHeight","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) setPropMmWidth(value uint32) (changed bool)","Funname":"display.Monitor.setPropMmWidth","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) setPropModes(value []ModeInfo)","Funname":"display.Monitor.setPropModes","Returntype":"","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Monitor) setPropName(value string) (changed bool)","Funname":"display.Monitor.setPropName","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Monitor) setPropPreferredModes(value []ModeInfo)","Funname":"display.Monitor.setPropPreferredModes","Returntype":"","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Monitor) setPropReflect(value uint16) (changed bool)","Funname":"display.Monitor.setPropReflect","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropReflects(value []uint16)","Funname":"display.Monitor.setPropReflects","Returntype":"","Args":"value []uint16"},{"Uniquefunname":"func (v *Monitor) setPropRefreshRate(value float64) (changed bool)","Funname":"display.Monitor.setPropRefreshRate","Returntype":"(changed bool)","Args":"value float64"},{"Uniquefunname":"func (v *Monitor) setPropRotation(value uint16) (changed bool)","Funname":"display.Monitor.setPropRotation","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropRotations(value []uint16)","Funname":"display.Monitor.setPropRotations","Returntype":"","Args":"value []uint16"},{"Uniquefunname":"func (v *Monitor) setPropWidth(value uint16) (changed bool)","Funname":"display.Monitor.setPropWidth","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropX(value int16) (changed bool)","Funname":"display.Monitor.setPropX","Returntype":"(changed bool)","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) setPropY(value int16) (changed bool)","Funname":"display.Monitor.setPropY","Returntype":"(changed bool)","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedBestMode(value ModeInfo) error","Funname":"emitPropChangedBestMode","Returntype":"error","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Manager) emitPropChangedBrightness(value map[string]float64) error","Funname":"emitPropChangedBrightness","Returntype":"error","Args":"value map[string]float64"},{"Uniquefunname":"func (v *Monitor) emitPropChangedConnected(value bool) error","Funname":"emitPropChangedConnected","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Manager) emitPropChangedCurrentCustomId(value string) error","Funname":"emitPropChangedCurrentCustomId","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Monitor) emitPropChangedCurrentMode(value ModeInfo) error","Funname":"emitPropChangedCurrentMode","Returntype":"error","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Manager) emitPropChangedCustomIdList(value []string) error","Funname":"emitPropChangedCustomIdList","Returntype":"error","Args":"value []string"},{"Uniquefunname":"func (v *Manager) emitPropChangedDisplayMode(value byte) error","Funname":"emitPropChangedDisplayMode","Returntype":"error","Args":"value byte"},{"Uniquefunname":"func (v *Monitor) emitPropChangedEnabled(value bool) error","Funname":"emitPropChangedEnabled","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Manager) emitPropChangedHasChanged(value bool) error","Funname":"emitPropChangedHasChanged","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Monitor) emitPropChangedHeight(value uint16) error","Funname":"emitPropChangedHeight","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedID(value uint32) error","Funname":"emitPropChangedID","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) emitPropChangedMmHeight(value uint32) error","Funname":"emitPropChangedMmHeight","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) emitPropChangedMmWidth(value uint32) error","Funname":"emitPropChangedMmWidth","Returntype":"error","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) emitPropChangedModes(value []ModeInfo) error","Funname":"emitPropChangedModes","Returntype":"error","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Manager) emitPropChangedMonitors(value []dbus.ObjectPath) error","Funname":"emitPropChangedMonitors","Returntype":"error","Args":"value []dbus.ObjectPath"},{"Uniquefunname":"func (v *Monitor) emitPropChangedName(value string) error","Funname":"emitPropChangedName","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Monitor) emitPropChangedPreferredModes(value []ModeInfo) error","Funname":"emitPropChangedPreferredModes","Returntype":"error","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Manager) emitPropChangedPrimary(value string) error","Funname":"emitPropChangedPrimary","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Manager) emitPropChangedPrimaryRect(value x.Rectangle) error","Funname":"emitPropChangedPrimaryRect","Returntype":"error","Args":"value x.Rectangle"},{"Uniquefunname":"func (v *Monitor) emitPropChangedReflect(value uint16) error","Funname":"emitPropChangedReflect","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedReflects(value []uint16) error","Funname":"emitPropChangedReflects","Returntype":"error","Args":"value []uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedRefreshRate(value float64) error","Funname":"emitPropChangedRefreshRate","Returntype":"error","Args":"value float64"},{"Uniquefunname":"func (v *Monitor) emitPropChangedRotation(value uint16) error","Funname":"emitPropChangedRotation","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedRotations(value []uint16) error","Funname":"emitPropChangedRotations","Returntype":"error","Args":"value []uint16"},{"Uniquefunname":"func (v *Manager) emitPropChangedScreenHeight(value uint16) error","Funname":"emitPropChangedScreenHeight","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) emitPropChangedScreenWidth(value uint16) error","Funname":"emitPropChangedScreenWidth","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) emitPropChangedTouchMap(value map[string]string) error","Funname":"emitPropChangedTouchMap","Returntype":"error","Args":"value map[string]string"},{"Uniquefunname":"func (v *Monitor) emitPropChangedWidth(value uint16) error","Funname":"emitPropChangedWidth","Returntype":"error","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedX(value int16) error","Funname":"emitPropChangedX","Returntype":"error","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) emitPropChangedY(value int16) error","Funname":"emitPropChangedY","Returntype":"error","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) setPropBestMode(value ModeInfo)","Funname":"setPropBestMode","Returntype":"","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Manager) setPropBrightness(value map[string]float64)","Funname":"setPropBrightness","Returntype":"","Args":"value map[string]float64"},{"Uniquefunname":"func (v *Monitor) setPropConnected(value bool) (changed bool)","Funname":"setPropConnected","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Manager) setPropCurrentCustomId(value string) (changed bool)","Funname":"setPropCurrentCustomId","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Monitor) setPropCurrentMode(value ModeInfo)","Funname":"setPropCurrentMode","Returntype":"","Args":"value ModeInfo"},{"Uniquefunname":"func (v *Manager) setPropCustomIdList(value []string)","Funname":"setPropCustomIdList","Returntype":"","Args":"value []string"},{"Uniquefunname":"func (v *Manager) setPropDisplayMode(value byte) (changed bool)","Funname":"setPropDisplayMode","Returntype":"(changed bool)","Args":"value byte"},{"Uniquefunname":"func (v *Monitor) setPropEnabled(value bool) (changed bool)","Funname":"setPropEnabled","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Manager) setPropHasChanged(value bool) (changed bool)","Funname":"setPropHasChanged","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Monitor) setPropHeight(value uint16) (changed bool)","Funname":"setPropHeight","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropID(value uint32) (changed bool)","Funname":"setPropID","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) setPropMmHeight(value uint32) (changed bool)","Funname":"setPropMmHeight","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) setPropMmWidth(value uint32) (changed bool)","Funname":"setPropMmWidth","Returntype":"(changed bool)","Args":"value uint32"},{"Uniquefunname":"func (v *Monitor) setPropModes(value []ModeInfo)","Funname":"setPropModes","Returntype":"","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Manager) setPropMonitors(value []dbus.ObjectPath)","Funname":"setPropMonitors","Returntype":"","Args":"value []dbus.ObjectPath"},{"Uniquefunname":"func (v *Monitor) setPropName(value string) (changed bool)","Funname":"setPropName","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Monitor) setPropPreferredModes(value []ModeInfo)","Funname":"setPropPreferredModes","Returntype":"","Args":"value []ModeInfo"},{"Uniquefunname":"func (v *Manager) setPropPrimary(value string) (changed bool)","Funname":"setPropPrimary","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Manager) setPropPrimaryRect(value x.Rectangle)","Funname":"setPropPrimaryRect","Returntype":"","Args":"value x.Rectangle"},{"Uniquefunname":"func (v *Monitor) setPropReflect(value uint16) (changed bool)","Funname":"setPropReflect","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropReflects(value []uint16)","Funname":"setPropReflects","Returntype":"","Args":"value []uint16"},{"Uniquefunname":"func (v *Monitor) setPropRefreshRate(value float64) (changed bool)","Funname":"setPropRefreshRate","Returntype":"(changed bool)","Args":"value float64"},{"Uniquefunname":"func (v *Monitor) setPropRotation(value uint16) (changed bool)","Funname":"setPropRotation","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropRotations(value []uint16)","Funname":"setPropRotations","Returntype":"","Args":"value []uint16"},{"Uniquefunname":"func (v *Manager) setPropScreenHeight(value uint16) (changed bool)","Funname":"setPropScreenHeight","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) setPropScreenWidth(value uint16) (changed bool)","Funname":"setPropScreenWidth","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Manager) setPropTouchMap(value map[string]string)","Funname":"setPropTouchMap","Returntype":"","Args":"value map[string]string"},{"Uniquefunname":"func (v *Monitor) setPropWidth(value uint16) (changed bool)","Funname":"setPropWidth","Returntype":"(changed bool)","Args":"value uint16"},{"Uniquefunname":"func (v *Monitor) setPropX(value int16) (changed bool)","Funname":"setPropX","Returntype":"(changed bool)","Args":"value int16"},{"Uniquefunname":"func (v *Monitor) setPropY(value int16) (changed bool)","Funname":"setPropY","Returntype":"(changed bool)","Args":"value int16"}],"Records":null}
{"Filepath":"wl_display/display_test.go","Functions":[{"Uniquefunname":"func TestCalcRecommendedScaleFactor(t *testing.T)","Funname":"TestCalcRecommendedScaleFactor","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_filterModeInfos(t *testing.T)","Funname":"Test_filterModeInfos","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_getMaxAreaSize(t *testing.T)","Funname":"Test_getMaxAreaSize","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCalcRecommendedScaleFactor(t *testing.T)","Funname":"display.TestCalcRecommendedScaleFactor","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_filterModeInfos(t *testing.T)","Funname":"display.Test_filterModeInfos","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_getMaxAreaSize(t *testing.T)","Funname":"display.Test_getMaxAreaSize","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"wl_display/kwayland_dbus.go","Functions":[{"Uniquefunname":"func (m *Manager) applyByWLOutput() error","Funname":"applyByWLOutput","Returntype":"error","Args":""},{"Uniquefunname":"func (mi KModeInfo) name() string","Funname":"display.KModeInfo.name","Returntype":"string","Args":""},{"Uniquefunname":"func (mi KModeInfo) rate() float64","Funname":"display.KModeInfo.rate","Returntype":"float64","Args":""},{"Uniquefunname":"func (mi KModeInfo) toModeInfo() ModeInfo","Funname":"display.KModeInfo.toModeInfo","Returntype":"ModeInfo","Args":""},{"Uniquefunname":"func (oi *KOutputInfo) getBestMode() ModeInfo","Funname":"display.KOutputInfo.getBestMode","Returntype":"ModeInfo","Args":""},{"Uniquefunname":"func (oi *KOutputInfo) getCurrentMode() ModeInfo","Funname":"display.KOutputInfo.getCurrentMode","Returntype":"ModeInfo","Args":""},{"Uniquefunname":"func (oi *KOutputInfo) getEnabled() bool","Funname":"display.KOutputInfo.getEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"func (oi *KOutputInfo) getModes() (result []ModeInfo)","Funname":"display.KOutputInfo.getModes","Returntype":"(result []ModeInfo)","Args":""},{"Uniquefunname":"func (oi *KOutputInfo) getName() string","Funname":"display.KOutputInfo.getName","Returntype":"string","Args":""},{"Uniquefunname":"func (oi *KOutputInfo) rotation() uint16","Funname":"display.KOutputInfo.rotation","Returntype":"uint16","Args":""},{"Uniquefunname":"func (m *Manager) applyByWLOutput() error","Funname":"display.Manager.applyByWLOutput","Returntype":"error","Args":""},{"Uniquefunname":"func (m *Manager) listOutput() ([]*KOutputInfo, error)","Funname":"display.Manager.listOutput","Returntype":"([]*KOutputInfo, error)","Args":""},{"Uniquefunname":"func getMaxAreaOutputDeviceMode(modes []KModeInfo) KModeInfo","Funname":"display.getMaxAreaOutputDeviceMode","Returntype":"KModeInfo","Args":"modes []KModeInfo"},{"Uniquefunname":"func getNameFromModel(model string) string","Funname":"display.getNameFromModel","Returntype":"string","Args":"model string"},{"Uniquefunname":"func getNameFromModelAndMake(model, make string) string","Funname":"display.getNameFromModelAndMake","Returntype":"string","Args":"model, make string"},{"Uniquefunname":"func getOutputDeviceName(model, make string) string","Funname":"display.getOutputDeviceName","Returntype":"string","Args":"model, make string"},{"Uniquefunname":"func int32ToBool(v int32) bool","Funname":"display.int32ToBool","Returntype":"bool","Args":"v int32"},{"Uniquefunname":"func (mig *monitorIdGenerator) getId(uuid string) uint32","Funname":"display.monitorIdGenerator.getId","Returntype":"uint32","Args":"uuid string"},{"Uniquefunname":"func newKOutputInfoByUUID(uuid string) (*KOutputInfo, error)","Funname":"display.newKOutputInfoByUUID","Returntype":"(*KOutputInfo, error)","Args":"uuid string"},{"Uniquefunname":"func newMonitorIdGenerator() *monitorIdGenerator","Funname":"display.newMonitorIdGenerator","Returntype":"*monitorIdGenerator","Args":""},{"Uniquefunname":"func randrRotationToTransform(rotation int) int","Funname":"display.randrRotationToTransform","Returntype":"int","Args":"rotation int"},{"Uniquefunname":"func unmarshalOutputInfo(str string) (*KOutputInfo, error)","Funname":"display.unmarshalOutputInfo","Returntype":"(*KOutputInfo, error)","Args":"str string"},{"Uniquefunname":"func unmarshalOutputInfos(str string) ([]*KOutputInfo, error)","Funname":"display.unmarshalOutputInfos","Returntype":"([]*KOutputInfo, error)","Args":"str string"},{"Uniquefunname":"func (oi *KOutputInfo) getBestMode() ModeInfo","Funname":"getBestMode","Returntype":"ModeInfo","Args":""},{"Uniquefunname":"func (oi *KOutputInfo) getCurrentMode() ModeInfo","Funname":"getCurrentMode","Returntype":"ModeInfo","Args":""},{"Uniquefunname":"func (oi *KOutputInfo) getEnabled() bool","Funname":"getEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"func (mig *monitorIdGenerator) getId(uuid string) uint32","Funname":"getId","Returntype":"uint32","Args":"uuid string"},{"Uniquefunname":"func getMaxAreaOutputDeviceMode(modes []KModeInfo) KModeInfo","Funname":"getMaxAreaOutputDeviceMode","Returntype":"KModeInfo","Args":"modes []KModeInfo"},{"Uniquefunname":"func (oi *KOutputInfo) getModes() (result []ModeInfo)","Funname":"getModes","Returntype":"(result []ModeInfo)","Args":""},{"Uniquefunname":"func (oi *KOutputInfo) getName() string","Funname":"getName","Returntype":"string","Args":""},{"Uniquefunname":"func getNameFromModel(model string) string","Funname":"getNameFromModel","Returntype":"string","Args":"model string"},{"Uniquefunname":"func getNameFromModelAndMake(model, make string) string","Funname":"getNameFromModelAndMake","Returntype":"string","Args":"model, make string"},{"Uniquefunname":"func getOutputDeviceName(model, make string) string","Funname":"getOutputDeviceName","Returntype":"string","Args":"model, make string"},{"Uniquefunname":"func int32ToBool(v int32) bool","Funname":"int32ToBool","Returntype":"bool","Args":"v int32"},{"Uniquefunname":"func (m *Manager) listOutput() ([]*KOutputInfo, error)","Funname":"listOutput","Returntype":"([]*KOutputInfo, error)","Args":""},{"Uniquefunname":"func (mi KModeInfo) name() string","Funname":"name","Returntype":"string","Args":""},{"Uniquefunname":"func newKOutputInfoByUUID(uuid string) (*KOutputInfo, error)","Funname":"newKOutputInfoByUUID","Returntype":"(*KOutputInfo, error)","Args":"uuid string"},{"Uniquefunname":"func newMonitorIdGenerator() *monitorIdGenerator","Funname":"newMonitorIdGenerator","Returntype":"*monitorIdGenerator","Args":""},{"Uniquefunname":"func randrRotationToTransform(rotation int) int","Funname":"randrRotationToTransform","Returntype":"int","Args":"rotation int"},{"Uniquefunname":"func (mi KModeInfo) rate() float64","Funname":"rate","Returntype":"float64","Args":""},{"Uniquefunname":"func (oi *KOutputInfo) rotation() uint16","Funname":"rotation","Returntype":"uint16","Args":""},{"Uniquefunname":"func (mi KModeInfo) toModeInfo() ModeInfo","Funname":"toModeInfo","Returntype":"ModeInfo","Args":""},{"Uniquefunname":"func unmarshalOutputInfo(str string) (*KOutputInfo, error)","Funname":"unmarshalOutputInfo","Returntype":"(*KOutputInfo, error)","Args":"str string"},{"Uniquefunname":"func unmarshalOutputInfos(str string) ([]*KOutputInfo, error)","Funname":"unmarshalOutputInfos","Returntype":"([]*KOutputInfo, error)","Args":"str string"}],"Records":[{"Name":"struct:display.KModeInfo","Fields":["display.KModeInfo.Flags int32","display.KModeInfo.Height int32","display.KModeInfo.Id int32","display.KModeInfo.RefreshRate int32","display.KModeInfo.Width int32"]},{"Name":"struct:display.KOutputInfo","Fields":["display.KOutputInfo.Enabled int32","display.KOutputInfo.Height int32","display.KOutputInfo.Manufacturer string","display.KOutputInfo.ModeInfos []KModeInfo","display.KOutputInfo.Model string","display.KOutputInfo.PhysHeight int32","display.KOutputInfo.PhysWidth int32","display.KOutputInfo.RefreshRate int32","display.KOutputInfo.Scale float64","display.KOutputInfo.Transform int32","display.KOutputInfo.Uuid string","display.KOutputInfo.Width int32","display.KOutputInfo.X int32","display.KOutputInfo.Y int32"]},{"Name":"const:display","Fields":["display.OutputDeviceModeCurrent","display.OutputDeviceModePreferred","display.OutputDeviceTransform180","display.OutputDeviceTransform270","display.OutputDeviceTransform90","display.OutputDeviceTransformFlipped","display.OutputDeviceTransformFlipped180","display.OutputDeviceTransformFlipped270","display.OutputDeviceTransformFlipped90","display.OutputDeviceTransformNormal"]},{"Name":"struct:display.monitorIdGenerator","Fields":["display.monitorIdGenerator.mu sync.Mutex","display.monitorIdGenerator.nextId uint32","display.monitorIdGenerator.uuidIdMap map[string]uint32"]},{"Name":"struct:display.outputInfoWrap","Fields":["display.outputInfoWrap.OutputInfo []*KOutputInfo"]}]}
{"Filepath":"wl_display/manager.go","Functions":[{"Uniquefunname":"func (infos ModeInfos) Len() int","Funname":"Len","Returntype":"int","Args":""},{"Uniquefunname":"func (infos ModeInfos) Less(i, j int) bool","Funname":"Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func (infos ModeInfos) Swap(i, j int)","Funname":"Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func (m *Manager) addMonitor(outputInfo *KOutputInfo) error","Funname":"addMonitor","Returntype":"error","Args":"outputInfo *KOutputInfo"},{"Uniquefunname":"func (m *Manager) addSleepMonitor()","Funname":"addSleepMonitor","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) apply() error","Funname":"apply","Returntype":"error","Args":""},{"Uniquefunname":"func (m *Manager) applyConfigs(configs []*MonitorConfig) error","Funname":"applyConfigs","Returntype":"error","Args":"configs []*MonitorConfig"},{"Uniquefunname":"func (m *Manager) applyDisplayMode()","Funname":"applyDisplayMode","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) associateTouch(outputName, touch string) error","Funname":"associateTouch","Returntype":"error","Args":"outputName, touch string"},{"Uniquefunname":"func (m *Manager) calcRecommendedScaleFactor() float64","Funname":"calcRecommendedScaleFactor","Returntype":"float64","Args":""},{"Uniquefunname":"func calcRecommendedScaleFactor(widthPx, heightPx, widthMm, heightMm float64) float64","Funname":"calcRecommendedScaleFactor","Returntype":"float64","Args":"widthPx, heightPx, widthMm, heightMm float64"},{"Uniquefunname":"func (m *Manager) canSwitchMode() bool","Funname":"canSwitchMode","Returntype":"bool","Args":""},{"Uniquefunname":"func (m *Manager) deleteCustomMode(name string) (err error)","Funname":"deleteCustomMode","Returntype":"(err error)","Args":"name string"},{"Uniquefunname":"func (m *Manager) addMonitor(outputInfo *KOutputInfo) error","Funname":"display.Manager.addMonitor","Returntype":"error","Args":"outputInfo *KOutputInfo"},{"Uniquefunname":"func (m *Manager) addSleepMonitor()","Funname":"display.Manager.addSleepMonitor","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) apply() error","Funname":"display.Manager.apply","Returntype":"error","Args":""},{"Uniquefunname":"func (m *Manager) applyConfigs(configs []*MonitorConfig) error","Funname":"display.Manager.applyConfigs","Returntype":"error","Args":"configs []*MonitorConfig"},{"Uniquefunname":"func (m *Manager) applyDisplayMode()","Funname":"display.Manager.applyDisplayMode","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) associateTouch(outputName, touch string) error","Funname":"display.Manager.associateTouch","Returntype":"error","Args":"outputName, touch string"},{"Uniquefunname":"func (m *Manager) calcRecommendedScaleFactor() float64","Funname":"display.Manager.calcRecommendedScaleFactor","Returntype":"float64","Args":""},{"Uniquefunname":"func (m *Manager) canSwitchMode() bool","Funname":"display.Manager.canSwitchMode","Returntype":"bool","Args":""},{"Uniquefunname":"func (m *Manager) deleteCustomMode(name string) (err error)","Funname":"display.Manager.deleteCustomMode","Returntype":"(err error)","Args":"name string"},{"Uniquefunname":"func (m *Manager) doSetTouchMap(output, touch string) error","Funname":"display.Manager.doSetTouchMap","Returntype":"error","Args":"output, touch string"},{"Uniquefunname":"func (m *Manager) getConnectedMonitors() Monitors","Funname":"display.Manager.getConnectedMonitors","Returntype":"Monitors","Args":""},{"Uniquefunname":"func (m *Manager) getCustomIdList() []string","Funname":"display.Manager.getCustomIdList","Returntype":"[]string","Args":""},{"Uniquefunname":"func (m *Manager) getMonitorsId() string","Funname":"display.Manager.getMonitorsId","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) getScreenConfig() *ScreenConfig","Funname":"display.Manager.getScreenConfig","Returntype":"*ScreenConfig","Args":""},{"Uniquefunname":"func (m *Manager) init()","Funname":"display.Manager.init","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) initTouchMap()","Funname":"display.Manager.initTouchMap","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) isCustomModeBeingUsed(name string) bool","Funname":"display.Manager.isCustomModeBeingUsed","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (m *Manager) listenDBusSignals()","Funname":"display.Manager.listenDBusSignals","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) markClean()","Funname":"display.Manager.markClean","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) modifyConfigName(name, newName string) (err error)","Funname":"display.Manager.modifyConfigName","Returntype":"(err error)","Args":"name, newName string"},{"Uniquefunname":"func (m *Manager) removeMonitor(id uint32)","Funname":"display.Manager.removeMonitor","Returntype":"","Args":"id uint32"},{"Uniquefunname":"func (m *Manager) save() (err error)","Funname":"display.Manager.save","Returntype":"(err error)","Args":""},{"Uniquefunname":"func (m *Manager) saveConfig() error","Funname":"display.Manager.saveConfig","Returntype":"error","Args":""},{"Uniquefunname":"func (m *Manager) setCurrentCustomId(name string)","Funname":"display.Manager.setCurrentCustomId","Returntype":"","Args":"name string"},{"Uniquefunname":"func (m *Manager) setDisplayMode(mode byte)","Funname":"display.Manager.setDisplayMode","Returntype":"","Args":"mode byte"},{"Uniquefunname":"func (m *Manager) setMonitorPrimary(monitor *Monitor) error","Funname":"display.Manager.setMonitorPrimary","Returntype":"error","Args":"monitor *Monitor"},{"Uniquefunname":"func (m *Manager) setPrimary(name string) error","Funname":"display.Manager.setPrimary","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (m *Manager) switchMode(mode byte, name string) (err error)","Funname":"display.Manager.switchMode","Returntype":"(err error)","Args":"mode byte, name string"},{"Uniquefunname":"func (m *Manager) switchModeCustom(name string) (err error)","Funname":"display.Manager.switchModeCustom","Returntype":"(err error)","Args":"name string"},{"Uniquefunname":"func (m *Manager) switchModeExtend(primary string) (err error)","Funname":"display.Manager.switchModeExtend","Returntype":"(err error)","Args":"primary string"},{"Uniquefunname":"func (m *Manager) switchModeMirror() (err error)","Funname":"display.Manager.switchModeMirror","Returntype":"(err error)","Args":""},{"Uniquefunname":"func (m *Manager) switchModeOnlyOne(name string) (err error)","Funname":"display.Manager.switchModeOnlyOne","Returntype":"(err error)","Args":"name string"},{"Uniquefunname":"func (m *Manager) updateMonitor(monitor *Monitor, outputInfo *KOutputInfo)","Funname":"display.Manager.updateMonitor","Returntype":"","Args":"monitor *Monitor, outputInfo *KOutputInfo"},{"Uniquefunname":"func (m *Manager) updateMonitorsId()","Funname":"display.Manager.updateMonitorsId","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) updatePropMonitors()","Funname":"display.Manager.updatePropMonitors","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) updateScreenSize()","Funname":"display.Manager.updateScreenSize","Returntype":"","Args":""},{"Uniquefunname":"func (infos ModeInfos) Len() int","Funname":"display.ModeInfos.Len","Returntype":"int","Args":""},{"Uniquefunname":"func (infos ModeInfos) Less(i, j int) bool","Funname":"display.ModeInfos.Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func (infos ModeInfos) Swap(i, j int)","Funname":"display.ModeInfos.Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func calcRecommendedScaleFactor(widthPx, heightPx, widthMm, heightMm float64) float64","Funname":"display.calcRecommendedScaleFactor","Returntype":"float64","Args":"widthPx, heightPx, widthMm, heightMm float64"},{"Uniquefunname":"func isInSwitchModeBlacklist(manu, model string) bool","Funname":"display.isInSwitchModeBlacklist","Returntype":"bool","Args":"manu, model string"},{"Uniquefunname":"func newManager(service *dbusutil.Service) *Manager","Funname":"display.newManager","Returntype":"*Manager","Args":"service *dbusutil.Service"},{"Uniquefunname":"func toListedScaleFactor(s float64) float64","Funname":"display.toListedScaleFactor","Returntype":"float64","Args":"s float64"},{"Uniquefunname":"func (m *Manager) doSetTouchMap(output, touch string) error","Funname":"doSetTouchMap","Returntype":"error","Args":"output, touch string"},{"Uniquefunname":"func (m *Manager) getConnectedMonitors() Monitors","Funname":"getConnectedMonitors","Returntype":"Monitors","Args":""},{"Uniquefunname":"func (m *Manager) getCustomIdList() []string","Funname":"getCustomIdList","Returntype":"[]string","Args":""},{"Uniquefunname":"func (m *Manager) getMonitorsId() string","Funname":"getMonitorsId","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) getScreenConfig() *ScreenConfig","Funname":"getScreenConfig","Returntype":"*ScreenConfig","Args":""},{"Uniquefunname":"func (m *Manager) init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) initTouchMap()","Funname":"initTouchMap","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) isCustomModeBeingUsed(name string) bool","Funname":"isCustomModeBeingUsed","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func isInSwitchModeBlacklist(manu, model string) bool","Funname":"isInSwitchModeBlacklist","Returntype":"bool","Args":"manu, model string"},{"Uniquefunname":"func (m *Manager) listenDBusSignals()","Funname":"listenDBusSignals","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) markClean()","Funname":"markClean","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) modifyConfigName(name, newName string) (err error)","Funname":"modifyConfigName","Returntype":"(err error)","Args":"name, newName string"},{"Uniquefunname":"func newManager(service *dbusutil.Service) *Manager","Funname":"newManager","Returntype":"*Manager","Args":"service *dbusutil.Service"},{"Uniquefunname":"func (m *Manager) removeMonitor(id uint32)","Funname":"removeMonitor","Returntype":"","Args":"id uint32"},{"Uniquefunname":"func (m *Manager) save() (err error)","Funname":"save","Returntype":"(err error)","Args":""},{"Uniquefunname":"func (m *Manager) saveConfig() error","Funname":"saveConfig","Returntype":"error","Args":""},{"Uniquefunname":"func (m *Manager) setCurrentCustomId(name string)","Funname":"setCurrentCustomId","Returntype":"","Args":"name string"},{"Uniquefunname":"func (m *Manager) setDisplayMode(mode byte)","Funname":"setDisplayMode","Returntype":"","Args":"mode byte"},{"Uniquefunname":"func (m *Manager) setMonitorPrimary(monitor *Monitor) error","Funname":"setMonitorPrimary","Returntype":"error","Args":"monitor *Monitor"},{"Uniquefunname":"func (m *Manager) setPrimary(name string) error","Funname":"setPrimary","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (m *Manager) switchMode(mode byte, name string) (err error)","Funname":"switchMode","Returntype":"(err error)","Args":"mode byte, name string"},{"Uniquefunname":"func (m *Manager) switchModeCustom(name string) (err error)","Funname":"switchModeCustom","Returntype":"(err error)","Args":"name string"},{"Uniquefunname":"func (m *Manager) switchModeExtend(primary string) (err error)","Funname":"switchModeExtend","Returntype":"(err error)","Args":"primary string"},{"Uniquefunname":"func (m *Manager) switchModeMirror() (err error)","Funname":"switchModeMirror","Returntype":"(err error)","Args":""},{"Uniquefunname":"func (m *Manager) switchModeOnlyOne(name string) (err error)","Funname":"switchModeOnlyOne","Returntype":"(err error)","Args":"name string"},{"Uniquefunname":"func toListedScaleFactor(s float64) float64","Funname":"toListedScaleFactor","Returntype":"float64","Args":"s float64"},{"Uniquefunname":"func (m *Manager) updateMonitor(monitor *Monitor, outputInfo *KOutputInfo)","Funname":"updateMonitor","Returntype":"","Args":"monitor *Monitor, outputInfo *KOutputInfo"},{"Uniquefunname":"func (m *Manager) updateMonitorsId()","Funname":"updateMonitorsId","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) updatePropMonitors()","Funname":"updatePropMonitors","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) updateScreenSize()","Funname":"updateScreenSize","Returntype":"","Args":""}],"Records":[{"Name":"const:display","Fields":["display.DisplayModeCustom","display.DisplayModeExtend","display.DisplayModeMirror","display.DisplayModeOnlyOne","display.DisplayModeUnknow","display.customModeDelim","display.gsKeyBrightness","display.gsKeyCustomMode","display.gsKeyDisplayMode","display.gsKeyMapOutput","display.gsKeySetter","display.gsSchemaDisplay","display.monitorsIdDelimiter"]},{"Name":"struct:display.Manager","Fields":["display.Manager.Brightness map[string]float64","display.Manager.CurrentCustomId string","display.Manager.CustomIdList []string","display.Manager.DisplayMode byte","display.Manager.HasChanged bool","display.Manager.Monitors []dbus.ObjectPath","display.Manager.Primary string","display.Manager.PrimaryRect x.Rectangle","display.Manager.PropsMu sync.RWMutex","display.Manager.ScreenHeight uint16","display.Manager.ScreenWidth uint16","display.Manager.TouchMap map[string]string","display.Manager.config Config","display.Manager.management *kwayland.OutputManagement","display.Manager.methods *struct { AssociateTouch func() `in:\"outputName,touch\"`; ChangeBrightness func() `in:\"raised\"`; DeleteCustomMode func() `in:\"name\"`; GetBrightness func() `out:\"values\"`; ListOutputNames func() `out:\"names\"`; ListOutputsCommonModes func() `out:\"modes\"`; ModifyConfigName func() `in:\"name,newName\"`; SetAndSaveBrightness func() `in:\"outputName,value\"`; SetBrightness func() `in:\"outputName,value\"`; SetPrimary func() `in:\"outputName\"`; SwitchMode func() `in:\"mode,name\"`; CanRotate func() `out:\"can\"`;","display.Manager.mig *monitorIdGenerator","display.Manager.monitorMap map[uint32]*Monitor","display.Manager.monitorMapMu sync.Mutex","display.Manager.monitorsId string","display.Manager.recommendScaleFactor float64","display.Manager.service *dbusutil.Service","display.Manager.sessionSigLoop *dbusutil.SignalLoop","display.Manager.settings *gio.Settings","display.Manager.xConn *x.Conn"]},{"Name":"struct:display.ModeInfo","Fields":["display.ModeInfo.Height uint16","display.ModeInfo.Id uint32","display.ModeInfo.Rate float64","display.ModeInfo.Width uint16","display.ModeInfo.name string"]}]}
{"Filepath":"wl_display/manager_ifc.go","Functions":[{"Uniquefunname":"func (m *Manager) ApplyChanges() *dbus.Error","Funname":"ApplyChanges","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (dpy *Manager) AssociateTouch(outputName, touch string) *dbus.Error","Funname":"AssociateTouch","Returntype":"*dbus.Error","Args":"outputName, touch string"},{"Uniquefunname":"func (m *Manager) CanRotate() (bool, *dbus.Error)","Funname":"CanRotate","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) CanSwitchMode() (bool, *dbus.Error)","Funname":"CanSwitchMode","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) ChangeBrightness(raised bool) *dbus.Error","Funname":"ChangeBrightness","Returntype":"*dbus.Error","Args":"raised bool"},{"Uniquefunname":"func (m *Manager) DeleteCustomMode(name string) *dbus.Error","Funname":"DeleteCustomMode","Returntype":"*dbus.Error","Args":"name string"},{"Uniquefunname":"func (m *Manager) GetBrightness() (map[string]float64, *dbus.Error)","Funname":"GetBrightness","Returntype":"(map[string]float64, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) ListOutputNames() ([]string, *dbus.Error)","Funname":"ListOutputNames","Returntype":"([]string, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) ListOutputsCommonModes() ([]ModeInfo, *dbus.Error)","Funname":"ListOutputsCommonModes","Returntype":"([]ModeInfo, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) ModifyConfigName(name, newName string) *dbus.Error","Funname":"ModifyConfigName","Returntype":"*dbus.Error","Args":"name, newName string"},{"Uniquefunname":"func (m *Manager) RefreshBrightness() *dbus.Error","Funname":"RefreshBrightness","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) Reset() *dbus.Error","Funname":"Reset","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) ResetChanges() *dbus.Error","Funname":"ResetChanges","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) Save() *dbus.Error","Funname":"Save","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) SetAndSaveBrightness(outputName string, value float64) *dbus.Error","Funname":"SetAndSaveBrightness","Returntype":"*dbus.Error","Args":"outputName string, value float64"},{"Uniquefunname":"func (m *Manager) SetBrightness(outputName string, value float64) *dbus.Error","Funname":"SetBrightness","Returntype":"*dbus.Error","Args":"outputName string, value float64"},{"Uniquefunname":"func (m *Manager) SetPrimary(outputName string) *dbus.Error","Funname":"SetPrimary","Returntype":"*dbus.Error","Args":"outputName string"},{"Uniquefunname":"func (m *Manager) SwitchMode(mode byte, name string) *dbus.Error","Funname":"SwitchMode","Returntype":"*dbus.Error","Args":"mode byte, name string"},{"Uniquefunname":"func (m *Manager) ApplyChanges() *dbus.Error","Funname":"display.Manager.ApplyChanges","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (dpy *Manager) AssociateTouch(outputName, touch string) *dbus.Error","Funname":"display.Manager.AssociateTouch","Returntype":"*dbus.Error","Args":"outputName, touch string"},{"Uniquefunname":"func (m *Manager) CanRotate() (bool, *dbus.Error)","Funname":"display.Manager.CanRotate","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) CanSwitchMode() (bool, *dbus.Error)","Funname":"display.Manager.CanSwitchMode","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) ChangeBrightness(raised bool) *dbus.Error","Funname":"display.Manager.ChangeBrightness","Returntype":"*dbus.Error","Args":"raised bool"},{"Uniquefunname":"func (m *Manager) DeleteCustomMode(name string) *dbus.Error","Funname":"display.Manager.DeleteCustomMode","Returntype":"*dbus.Error","Args":"name string"},{"Uniquefunname":"func (m *Manager) GetBrightness() (map[string]float64, *dbus.Error)","Funname":"display.Manager.GetBrightness","Returntype":"(map[string]float64, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) GetInterfaceName() string","Funname":"display.Manager.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) ListOutputNames() ([]string, *dbus.Error)","Funname":"display.Manager.ListOutputNames","Returntype":"([]string, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) ListOutputsCommonModes() ([]ModeInfo, *dbus.Error)","Funname":"display.Manager.ListOutputsCommonModes","Returntype":"([]ModeInfo, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) ModifyConfigName(name, newName string) *dbus.Error","Funname":"display.Manager.ModifyConfigName","Returntype":"*dbus.Error","Args":"name, newName string"},{"Uniquefunname":"func (m *Manager) RefreshBrightness() *dbus.Error","Funname":"display.Manager.RefreshBrightness","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) Reset() *dbus.Error","Funname":"display.Manager.Reset","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) ResetChanges() *dbus.Error","Funname":"display.Manager.ResetChanges","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) Save() *dbus.Error","Funname":"display.Manager.Save","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (m *Manager) SetAndSaveBrightness(outputName string, value float64) *dbus.Error","Funname":"display.Manager.SetAndSaveBrightness","Returntype":"*dbus.Error","Args":"outputName string, value float64"},{"Uniquefunname":"func (m *Manager) SetBrightness(outputName string, value float64) *dbus.Error","Funname":"display.Manager.SetBrightness","Returntype":"*dbus.Error","Args":"outputName string, value float64"},{"Uniquefunname":"func (m *Manager) SetPrimary(outputName string) *dbus.Error","Funname":"display.Manager.SetPrimary","Returntype":"*dbus.Error","Args":"outputName string"},{"Uniquefunname":"func (m *Manager) SwitchMode(mode byte, name string) *dbus.Error","Funname":"display.Manager.SwitchMode","Returntype":"*dbus.Error","Args":"mode byte, name string"}],"Records":null}
{"Filepath":"wl_display/monitor.go","Functions":[{"Uniquefunname":"func (m *Monitor) Enable(enabled bool) *dbus.Error","Funname":"Enable","Returntype":"*dbus.Error","Args":"enabled bool"},{"Uniquefunname":"func (monitors Monitors) GetByName(name string) *Monitor","Funname":"GetByName","Returntype":"*Monitor","Args":"name string"},{"Uniquefunname":"func (m *Monitor) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Monitor) SetMode(mode uint32) *dbus.Error","Funname":"SetMode","Returntype":"*dbus.Error","Args":"mode uint32"},{"Uniquefunname":"func (m *Monitor) SetModeBySize(width, height uint16) *dbus.Error","Funname":"SetModeBySize","Returntype":"*dbus.Error","Args":"width, height uint16"},{"Uniquefunname":"func (m *Monitor) SetPosition(X, y int16) *dbus.Error","Funname":"SetPosition","Returntype":"*dbus.Error","Args":"X, y int16"},{"Uniquefunname":"func (m *Monitor) SetReflect(value uint16) *dbus.Error","Funname":"SetReflect","Returntype":"*dbus.Error","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) SetRefreshRate(value float64) *dbus.Error","Funname":"SetRefreshRate","Returntype":"*dbus.Error","Args":"value float64"},{"Uniquefunname":"func (m *Monitor) SetRotation(value uint16) *dbus.Error","Funname":"SetRotation","Returntype":"*dbus.Error","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) Enable(enabled bool) *dbus.Error","Funname":"display.Monitor.Enable","Returntype":"*dbus.Error","Args":"enabled bool"},{"Uniquefunname":"func (m *Monitor) GetInterfaceName() string","Funname":"display.Monitor.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Monitor) SetMode(mode uint32) *dbus.Error","Funname":"display.Monitor.SetMode","Returntype":"*dbus.Error","Args":"mode uint32"},{"Uniquefunname":"func (m *Monitor) SetModeBySize(width, height uint16) *dbus.Error","Funname":"display.Monitor.SetModeBySize","Returntype":"*dbus.Error","Args":"width, height uint16"},{"Uniquefunname":"func (m *Monitor) SetPosition(X, y int16) *dbus.Error","Funname":"display.Monitor.SetPosition","Returntype":"*dbus.Error","Args":"X, y int16"},{"Uniquefunname":"func (m *Monitor) SetReflect(value uint16) *dbus.Error","Funname":"display.Monitor.SetReflect","Returntype":"*dbus.Error","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) SetRefreshRate(value float64) *dbus.Error","Funname":"display.Monitor.SetRefreshRate","Returntype":"*dbus.Error","Args":"value float64"},{"Uniquefunname":"func (m *Monitor) SetRotation(value uint16) *dbus.Error","Funname":"display.Monitor.SetRotation","Returntype":"*dbus.Error","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) enable(enabled bool)","Funname":"display.Monitor.enable","Returntype":"","Args":"enabled bool"},{"Uniquefunname":"func (m *Monitor) getPath() dbus.ObjectPath","Funname":"display.Monitor.getPath","Returntype":"dbus.ObjectPath","Args":""},{"Uniquefunname":"func (m *Monitor) getRect() x.Rectangle","Funname":"display.Monitor.getRect","Returntype":"x.Rectangle","Args":""},{"Uniquefunname":"func (m *Monitor) markChanged()","Funname":"display.Monitor.markChanged","Returntype":"","Args":""},{"Uniquefunname":"func (m *Monitor) resetChanges()","Funname":"display.Monitor.resetChanges","Returntype":"","Args":""},{"Uniquefunname":"func (m *Monitor) selectMode(width, height uint16, rate float64) ModeInfo","Funname":"display.Monitor.selectMode","Returntype":"ModeInfo","Args":"width, height uint16, rate float64"},{"Uniquefunname":"func (m *Monitor) setMode(mode ModeInfo)","Funname":"display.Monitor.setMode","Returntype":"","Args":"mode ModeInfo"},{"Uniquefunname":"func (m *Monitor) setPosition(X, y int16)","Funname":"display.Monitor.setPosition","Returntype":"","Args":"X, y int16"},{"Uniquefunname":"func (m *Monitor) setReflect(value uint16)","Funname":"display.Monitor.setReflect","Returntype":"","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) setRotation(value uint16)","Funname":"display.Monitor.setRotation","Returntype":"","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) toConfig() *MonitorConfig","Funname":"display.Monitor.toConfig","Returntype":"*MonitorConfig","Args":""},{"Uniquefunname":"func (monitors Monitors) GetByName(name string) *Monitor","Funname":"display.Monitors.GetByName","Returntype":"*Monitor","Args":"name string"},{"Uniquefunname":"func getFirstModeBySize(modes []ModeInfo, width, height uint16) (ModeInfo, bool)","Funname":"display.getFirstModeBySize","Returntype":"(ModeInfo, bool)","Args":"modes []ModeInfo, width, height uint16"},{"Uniquefunname":"func display.getFirstModeBySizeRate(modes []ModeInfo, width, height uint16, rate float64)(ModeInfo, bool)","Funname":"display.getFirstModeBySizeRate","Returntype":"(ModeInfo, bool)","Args":"modes []ModeInfo, width, height uint16, rate float64"},{"Uniquefunname":"func toMonitorConfigs(monitors []*Monitor, primary string) []*MonitorConfig","Funname":"display.toMonitorConfigs","Returntype":"[]*MonitorConfig","Args":"monitors []*Monitor, primary string"},{"Uniquefunname":"func (m *Monitor) enable(enabled bool)","Funname":"enable","Returntype":"","Args":"enabled bool"},{"Uniquefunname":"func getFirstModeBySize(modes []ModeInfo, width, height uint16) (ModeInfo, bool)","Funname":"getFirstModeBySize","Returntype":"(ModeInfo, bool)","Args":"modes []ModeInfo, width, height uint16"},{"Uniquefunname":"func getFirstModeBySizeRate(modes []ModeInfo, width, height uint16, rate float64)(ModeInfo, bool)","Funname":"getFirstModeBySizeRate","Returntype":"(ModeInfo, bool)","Args":"modes []ModeInfo, width, height uint16, rate float64"},{"Uniquefunname":"func (m *Monitor) getPath() dbus.ObjectPath","Funname":"getPath","Returntype":"dbus.ObjectPath","Args":""},{"Uniquefunname":"func (m *Monitor) getRect() x.Rectangle","Funname":"getRect","Returntype":"x.Rectangle","Args":""},{"Uniquefunname":"func (m *Monitor) markChanged()","Funname":"markChanged","Returntype":"","Args":""},{"Uniquefunname":"func (m *Monitor) resetChanges()","Funname":"resetChanges","Returntype":"","Args":""},{"Uniquefunname":"func (m *Monitor) selectMode(width, height uint16, rate float64) ModeInfo","Funname":"selectMode","Returntype":"ModeInfo","Args":"width, height uint16, rate float64"},{"Uniquefunname":"func (m *Monitor) setMode(mode ModeInfo)","Funname":"setMode","Returntype":"","Args":"mode ModeInfo"},{"Uniquefunname":"func (m *Monitor) setPosition(X, y int16)","Funname":"setPosition","Returntype":"","Args":"X, y int16"},{"Uniquefunname":"func (m *Monitor) setReflect(value uint16)","Funname":"setReflect","Returntype":"","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) setRotation(value uint16)","Funname":"setRotation","Returntype":"","Args":"value uint16"},{"Uniquefunname":"func (m *Monitor) toConfig() *MonitorConfig","Funname":"toConfig","Returntype":"*MonitorConfig","Args":""},{"Uniquefunname":"func toMonitorConfigs(monitors []*Monitor, primary string) []*MonitorConfig","Funname":"toMonitorConfigs","Returntype":"[]*MonitorConfig","Args":"monitors []*Monitor, primary string"}],"Records":[{"Name":"struct:display.Monitor","Fields":["display.Monitor.BestMode ModeInfo","display.Monitor.Connected bool","display.Monitor.CurrentMode ModeInfo","display.Monitor.Enabled bool","display.Monitor.Height uint16","display.Monitor.ID uint32","display.Monitor.Manufacturer string","display.Monitor.MmHeight uint32","display.Monitor.MmWidth uint32","display.Monitor.Model string","display.Monitor.Modes []ModeInfo","display.Monitor.Name string","display.Monitor.PreferredModes []ModeInfo","display.Monitor.PropsMu sync.RWMutex","display.Monitor.Reflect uint16","display.Monitor.Reflects []uint16","display.Monitor.RefreshRate float64","display.Monitor.Rotation uint16","display.Monitor.Rotations []uint16","display.Monitor.Width uint16","display.Monitor.X int16","display.Monitor.Y int16","display.Monitor.backup *MonitorBackup","display.Monitor.m *Manager","display.Monitor.manufacturer string","display.Monitor.methods *struct { Enable func() `in:\"enabled\"`; SetMode func() `in:\"mode\"`; SetModeBySize func() `in:\"width,height\"`; SetPosition func() `in:\"x,y\"`; SetReflect func() `in:\"value\"`; SetRotation func() `in:\"value\"`; SetRefreshRate func() `in:\"value\"`; }","display.Monitor.model string","display.Monitor.service *dbusutil.Service","display.Monitor.uuid string"]},{"Name":"struct:display.MonitorBackup","Fields":["display.MonitorBackup.Enabled bool","display.MonitorBackup.Mode ModeInfo","display.MonitorBackup.Reflect uint16","display.MonitorBackup.Rotation uint16","display.MonitorBackup.X int16","display.MonitorBackup.Y int16"]},{"Name":"const:display","Fields":["display.dbusInterfaceMonitor"]}]}
{"Filepath":"wl_display/util.go","Functions":[{"Uniquefunname":"func doAction(cmd string) error","Funname":"display.doAction","Returntype":"error","Args":"cmd string"},{"Uniquefunname":"func filterModeInfos(modes []ModeInfo) []ModeInfo","Funname":"display.filterModeInfos","Returntype":"[]ModeInfo","Args":"modes []ModeInfo"},{"Uniquefunname":"func findFirstMode(modes []ModeInfo, fn func(mode ModeInfo) bool) *ModeInfo","Funname":"display.findFirstMode","Returntype":"*ModeInfo","Args":"modes []ModeInfo, fn func(mode ModeInfo) bool"},{"Uniquefunname":"func formatRate(v float64) string","Funname":"display.formatRate","Returntype":"string","Args":"v float64"},{"Uniquefunname":"func getConfigVersion(filename string) (string, error)","Funname":"display.getConfigVersion","Returntype":"(string, error)","Args":"filename string"},{"Uniquefunname":"func getMaxAreaSize(sizes []Size) Size","Funname":"display.getMaxAreaSize","Returntype":"Size","Args":"sizes []Size"},{"Uniquefunname":"func getMinIDMonitor(monitors []*Monitor) *Monitor","Funname":"display.getMinIDMonitor","Returntype":"*Monitor","Args":"monitors []*Monitor"},{"Uniquefunname":"func getMonitorsCommonSizes(monitors []*Monitor) []Size","Funname":"display.getMonitorsCommonSizes","Returntype":"[]Size","Args":"monitors []*Monitor"},{"Uniquefunname":"func getSizeModeMap(modes []ModeInfo) map[Size][]uint32","Funname":"display.getSizeModeMap","Returntype":"map[Size][]uint32","Args":"modes []ModeInfo"},{"Uniquefunname":"func guassPrimaryMonitor(monitors []*Monitor) *Monitor","Funname":"display.guassPrimaryMonitor","Returntype":"*Monitor","Args":"monitors []*Monitor"},{"Uniquefunname":"func isBuiltinOutput(name string) bool","Funname":"display.isBuiltinOutput","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func isDigit(b byte) bool","Funname":"display.isDigit","Returntype":"bool","Args":"b byte"},{"Uniquefunname":"func jsonMarshal(v interface","Funname":"display.jsonMarshal","Returntype":"string","Args":"v interface{}"},{"Uniquefunname":"func jsonUnmarshal(data string, ret interface","Funname":"display.jsonUnmarshal","Returntype":"error","Args":"data string, ret interface{}"},{"Uniquefunname":"func needSwapWidthHeight(rotation uint16) bool","Funname":"display.needSwapWidthHeight","Returntype":"bool","Args":"rotation uint16"},{"Uniquefunname":"func sortMonitorsByID(monitors []*Monitor)","Funname":"display.sortMonitorsByID","Returntype":"","Args":"monitors []*Monitor"},{"Uniquefunname":"func doAction(cmd string) error","Funname":"doAction","Returntype":"error","Args":"cmd string"},{"Uniquefunname":"func filterModeInfos(modes []ModeInfo) []ModeInfo","Funname":"filterModeInfos","Returntype":"[]ModeInfo","Args":"modes []ModeInfo"},{"Uniquefunname":"func findFirstMode(modes []ModeInfo, fn func(mode ModeInfo) bool) *ModeInfo","Funname":"findFirstMode","Returntype":"*ModeInfo","Args":"modes []ModeInfo, fn func(mode ModeInfo) bool"},{"Uniquefunname":"func formatRate(v float64) string","Funname":"formatRate","Returntype":"string","Args":"v float64"},{"Uniquefunname":"func getConfigVersion(filename string) (string, error)","Funname":"getConfigVersion","Returntype":"(string, error)","Args":"filename string"},{"Uniquefunname":"func getMaxAreaSize(sizes []Size) Size","Funname":"getMaxAreaSize","Returntype":"Size","Args":"sizes []Size"},{"Uniquefunname":"func getMinIDMonitor(monitors []*Monitor) *Monitor","Funname":"getMinIDMonitor","Returntype":"*Monitor","Args":"monitors []*Monitor"},{"Uniquefunname":"func getMonitorsCommonSizes(monitors []*Monitor) []Size","Funname":"getMonitorsCommonSizes","Returntype":"[]Size","Args":"monitors []*Monitor"},{"Uniquefunname":"func getSizeModeMap(modes []ModeInfo) map[Size][]uint32","Funname":"getSizeModeMap","Returntype":"map[Size][]uint32","Args":"modes []ModeInfo"},{"Uniquefunname":"func guassPrimaryMonitor(monitors []*Monitor) *Monitor","Funname":"guassPrimaryMonitor","Returntype":"*Monitor","Args":"monitors []*Monitor"},{"Uniquefunname":"func isBuiltinOutput(name string) bool","Funname":"isBuiltinOutput","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func isDigit(b byte) bool","Funname":"isDigit","Returntype":"bool","Args":"b byte"},{"Uniquefunname":"func jsonMarshal(v interface","Funname":"jsonMarshal","Returntype":"string","Args":"v interface{}"},{"Uniquefunname":"func jsonUnmarshal(data string, ret interface","Funname":"jsonUnmarshal","Returntype":"error","Args":"data string, ret interface{}"},{"Uniquefunname":"func needSwapWidthHeight(rotation uint16) bool","Funname":"needSwapWidthHeight","Returntype":"bool","Args":"rotation uint16"},{"Uniquefunname":"func sortMonitorsByID(monitors []*Monitor)","Funname":"sortMonitorsByID","Returntype":"","Args":"monitors []*Monitor"}],"Records":[{"Name":"struct:display.Size","Fields":["display.Size.height uint16","display.Size.width uint16"]},{"Name":"var:display","Fields":["display.regMode"]}]}
{"Filepath":"wl_display/brightness/brightness.go","Functions":[{"Uniquefunname":"func Get(setter string, isButiltin bool, outputId uint32, conn *x.Conn) (float64, error)","Funname":"Get","Returntype":"(float64, error)","Args":"setter string, isButiltin bool, outputId uint32, conn *x.Conn"},{"Uniquefunname":"func GetBacklightController(outputId uint32, conn *x.Conn) (*displayBl.Controller, error)","Funname":"GetBacklightController","Returntype":"(*displayBl.Controller, error)","Args":"outputId uint32, conn *x.Conn"},{"Uniquefunname":"func InitBacklightHelper()","Funname":"InitBacklightHelper","Returntype":"","Args":""},{"Uniquefunname":"func Set(value float64, setter string, isBuiltin bool, outputId uint32, conn *x.Conn) error","Funname":"Set","Returntype":"error","Args":"value float64, setter string, isBuiltin bool, outputId uint32, conn *x.Conn"},{"Uniquefunname":"func _getBacklight(controller *displayBl.Controller) (float64, error)","Funname":"_getBacklight","Returntype":"(float64, error)","Args":"controller *displayBl.Controller"},{"Uniquefunname":"func _setBacklight(value float64, controller *displayBl.Controller) error","Funname":"_setBacklight","Returntype":"error","Args":"value float64, controller *displayBl.Controller"},{"Uniquefunname":"func Get(setter string, isButiltin bool, outputId uint32, conn *x.Conn) (float64, error)","Funname":"brightness.Get","Returntype":"(float64, error)","Args":"setter string, isButiltin bool, outputId uint32, conn *x.Conn"},{"Uniquefunname":"func GetBacklightController(outputId uint32, conn *x.Conn) (*displayBl.Controller, error)","Funname":"brightness.GetBacklightController","Returntype":"(*displayBl.Controller, error)","Args":"outputId uint32, conn *x.Conn"},{"Uniquefunname":"func InitBacklightHelper()","Funname":"brightness.InitBacklightHelper","Returntype":"","Args":""},{"Uniquefunname":"func Set(value float64, setter string, isBuiltin bool, outputId uint32, conn *x.Conn) error","Funname":"brightness.Set","Returntype":"error","Args":"value float64, setter string, isBuiltin bool, outputId uint32, conn *x.Conn"},{"Uniquefunname":"func _getBacklight(controller *displayBl.Controller) (float64, error)","Funname":"brightness._getBacklight","Returntype":"(float64, error)","Args":"controller *displayBl.Controller"},{"Uniquefunname":"func _setBacklight(value float64, controller *displayBl.Controller) error","Funname":"brightness._setBacklight","Returntype":"error","Args":"value float64, controller *displayBl.Controller"},{"Uniquefunname":"func genGammaRamp(size uint16, brightness float64) (red, green, blue []uint16)","Funname":"brightness.genGammaRamp","Returntype":"(red, green, blue []uint16)","Args":"size uint16, brightness float64"},{"Uniquefunname":"func getBacklight(output randr.Output, conn *x.Conn) (float64, error)","Funname":"brightness.getBacklight","Returntype":"(float64, error)","Args":"output randr.Output, conn *x.Conn"},{"Uniquefunname":"func getBacklightController(output randr.Output, conn *x.Conn) (*displayBl.Controller, error)","Funname":"brightness.getBacklightController","Returntype":"(*displayBl.Controller, error)","Args":"output randr.Output, conn *x.Conn"},{"Uniquefunname":"func getBacklightControllerOnlyOne() (*displayBl.Controller, error)","Funname":"brightness.getBacklightControllerOnlyOne","Returntype":"(*displayBl.Controller, error)","Args":""},{"Uniquefunname":"func getBacklightOnlyOne() (float64, error)","Funname":"brightness.getBacklightOnlyOne","Returntype":"(float64, error)","Args":""},{"Uniquefunname":"func getHelper() *backlight.Backlight","Funname":"brightness.getHelper","Returntype":"*backlight.Backlight","Args":""},{"Uniquefunname":"func init()","Funname":"brightness.init","Returntype":"","Args":""},{"Uniquefunname":"func setBacklight(value float64, output randr.Output, conn *x.Conn) error","Funname":"brightness.setBacklight","Returntype":"error","Args":"value float64, output randr.Output, conn *x.Conn"},{"Uniquefunname":"func setBacklightOnlyOne(value float64) error","Funname":"brightness.setBacklightOnlyOne","Returntype":"error","Args":"value float64"},{"Uniquefunname":"func setOutputCrtcGamma(value float64, output randr.Output, conn *x.Conn) error","Funname":"brightness.setOutputCrtcGamma","Returntype":"error","Args":"value float64, output randr.Output, conn *x.Conn"},{"Uniquefunname":"func supportBacklight(output randr.Output, conn *x.Conn) bool","Funname":"brightness.supportBacklight","Returntype":"bool","Args":"output randr.Output, conn *x.Conn"},{"Uniquefunname":"func genGammaRamp(size uint16, brightness float64) (red, green, blue []uint16)","Funname":"genGammaRamp","Returntype":"(red, green, blue []uint16)","Args":"size uint16, brightness float64"},{"Uniquefunname":"func getBacklight(output randr.Output, conn *x.Conn) (float64, error)","Funname":"getBacklight","Returntype":"(float64, error)","Args":"output randr.Output, conn *x.Conn"},{"Uniquefunname":"func getBacklightController(output randr.Output, conn *x.Conn) (*displayBl.Controller, error)","Funname":"getBacklightController","Returntype":"(*displayBl.Controller, error)","Args":"output randr.Output, conn *x.Conn"},{"Uniquefunname":"func getBacklightControllerOnlyOne() (*displayBl.Controller, error)","Funname":"getBacklightControllerOnlyOne","Returntype":"(*displayBl.Controller, error)","Args":""},{"Uniquefunname":"func getBacklightOnlyOne() (float64, error)","Funname":"getBacklightOnlyOne","Returntype":"(float64, error)","Args":""},{"Uniquefunname":"func getHelper() *backlight.Backlight","Funname":"getHelper","Returntype":"*backlight.Backlight","Args":""},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func setBacklight(value float64, output randr.Output, conn *x.Conn) error","Funname":"setBacklight","Returntype":"error","Args":"value float64, output randr.Output, conn *x.Conn"},{"Uniquefunname":"func setBacklightOnlyOne(value float64) error","Funname":"setBacklightOnlyOne","Returntype":"error","Args":"value float64"},{"Uniquefunname":"func setOutputCrtcGamma(value float64, output randr.Output, conn *x.Conn) error","Funname":"setOutputCrtcGamma","Returntype":"error","Args":"value float64, output randr.Output, conn *x.Conn"},{"Uniquefunname":"func supportBacklight(output randr.Output, conn *x.Conn) bool","Funname":"supportBacklight","Returntype":"bool","Args":"output randr.Output, conn *x.Conn"}],"Records":[{"Name":"const:brightness","Fields":["brightness.SetterAuto","brightness.SetterBacklight","brightness.SetterGamma"]},{"Name":"var:brightness","Fields":["brightness.controllers","brightness.errNotFoundBacklightController","brightness.helper"]}]}
{"Filepath":"wl_display/ddewloutput/wloutput.go","Functions":[{"Uniquefunname":"func (modes OutputModeList) Current() *OutputMode","Funname":"Current","Returntype":"*OutputMode","Args":""},{"Uniquefunname":"func (list OutputList) Get(uuid string) *Output","Funname":"Get","Returntype":"*Output","Args":"uuid string"},{"Uniquefunname":"func GetScreenInfo() (*ScreenInfo, error)","Funname":"GetScreenInfo","Returntype":"(*ScreenInfo, error)","Args":""},{"Uniquefunname":"func (modes OutputModeList) Preferred() *OutputMode","Funname":"Preferred","Returntype":"*OutputMode","Args":""},{"Uniquefunname":"func (list OutputList) ScreenSize() (int32, int32)","Funname":"ScreenSize","Returntype":"(int32, int32)","Args":""},{"Uniquefunname":"func SetOutputs(list OutputList) error","Funname":"SetOutputs","Returntype":"error","Args":"list OutputList"},{"Uniquefunname":"func (f ModeFlag) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func GetScreenInfo() (*ScreenInfo, error)","Funname":"ddewloutput.GetScreenInfo","Returntype":"(*ScreenInfo, error)","Args":""},{"Uniquefunname":"func (f ModeFlag) String() string","Funname":"ddewloutput.ModeFlag.String","Returntype":"string","Args":""},{"Uniquefunname":"func (list OutputList) Get(uuid string) *Output","Funname":"ddewloutput.OutputList.Get","Returntype":"*Output","Args":"uuid string"},{"Uniquefunname":"func (list OutputList) ScreenSize() (int32, int32)","Funname":"ddewloutput.OutputList.ScreenSize","Returntype":"(int32, int32)","Args":""},{"Uniquefunname":"func (modes OutputModeList) Current() *OutputMode","Funname":"ddewloutput.OutputModeList.Current","Returntype":"*OutputMode","Args":""},{"Uniquefunname":"func (modes OutputModeList) Preferred() *OutputMode","Funname":"ddewloutput.OutputModeList.Preferred","Returntype":"*OutputMode","Args":""},{"Uniquefunname":"func SetOutputs(list OutputList) error","Funname":"ddewloutput.SetOutputs","Returntype":"error","Args":"list OutputList"},{"Uniquefunname":"func doSetOutput(info *Output) error","Funname":"ddewloutput.doSetOutput","Returntype":"error","Args":"info *Output"},{"Uniquefunname":"func parseWLOutputData(data []byte) (OutputList, error)","Funname":"ddewloutput.parseWLOutputData","Returntype":"(OutputList, error)","Args":"data []byte"},{"Uniquefunname":"func parseWLOutputFirstLine(info *Output, line string) error","Funname":"ddewloutput.parseWLOutputFirstLine","Returntype":"error","Args":"info *Output, line string"},{"Uniquefunname":"func parseWLOutputPosition(info *Output, str string) error","Funname":"ddewloutput.parseWLOutputPosition","Returntype":"error","Args":"info *Output, str string"},{"Uniquefunname":"func parsetWLOutputModeLine(line string) (*OutputMode, error)","Funname":"ddewloutput.parsetWLOutputModeLine","Returntype":"(*OutputMode, error)","Args":"line string"},{"Uniquefunname":"func strToFloat64(value *float64, str, errFmt string) error","Funname":"ddewloutput.strToFloat64","Returntype":"error","Args":"value *float64, str, errFmt string"},{"Uniquefunname":"func strToInt32(value *int32, str, errFmt string) error","Funname":"ddewloutput.strToInt32","Returntype":"error","Args":"value *int32, str, errFmt string"},{"Uniquefunname":"func doSetOutput(info *Output) error","Funname":"doSetOutput","Returntype":"error","Args":"info *Output"},{"Uniquefunname":"func parseWLOutputData(data []byte) (OutputList, error)","Funname":"parseWLOutputData","Returntype":"(OutputList, error)","Args":"data []byte"},{"Uniquefunname":"func parseWLOutputFirstLine(info *Output, line string) error","Funname":"parseWLOutputFirstLine","Returntype":"error","Args":"info *Output, line string"},{"Uniquefunname":"func parseWLOutputPosition(info *Output, str string) error","Funname":"parseWLOutputPosition","Returntype":"error","Args":"info *Output, str string"},{"Uniquefunname":"func parsetWLOutputModeLine(line string) (*OutputMode, error)","Funname":"parsetWLOutputModeLine","Returntype":"(*OutputMode, error)","Args":"line string"},{"Uniquefunname":"func strToFloat64(value *float64, str, errFmt string) error","Funname":"strToFloat64","Returntype":"error","Args":"value *float64, str, errFmt string"},{"Uniquefunname":"func strToInt32(value *int32, str, errFmt string) error","Funname":"strToInt32","Returntype":"error","Args":"value *int32, str, errFmt string"}],"Records":[{"Name":"const:ddewloutput","Fields":["ddewloutput.ModeFlagCurrent","ddewloutput.ModeFlagNone","ddewloutput.ModeFlagPreferred","ddewloutput.ddeWLOutputCmd"]},{"Name":"struct:ddewloutput.Output","Fields":["ddewloutput.Output.Enabled bool","ddewloutput.Output.Height int32","ddewloutput.Output.Manufacturer string","ddewloutput.Output.Modes OutputModeList","ddewloutput.Output.Name string","ddewloutput.Output.PhysHeight int32","ddewloutput.Output.PhysWidth int32","ddewloutput.Output.Primary bool","ddewloutput.Output.Refresh float64","ddewloutput.Output.ScaleF float64","ddewloutput.Output.Transform int32","ddewloutput.Output.UUID string","ddewloutput.Output.Width int32","ddewloutput.Output.X int32","ddewloutput.Output.Y int32"]},{"Name":"struct:ddewloutput.OutputMode","Fields":["ddewloutput.OutputMode.Flag ModeFlag","ddewloutput.OutputMode.Height int32","ddewloutput.OutputMode.ID int32","ddewloutput.OutputMode.Refresh float64","ddewloutput.OutputMode.Width int32"]},{"Name":"struct:ddewloutput.ScreenInfo","Fields":["ddewloutput.ScreenInfo.Height int32","ddewloutput.ScreenInfo.Outputs OutputList","ddewloutput.ScreenInfo.Width int32"]}]}
{"Filepath":"wm/card_info.go","Functions":[{"Uniquefunname":"func (infos CardInfos) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func doSaveCardInfos(filename, data string) error","Funname":"doSaveCardInfos","Returntype":"error","Args":"filename, data string"},{"Uniquefunname":"func (infos CardInfos) genCardConfig() string","Funname":"genCardConfig","Returntype":"string","Args":""},{"Uniquefunname":"func getCardConfigSize(lines strv.Strv) (int, error)","Funname":"getCardConfigSize","Returntype":"(int, error)","Args":"lines strv.Strv"},{"Uniquefunname":"func getCardInfos() (CardInfos, error)","Funname":"getCardInfos","Returntype":"(CardInfos, error)","Args":""},{"Uniquefunname":"func getCardInfosPath() string","Funname":"getCardInfosPath","Returntype":"string","Args":""},{"Uniquefunname":"func loadCardInfosFromFile(filename string) (CardInfos, error)","Funname":"loadCardInfosFromFile","Returntype":"(CardInfos, error)","Args":"filename string"},{"Uniquefunname":"func (infos CardInfos) String() string","Funname":"wm.CardInfos.String","Returntype":"string","Args":""},{"Uniquefunname":"func (infos CardInfos) genCardConfig() string","Funname":"wm.CardInfos.genCardConfig","Returntype":"string","Args":""},{"Uniquefunname":"func doSaveCardInfos(filename, data string) error","Funname":"wm.doSaveCardInfos","Returntype":"error","Args":"filename, data string"},{"Uniquefunname":"func getCardConfigSize(lines strv.Strv) (int, error)","Funname":"wm.getCardConfigSize","Returntype":"(int, error)","Args":"lines strv.Strv"},{"Uniquefunname":"func getCardInfos() (CardInfos, error)","Funname":"wm.getCardInfos","Returntype":"(CardInfos, error)","Args":""},{"Uniquefunname":"func getCardInfosPath() string","Funname":"wm.getCardInfosPath","Returntype":"string","Args":""},{"Uniquefunname":"func loadCardInfosFromFile(filename string) (CardInfos, error)","Funname":"wm.loadCardInfosFromFile","Returntype":"(CardInfos, error)","Args":"filename string"}],"Records":[{"Name":"struct:wm.CardInfo","Fields":["wm.CardInfo.DevID string","wm.CardInfo.VendorID string"]},{"Name":"const:wm","Fields":["wm.swCardPath"]}]}
{"Filepath":"wm/driver.go","Functions":[{"Uniquefunname":"func correctWMByEnv(video int, good *bool) error","Funname":"correctWMByEnv","Returntype":"error","Args":"video int, good *bool"},{"Uniquefunname":"func getVideoEnv() (int, error)","Funname":"getVideoEnv","Returntype":"(int, error)","Args":""},{"Uniquefunname":"func isCardExists(ids []int, drivers []string) bool","Funname":"isCardExists","Returntype":"bool","Args":"ids []int, drivers []string"},{"Uniquefunname":"func isDeviceViable(id int) bool","Funname":"isDeviceViable","Returntype":"bool","Args":"id int"},{"Uniquefunname":"func isDriverLoadedCorrectly() bool","Funname":"isDriverLoadedCorrectly","Returntype":"bool","Args":""},{"Uniquefunname":"func isRadeonDRI() bool","Funname":"isRadeonDRI","Returntype":"bool","Args":""},{"Uniquefunname":"func isRadeonExists() bool","Funname":"isRadeonExists","Returntype":"bool","Args":""},{"Uniquefunname":"func correctWMByEnv(video int, good *bool) error","Funname":"wm.correctWMByEnv","Returntype":"error","Args":"video int, good *bool"},{"Uniquefunname":"func getVideoEnv() (int, error)","Funname":"wm.getVideoEnv","Returntype":"(int, error)","Args":""},{"Uniquefunname":"func isCardExists(ids []int, drivers []string) bool","Funname":"wm.isCardExists","Returntype":"bool","Args":"ids []int, drivers []string"},{"Uniquefunname":"func isDeviceViable(id int) bool","Funname":"wm.isDeviceViable","Returntype":"bool","Args":"id int"},{"Uniquefunname":"func isDriverLoadedCorrectly() bool","Funname":"wm.isDriverLoadedCorrectly","Returntype":"bool","Args":""},{"Uniquefunname":"func isRadeonDRI() bool","Funname":"wm.isRadeonDRI","Returntype":"bool","Args":""},{"Uniquefunname":"func isRadeonExists() bool","Funname":"wm.isRadeonExists","Returntype":"bool","Args":""}],"Records":[{"Name":"const:wm","Fields":["wm.envAMD","wm.envIntel","wm.envNvidia","wm.envUnknown","wm.envVirtualbox","wm.envVmware"]}]}
{"Filepath":"wm/platform.go","Functions":[{"Uniquefunname":"func getPlatform() (int, error)","Funname":"getPlatform","Returntype":"(int, error)","Args":""},{"Uniquefunname":"func reduceAnimations(v bool) error","Funname":"reduceAnimations","Returntype":"error","Args":"v bool"},{"Uniquefunname":"func setupSWPlatform() error","Funname":"setupSWPlatform","Returntype":"error","Args":""},{"Uniquefunname":"func getPlatform() (int, error)","Funname":"wm.getPlatform","Returntype":"(int, error)","Args":""},{"Uniquefunname":"func reduceAnimations(v bool) error","Funname":"wm.reduceAnimations","Returntype":"error","Args":"v bool"},{"Uniquefunname":"func setupSWPlatform() error","Funname":"wm.setupSWPlatform","Returntype":"error","Args":""}],"Records":[{"Name":"const:wm","Fields":["wm.platformARM","wm.platformMIPS","wm.platformSW","wm.platformUnknown","wm.platformX86"]}]}
{"Filepath":"wm/sogou.go","Functions":[{"Uniquefunname":"func getSogouConfigPath() string","Funname":"getSogouConfigPath","Returntype":"string","Args":""},{"Uniquefunname":"func getSogouSkin(filename string) (string, error)","Funname":"getSogouSkin","Returntype":"(string, error)","Args":"filename string"},{"Uniquefunname":"func setSogouSkin(skin, filename string) error","Funname":"setSogouSkin","Returntype":"error","Args":"skin, filename string"},{"Uniquefunname":"func getSogouConfigPath() string","Funname":"wm.getSogouConfigPath","Returntype":"string","Args":""},{"Uniquefunname":"func getSogouSkin(filename string) (string, error)","Funname":"wm.getSogouSkin","Returntype":"(string, error)","Args":"filename string"},{"Uniquefunname":"func setSogouSkin(skin, filename string) error","Funname":"wm.setSogouSkin","Returntype":"error","Args":"skin, filename string"}],"Records":[{"Name":"const:wm","Fields":["wm.sgDefaultSkin","wm.sgGroupBase","wm.sgKeyCurtSkin","wm.sogouConfigPath"]}]}
{"Filepath":"wm/switcher.go","Functions":[{"Uniquefunname":"func (s *Switcher) AllowSwitch() (bool, *dbus.Error)","Funname":"AllowSwitch","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (s *Switcher) CurrentWM() (string, *dbus.Error)","Funname":"CurrentWM","Returntype":"(string, *dbus.Error)","Args":""},{"Uniquefunname":"func (s *Switcher) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Switcher) RequestSwitchWM() *dbus.Error","Funname":"RequestSwitchWM","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (s *Switcher) RestartWM() *dbus.Error","Funname":"RestartWM","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (s *Switcher) Start2DWM() *dbus.Error","Funname":"Start2DWM","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (s *Switcher) adjustSogouSkin()","Funname":"adjustSogouSkin","Returntype":"","Args":""},{"Uniquefunname":"func (s *Switcher) allowSwitch() bool","Funname":"allowSwitch","Returntype":"bool","Args":""},{"Uniquefunname":"func (s *Switcher) emitSignalWMChanged(wm string)","Funname":"emitSignalWMChanged","Returntype":"","Args":"wm string"},{"Uniquefunname":"func (s *Switcher) getNextWM() string","Funname":"getNextWM","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Switcher) getWM() string","Funname":"getWM","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Switcher) init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func (s *Switcher) initUserConfig()","Funname":"initUserConfig","Returntype":"","Args":""},{"Uniquefunname":"func (s *Switcher) isCardChanged() (change bool)","Funname":"isCardChanged","Returntype":"(change bool)","Args":""},{"Uniquefunname":"func (s *Switcher) isSupportRun3dWM() bool","Funname":"isSupportRun3dWM","Returntype":"bool","Args":""},{"Uniquefunname":"func (s *Switcher) listenStartupReady()","Funname":"listenStartupReady","Returntype":"","Args":""},{"Uniquefunname":"func (s *Switcher) listenWMChanged()","Funname":"listenWMChanged","Returntype":"","Args":""},{"Uniquefunname":"func (s *Switcher) runWM(wm string, replace bool) error","Funname":"runWM","Returntype":"error","Args":"wm string, replace bool"},{"Uniquefunname":"func (s *Switcher) setCurrentWM(name string)","Funname":"setCurrentWM","Returntype":"","Args":"name string"},{"Uniquefunname":"func (s *Switcher) shouldWait() bool","Funname":"shouldWait","Returntype":"bool","Args":""},{"Uniquefunname":"func showOSD(name string) error","Funname":"showOSD","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (s *Switcher) supportRunGoodWM() bool","Funname":"supportRunGoodWM","Returntype":"bool","Args":""},{"Uniquefunname":"func (s *Switcher) AllowSwitch() (bool, *dbus.Error)","Funname":"wm.Switcher.AllowSwitch","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (s *Switcher) CurrentWM() (string, *dbus.Error)","Funname":"wm.Switcher.CurrentWM","Returntype":"(string, *dbus.Error)","Args":""},{"Uniquefunname":"func (s *Switcher) GetInterfaceName() string","Funname":"wm.Switcher.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Switcher) RequestSwitchWM() *dbus.Error","Funname":"wm.Switcher.RequestSwitchWM","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (s *Switcher) RestartWM() *dbus.Error","Funname":"wm.Switcher.RestartWM","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (s *Switcher) Start2DWM() *dbus.Error","Funname":"wm.Switcher.Start2DWM","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (s *Switcher) adjustSogouSkin()","Funname":"wm.Switcher.adjustSogouSkin","Returntype":"","Args":""},{"Uniquefunname":"func (s *Switcher) allowSwitch() bool","Funname":"wm.Switcher.allowSwitch","Returntype":"bool","Args":""},{"Uniquefunname":"func (s *Switcher) emitSignalWMChanged(wm string)","Funname":"wm.Switcher.emitSignalWMChanged","Returntype":"","Args":"wm string"},{"Uniquefunname":"func (s *Switcher) getNextWM() string","Funname":"wm.Switcher.getNextWM","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Switcher) getWM() string","Funname":"wm.Switcher.getWM","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Switcher) init()","Funname":"wm.Switcher.init","Returntype":"","Args":""},{"Uniquefunname":"func (s *Switcher) initUserConfig()","Funname":"wm.Switcher.initUserConfig","Returntype":"","Args":""},{"Uniquefunname":"func (s *Switcher) isCardChanged() (change bool)","Funname":"wm.Switcher.isCardChanged","Returntype":"(change bool)","Args":""},{"Uniquefunname":"func (s *Switcher) isSupportRun3dWM() bool","Funname":"wm.Switcher.isSupportRun3dWM","Returntype":"bool","Args":""},{"Uniquefunname":"func (s *Switcher) listenStartupReady()","Funname":"wm.Switcher.listenStartupReady","Returntype":"","Args":""},{"Uniquefunname":"func (s *Switcher) listenWMChanged()","Funname":"wm.Switcher.listenWMChanged","Returntype":"","Args":""},{"Uniquefunname":"func (s *Switcher) runWM(wm string, replace bool) error","Funname":"wm.Switcher.runWM","Returntype":"error","Args":"wm string, replace bool"},{"Uniquefunname":"func (s *Switcher) setCurrentWM(name string)","Funname":"wm.Switcher.setCurrentWM","Returntype":"","Args":"name string"},{"Uniquefunname":"func (s *Switcher) shouldWait() bool","Funname":"wm.Switcher.shouldWait","Returntype":"bool","Args":""},{"Uniquefunname":"func (s *Switcher) supportRunGoodWM() bool","Funname":"wm.Switcher.supportRunGoodWM","Returntype":"bool","Args":""},{"Uniquefunname":"func showOSD(name string) error","Funname":"wm.showOSD","Returntype":"error","Args":"name string"}],"Records":[{"Name":"struct:wm.Switcher","Fields":["wm.Switcher.conn *x.Conn","wm.Switcher.currentWM string","wm.Switcher.logger *log.Logger","wm.Switcher.methods *struct { AllowSwitch func() `out:\"allow\"`; CurrentWM func() `out:\"wmName\"`; }","wm.Switcher.mu sync.Mutex","wm.Switcher.service *dbusutil.Service","wm.Switcher.sigLoop *dbusutil.SignalLoop","wm.Switcher.signals *struct { WMChanged struct { name string; }; }","wm.Switcher.userConfig *userConfig","wm.Switcher.wm *libwm.Wm","wm.Switcher.wmChooserLaunched bool","wm.Switcher.workability3dWM int"]},{"Name":"const:wm","Fields":["wm.deepin2DWM","wm.deepin3DWM","wm.osdSwitchWMError","wm.swDBusDest","wm.swDBusIFC","wm.swDBusPath","wm.unknownWM","wm.workabilityAble","wm.workabilityNotAble","wm.workabilityUnknown"]},{"Name":"var:wm","Fields":["wm.wmNameMap"]}]}
{"Filepath":"wm/switcher_config.go","Functions":[{"Uniquefunname":"func getUserConfigPath() string","Funname":"getUserConfigPath","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Switcher) loadUserConfig() error","Funname":"loadUserConfig","Returntype":"error","Args":""},{"Uniquefunname":"func loadUserConfig(filename string) (*userConfig, error)","Funname":"loadUserConfig","Returntype":"(*userConfig, error)","Args":"filename string"},{"Uniquefunname":"func (s *Switcher) saveUserConfig()","Funname":"saveUserConfig","Returntype":"","Args":""},{"Uniquefunname":"func saveUserConfig(filename string, v *userConfig) error","Funname":"saveUserConfig","Returntype":"error","Args":"filename string, v *userConfig"},{"Uniquefunname":"func (s *Switcher) setLastWM(v string)","Funname":"setLastWM","Returntype":"","Args":"v string"},{"Uniquefunname":"func (s *Switcher) loadUserConfig() error","Funname":"wm.Switcher.loadUserConfig","Returntype":"error","Args":""},{"Uniquefunname":"func (s *Switcher) saveUserConfig()","Funname":"wm.Switcher.saveUserConfig","Returntype":"","Args":""},{"Uniquefunname":"func (s *Switcher) setLastWM(v string)","Funname":"wm.Switcher.setLastWM","Returntype":"","Args":"v string"},{"Uniquefunname":"func getUserConfigPath() string","Funname":"wm.getUserConfigPath","Returntype":"string","Args":""},{"Uniquefunname":"func loadUserConfig(filename string) (*userConfig, error)","Funname":"wm.loadUserConfig","Returntype":"(*userConfig, error)","Args":"filename string"},{"Uniquefunname":"func saveUserConfig(filename string, v *userConfig) error","Funname":"wm.saveUserConfig","Returntype":"error","Args":"filename string, v *userConfig"}],"Records":[{"Name":"const:wm","Fields":["wm.userCfgPathSuffix"]},{"Name":"struct:wm.userConfig","Fields":["wm.userConfig.LastWM string","wm.userConfig.Wait bool"]}]}
{"Filepath":"wm/wm.go","Functions":[{"Uniquefunname":"func GetWM() string","Funname":"GetWM","Returntype":"string","Args":""},{"Uniquefunname":"func ShouldWait() bool","Funname":"ShouldWait","Returntype":"bool","Args":""},{"Uniquefunname":"func Start(conn *x.Conn, logger *log.Logger, wmChooserLaunched bool, service *dbusutil.Service)error","Funname":"Start","Returntype":"error","Args":"conn *x.Conn, logger *log.Logger, wmChooserLaunched bool, service *dbusutil.Service"},{"Uniquefunname":"func GetWM() string","Funname":"wm.GetWM","Returntype":"string","Args":""},{"Uniquefunname":"func ShouldWait() bool","Funname":"wm.ShouldWait","Returntype":"bool","Args":""},{"Uniquefunname":"func wm.Start(conn *x.Conn, logger *log.Logger, wmChooserLaunched bool, service *dbusutil.Service)error","Funname":"wm.Start","Returntype":"error","Args":"conn *x.Conn, logger *log.Logger, wmChooserLaunched bool, service *dbusutil.Service"}],"Records":[{"Name":"var:wm","Fields":["wm._s"]}]}
{"Filepath":"wm_kwin/wm_kwin.go","Functions":[{"Uniquefunname":"func (s *Switcher) AllowSwitch() (bool, *dbus.Error)","Funname":"AllowSwitch","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (s *Switcher) CurrentWM() (string, *dbus.Error)","Funname":"CurrentWM","Returntype":"(string, *dbus.Error)","Args":""},{"Uniquefunname":"func (s *Switcher) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Switcher) RequestSwitchWM() *dbus.Error","Funname":"RequestSwitchWM","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func Start(l *log.Logger) error","Funname":"Start","Returntype":"error","Args":"l *log.Logger"},{"Uniquefunname":"func SyncWmChooserChoice()","Funname":"SyncWmChooserChoice","Returntype":"","Args":""},{"Uniquefunname":"func (s *Switcher) emitSignalWMChanged(wmName string)","Funname":"emitSignalWMChanged","Returntype":"","Args":"wmName string"},{"Uniquefunname":"func getWMSwitchLastWm() (lastWm string, err error)","Funname":"getWMSwitchLastWm","Returntype":"(lastWm string, err error)","Args":""},{"Uniquefunname":"func (s *Switcher) listenDBusSignal()","Funname":"listenDBusSignal","Returntype":"","Args":""},{"Uniquefunname":"func newSwitcher(service *dbusutil.Service) *Switcher","Funname":"newSwitcher","Returntype":"*Switcher","Args":"service *dbusutil.Service"},{"Uniquefunname":"func (s *Switcher) requestSwitchWM() error","Funname":"requestSwitchWM","Returntype":"error","Args":""},{"Uniquefunname":"func setCompositingEnabledInKWinRc(enabled bool) error","Funname":"setCompositingEnabledInKWinRc","Returntype":"error","Args":"enabled bool"},{"Uniquefunname":"func showOSD(name string) error","Funname":"showOSD","Returntype":"error","Args":"name string"},{"Uniquefunname":"func Start(l *log.Logger) error","Funname":"wm_kwin.Start","Returntype":"error","Args":"l *log.Logger"},{"Uniquefunname":"func (s *Switcher) AllowSwitch() (bool, *dbus.Error)","Funname":"wm_kwin.Switcher.AllowSwitch","Returntype":"(bool, *dbus.Error)","Args":""},{"Uniquefunname":"func (s *Switcher) CurrentWM() (string, *dbus.Error)","Funname":"wm_kwin.Switcher.CurrentWM","Returntype":"(string, *dbus.Error)","Args":""},{"Uniquefunname":"func (s *Switcher) GetInterfaceName() string","Funname":"wm_kwin.Switcher.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Switcher) RequestSwitchWM() *dbus.Error","Funname":"wm_kwin.Switcher.RequestSwitchWM","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (s *Switcher) emitSignalWMChanged(wmName string)","Funname":"wm_kwin.Switcher.emitSignalWMChanged","Returntype":"","Args":"wmName string"},{"Uniquefunname":"func (s *Switcher) listenDBusSignal()","Funname":"wm_kwin.Switcher.listenDBusSignal","Returntype":"","Args":""},{"Uniquefunname":"func (s *Switcher) requestSwitchWM() error","Funname":"wm_kwin.Switcher.requestSwitchWM","Returntype":"error","Args":""},{"Uniquefunname":"func SyncWmChooserChoice()","Funname":"wm_kwin.SyncWmChooserChoice","Returntype":"","Args":""},{"Uniquefunname":"func getWMSwitchLastWm() (lastWm string, err error)","Funname":"wm_kwin.getWMSwitchLastWm","Returntype":"(lastWm string, err error)","Args":""},{"Uniquefunname":"func newSwitcher(service *dbusutil.Service) *Switcher","Funname":"wm_kwin.newSwitcher","Returntype":"*Switcher","Args":"service *dbusutil.Service"},{"Uniquefunname":"func setCompositingEnabledInKWinRc(enabled bool) error","Funname":"wm_kwin.setCompositingEnabledInKWinRc","Returntype":"error","Args":"enabled bool"},{"Uniquefunname":"func showOSD(name string) error","Funname":"wm_kwin.showOSD","Returntype":"error","Args":"name string"}],"Records":[{"Name":"struct:wm_kwin.Switcher","Fields":["wm_kwin.Switcher.methods *struct { AllowSwitch func() `out:\"allow\"`; CurrentWM func() `out:\"wmName\"`; }","wm_kwin.Switcher.service *dbusutil.Service","wm_kwin.Switcher.signals *struct { WMChanged struct { wmName string; }; }","wm_kwin.Switcher.wm *wm.Wm"]},{"Name":"var:wm_kwin","Fields":["wm_kwin.logger"]},{"Name":"const:wm_kwin","Fields":["wm_kwin.osdSwitch2DWM","wm_kwin.osdSwitch3DWM","wm_kwin.osdSwitchWMError","wm_kwin.swDBusDest","wm_kwin.swDBusIFC","wm_kwin.swDBusPath","wm_kwin.wmName2D","wm_kwin.wmName3D"]}]}
{"Filepath":"xcursor/xcursor.go","Functions":[{"Uniquefunname":"func LoadAndApply(theme, name string, size int) error","Funname":"LoadAndApply","Returntype":"error","Args":"theme, name string, size int"},{"Uniquefunname":"func loadCursor(dpy *C.Display, theme, name string, size int) (C.Cursor, error)","Funname":"loadCursor","Returntype":"(C.Cursor, error)","Args":"dpy *C.Display, theme, name string, size int"},{"Uniquefunname":"func LoadAndApply(theme, name string, size int) error","Funname":"xcursor.LoadAndApply","Returntype":"error","Args":"theme, name string, size int"},{"Uniquefunname":"func loadCursor(dpy *C.Display, theme, name string, size int) (C.Cursor, error)","Funname":"xcursor.loadCursor","Returntype":"(C.Cursor, error)","Args":"dpy *C.Display, theme, name string, size int"}],"Records":null}
{"Filepath":"xsettings/scale.go","Functions":[{"Uniquefunname":"func cleanUpDdeEnv() error","Funname":"cleanUpDdeEnv","Returntype":"error","Args":""},{"Uniquefunname":"func (m *XSManager) emitSignalSetScaleFactor(done, emitSignal bool)","Funname":"emitSignalSetScaleFactor","Returntype":"","Args":"done, emitSignal bool"},{"Uniquefunname":"func (m *XSManager) endScaleFactorForPlymouth()","Funname":"endScaleFactorForPlymouth","Returntype":"","Args":""},{"Uniquefunname":"func getMapFirstValueSF(m map[string]float64) float64","Funname":"getMapFirstValueSF","Returntype":"float64","Args":"m map[string]float64"},{"Uniquefunname":"func getPlymouthTheme(file string) (string, error)","Funname":"getPlymouthTheme","Returntype":"(string, error)","Args":"file string"},{"Uniquefunname":"func getPlymouthThemeScaleFactor(theme string) int","Funname":"getPlymouthThemeScaleFactor","Returntype":"int","Args":"theme string"},{"Uniquefunname":"func getPrimaryScreenFromBus() (string, error)","Funname":"getPrimaryScreenFromBus","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func getPrimaryScreenName(xConn *x.Conn) (string, error)","Funname":"getPrimaryScreenName","Returntype":"(string, error)","Args":"xConn *x.Conn"},{"Uniquefunname":"func getQtThemeFile() string","Funname":"getQtThemeFile","Returntype":"string","Args":""},{"Uniquefunname":"func (m *XSManager) getScreenScaleFactors() map[string]float64","Funname":"getScreenScaleFactors","Returntype":"map[string]float64","Args":""},{"Uniquefunname":"func joinScreenScaleFactors(v map[string]float64) string","Funname":"joinScreenScaleFactors","Returntype":"string","Args":"v map[string]float64"},{"Uniquefunname":"func parseScreenFactors(str string) map[string]float64","Funname":"parseScreenFactors","Returntype":"map[string]float64","Args":"str string"},{"Uniquefunname":"func (m *XSManager) setScaleFactor(scale float64, emitSignal bool)","Funname":"setScaleFactor","Returntype":"","Args":"scale float64, emitSignal bool"},{"Uniquefunname":"func (m *XSManager) setScaleFactorForPlymouth(factor int, emitSignal bool)","Funname":"setScaleFactorForPlymouth","Returntype":"","Args":"factor int, emitSignal bool"},{"Uniquefunname":"func (m *XSManager) setScaleFactorForPlymouthReal(factor int, emitSignal bool)","Funname":"setScaleFactorForPlymouthReal","Returntype":"","Args":"factor int, emitSignal bool"},{"Uniquefunname":"func (m *XSManager) setScaleFactorWithoutNotify(scale float64) error","Funname":"setScaleFactorWithoutNotify","Returntype":"error","Args":"scale float64"},{"Uniquefunname":"func (m *XSManager) setScreenScaleFactors(factors map[string]float64, emitSignal bool) error","Funname":"setScreenScaleFactors","Returntype":"error","Args":"factors map[string]float64, emitSignal bool"},{"Uniquefunname":"func (m *XSManager) setScreenScaleFactorsForQt(factors map[string]float64) error","Funname":"setScreenScaleFactorsForQt","Returntype":"error","Args":"factors map[string]float64"},{"Uniquefunname":"func (m *XSManager) startScaleFactorForPlymouth(factor int, emitSignal bool)","Funname":"startScaleFactorForPlymouth","Returntype":"","Args":"factor int, emitSignal bool"},{"Uniquefunname":"func (m *XSManager) updateGreeterQtTheme(kf *keyfile.KeyFile) error","Funname":"updateGreeterQtTheme","Returntype":"error","Args":"kf *keyfile.KeyFile"},{"Uniquefunname":"func (m *XSManager) emitSignalSetScaleFactor(done, emitSignal bool)","Funname":"xsettings.XSManager.emitSignalSetScaleFactor","Returntype":"","Args":"done, emitSignal bool"},{"Uniquefunname":"func (m *XSManager) endScaleFactorForPlymouth()","Funname":"xsettings.XSManager.endScaleFactorForPlymouth","Returntype":"","Args":""},{"Uniquefunname":"func (m *XSManager) getScreenScaleFactors() map[string]float64","Funname":"xsettings.XSManager.getScreenScaleFactors","Returntype":"map[string]float64","Args":""},{"Uniquefunname":"func (m *XSManager) setScaleFactor(scale float64, emitSignal bool)","Funname":"xsettings.XSManager.setScaleFactor","Returntype":"","Args":"scale float64, emitSignal bool"},{"Uniquefunname":"func (m *XSManager) setScaleFactorForPlymouth(factor int, emitSignal bool)","Funname":"xsettings.XSManager.setScaleFactorForPlymouth","Returntype":"","Args":"factor int, emitSignal bool"},{"Uniquefunname":"func (m *XSManager) setScaleFactorForPlymouthReal(factor int, emitSignal bool)","Funname":"xsettings.XSManager.setScaleFactorForPlymouthReal","Returntype":"","Args":"factor int, emitSignal bool"},{"Uniquefunname":"func (m *XSManager) setScaleFactorWithoutNotify(scale float64) error","Funname":"xsettings.XSManager.setScaleFactorWithoutNotify","Returntype":"error","Args":"scale float64"},{"Uniquefunname":"func (m *XSManager) setScreenScaleFactors(factors map[string]float64, emitSignal bool) error","Funname":"xsettings.XSManager.setScreenScaleFactors","Returntype":"error","Args":"factors map[string]float64, emitSignal bool"},{"Uniquefunname":"func (m *XSManager) setScreenScaleFactorsForQt(factors map[string]float64) error","Funname":"xsettings.XSManager.setScreenScaleFactorsForQt","Returntype":"error","Args":"factors map[string]float64"},{"Uniquefunname":"func (m *XSManager) startScaleFactorForPlymouth(factor int, emitSignal bool)","Funname":"xsettings.XSManager.startScaleFactorForPlymouth","Returntype":"","Args":"factor int, emitSignal bool"},{"Uniquefunname":"func (m *XSManager) updateGreeterQtTheme(kf *keyfile.KeyFile) error","Funname":"xsettings.XSManager.updateGreeterQtTheme","Returntype":"error","Args":"kf *keyfile.KeyFile"},{"Uniquefunname":"func cleanUpDdeEnv() error","Funname":"xsettings.cleanUpDdeEnv","Returntype":"error","Args":""},{"Uniquefunname":"func getMapFirstValueSF(m map[string]float64) float64","Funname":"xsettings.getMapFirstValueSF","Returntype":"float64","Args":"m map[string]float64"},{"Uniquefunname":"func getPlymouthTheme(file string) (string, error)","Funname":"xsettings.getPlymouthTheme","Returntype":"(string, error)","Args":"file string"},{"Uniquefunname":"func getPlymouthThemeScaleFactor(theme string) int","Funname":"xsettings.getPlymouthThemeScaleFactor","Returntype":"int","Args":"theme string"},{"Uniquefunname":"func getPrimaryScreenFromBus() (string, error)","Funname":"xsettings.getPrimaryScreenFromBus","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func getPrimaryScreenName(xConn *x.Conn) (string, error)","Funname":"xsettings.getPrimaryScreenName","Returntype":"(string, error)","Args":"xConn *x.Conn"},{"Uniquefunname":"func getQtThemeFile() string","Funname":"xsettings.getQtThemeFile","Returntype":"string","Args":""},{"Uniquefunname":"func joinScreenScaleFactors(v map[string]float64) string","Funname":"xsettings.joinScreenScaleFactors","Returntype":"string","Args":"v map[string]float64"},{"Uniquefunname":"func parseScreenFactors(str string) map[string]float64","Funname":"xsettings.parseScreenFactors","Returntype":"map[string]float64","Args":"str string"}],"Records":[{"Name":"const:xsettings","Fields":["xsettings.EnvDeepinWineScale","xsettings.baseCursorSize","xsettings.gsKeyGtkCursorThemeSize","xsettings.gsKeyIndividualScaling","xsettings.gsKeyScaleFactor","xsettings.gsKeyWindowScale","xsettings.plymouthConfigFile","xsettings.qtThemeKeyScaleFactor","xsettings.qtThemeKeyScaleLogicalDpi","xsettings.qtThemeKeyScreenScaleFactors","xsettings.qtThemeSection"]},{"Name":"var:xsettings","Fields":["xsettings._sessionConn"]}]}
{"Filepath":"xsettings/xsettings.go","Functions":[{"Uniquefunname":"func (m *XSManager) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func GetScaleFactor() float64","Funname":"GetScaleFactor","Returntype":"float64","Args":""},{"Uniquefunname":"func (m *XSManager) NeedRestartOSD() bool","Funname":"NeedRestartOSD","Returntype":"bool","Args":""},{"Uniquefunname":"func NewXSManager(conn *x.Conn, recommendedScaleFactor float64, service *dbusutil.Service)(*XSManager, error)","Funname":"NewXSManager","Returntype":"(*XSManager, error)","Args":"conn *x.Conn, recommendedScaleFactor float64, service *dbusutil.Service"},{"Uniquefunname":"func Start(conn *x.Conn, l *log.Logger, recommendedScaleFactor float64, service *dbusutil.Service)(*XSManager, error)","Funname":"Start","Returntype":"(*XSManager, error)","Args":"conn *x.Conn, l *log.Logger, recommendedScaleFactor float64, service *dbusutil.Service"},{"Uniquefunname":"func (m *XSManager) adjustScaleFactor(recommendedScaleFactor float64)","Funname":"adjustScaleFactor","Returntype":"","Args":"recommendedScaleFactor float64"},{"Uniquefunname":"func getScaleFactor() float64","Funname":"getScaleFactor","Returntype":"float64","Args":""},{"Uniquefunname":"func (m *XSManager) getSettingsInSchema() []xsSetting","Funname":"getSettingsInSchema","Returntype":"[]xsSetting","Args":""},{"Uniquefunname":"func (m *XSManager) handleGSettingsChanged()","Funname":"handleGSettingsChanged","Returntype":"","Args":""},{"Uniquefunname":"func (m *XSManager) setSettings(settings []xsSetting) error","Funname":"setSettings","Returntype":"error","Args":"settings []xsSetting"},{"Uniquefunname":"func GetScaleFactor() float64","Funname":"xsettings.GetScaleFactor","Returntype":"float64","Args":""},{"Uniquefunname":"func xsettings.NewXSManager(conn *x.Conn, recommendedScaleFactor float64, service *dbusutil.Service)(*XSManager, error)","Funname":"xsettings.NewXSManager","Returntype":"(*XSManager, error)","Args":"conn *x.Conn, recommendedScaleFactor float64, service *dbusutil.Service"},{"Uniquefunname":"func xsettings.Start(conn *x.Conn, l *log.Logger, recommendedScaleFactor float64, service *dbusutil.Service)(*XSManager, error)","Funname":"xsettings.Start","Returntype":"(*XSManager, error)","Args":"conn *x.Conn, l *log.Logger, recommendedScaleFactor float64, service *dbusutil.Service"},{"Uniquefunname":"func (m *XSManager) GetInterfaceName() string","Funname":"xsettings.XSManager.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (m *XSManager) NeedRestartOSD() bool","Funname":"xsettings.XSManager.NeedRestartOSD","Returntype":"bool","Args":""},{"Uniquefunname":"func (m *XSManager) adjustScaleFactor(recommendedScaleFactor float64)","Funname":"xsettings.XSManager.adjustScaleFactor","Returntype":"","Args":"recommendedScaleFactor float64"},{"Uniquefunname":"func (m *XSManager) getSettingsInSchema() []xsSetting","Funname":"xsettings.XSManager.getSettingsInSchema","Returntype":"[]xsSetting","Args":""},{"Uniquefunname":"func (m *XSManager) handleGSettingsChanged()","Funname":"xsettings.XSManager.handleGSettingsChanged","Returntype":"","Args":""},{"Uniquefunname":"func (m *XSManager) setSettings(settings []xsSetting) error","Funname":"xsettings.XSManager.setSettings","Returntype":"error","Args":"settings []xsSetting"},{"Uniquefunname":"func getScaleFactor() float64","Funname":"xsettings.getScaleFactor","Returntype":"float64","Args":""}],"Records":[{"Name":"struct:xsettings.XSManager","Fields":["xsettings.XSManager.conn *x.Conn","xsettings.XSManager.greeter *greeter.Greeter","xsettings.XSManager.gs *gio.Settings","xsettings.XSManager.methods *struct { ListProps func() `out:\"props\"`; GetInteger func() `in:\"prop\" out:\"result\"`; SetInteger func() `in:\"prop,v\"`; GetString func() `in:\"prop\" out:\"result\"`; SetString func() `in:\"prop,v\"`; GetColor func() `in:\"prop\" out:\"result\"`; SetColor func() `in:\"prop,v\"`; GetScaleFactor func() `out:\"scale\"`; SetScaleFactor func() `in:\"scale\"`; GetScreenScaleFactors func() `out:\"factors\"`; SetScreenScaleFactors func() `in:\"factors\"`; }","xsettings.XSManager.owner x.Window","xsettings.XSManager.plymouthScaling bool","xsettings.XSManager.plymouthScalingMu sync.Mutex","xsettings.XSManager.plymouthScalingTasks []int","xsettings.XSManager.restartOSD bool","xsettings.XSManager.service *dbusutil.Service","xsettings.XSManager.settingsLocker sync.RWMutex","xsettings.XSManager.signals *struct { SetScaleFactorStarted, SetScaleFactorDone float64; }","xsettings.XSManager.sysDaemon *ddeSysDaemon.Daemon"]},{"Name":"var:xsettings","Fields":["xsettings._gs","xsettings.logger"]},{"Name":"const:xsettings","Fields":["xsettings.defaultScaleFactor","xsettings.xsDBusIFC","xsettings.xsDBusPath","xsettings.xsSchema"]},{"Name":"struct:xsettings.xsSetting","Fields":["xsettings.xsSetting.prop string","xsettings.xsSetting.sType uint8","xsettings.xsSetting.value interface{}"]}]}
{"Filepath":"xsettings/xsettings_dpi.go","Functions":[{"Uniquefunname":"func getFirefoxConfigs(dir string) ([]string, error)","Funname":"getFirefoxConfigs","Returntype":"([]string, error)","Args":"dir string"},{"Uniquefunname":"func setFirefoxDPI(value float64, src, dest string) error","Funname":"setFirefoxDPI","Returntype":"error","Args":"value float64, src, dest string"},{"Uniquefunname":"func (m *XSManager) updateDPI()","Funname":"updateDPI","Returntype":"","Args":""},{"Uniquefunname":"func (m *XSManager) updateFirefoxDPI()","Funname":"updateFirefoxDPI","Returntype":"","Args":""},{"Uniquefunname":"func (m *XSManager) updateXResources()","Funname":"updateXResources","Returntype":"","Args":""},{"Uniquefunname":"func (m *XSManager) updateDPI()","Funname":"xsettings.XSManager.updateDPI","Returntype":"","Args":""},{"Uniquefunname":"func (m *XSManager) updateFirefoxDPI()","Funname":"xsettings.XSManager.updateFirefoxDPI","Returntype":"","Args":""},{"Uniquefunname":"func (m *XSManager) updateXResources()","Funname":"xsettings.XSManager.updateXResources","Returntype":"","Args":""},{"Uniquefunname":"func getFirefoxConfigs(dir string) ([]string, error)","Funname":"xsettings.getFirefoxConfigs","Returntype":"([]string, error)","Args":"dir string"},{"Uniquefunname":"func setFirefoxDPI(value float64, src, dest string) error","Funname":"xsettings.setFirefoxDPI","Returntype":"error","Args":"value float64, src, dest string"}],"Records":[{"Name":"const:xsettings","Fields":["xsettings.DPI_FALLBACK","xsettings.HIDPI_LIMIT","xsettings.ffKeyPixels"]},{"Name":"var:xsettings","Fields":["xsettings.ffDir"]}]}
{"Filepath":"xsettings/xsettings_ifc.go","Functions":[{"Uniquefunname":"func (m *XSManager) GetColor(prop string) ([]uint16, *dbus.Error)","Funname":"GetColor","Returntype":"([]uint16, *dbus.Error)","Args":"prop string"},{"Uniquefunname":"func (m *XSManager) GetInteger(prop string) (int32, *dbus.Error)","Funname":"GetInteger","Returntype":"(int32, *dbus.Error)","Args":"prop string"},{"Uniquefunname":"func (m *XSManager) GetScaleFactor() (float64, *dbus.Error)","Funname":"GetScaleFactor","Returntype":"(float64, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *XSManager) GetScreenScaleFactors() (map[string]float64, *dbus.Error)","Funname":"GetScreenScaleFactors","Returntype":"(map[string]float64, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *XSManager) GetString(prop string) (string, *dbus.Error)","Funname":"GetString","Returntype":"(string, *dbus.Error)","Args":"prop string"},{"Uniquefunname":"func (m *XSManager) GetStringInternal(prop string) (string, error)","Funname":"GetStringInternal","Returntype":"(string, error)","Args":"prop string"},{"Uniquefunname":"func (m *XSManager) ListProps() (string, *dbus.Error)","Funname":"ListProps","Returntype":"(string, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *XSManager) SetColor(prop string, v []uint16) *dbus.Error","Funname":"SetColor","Returntype":"*dbus.Error","Args":"prop string, v []uint16"},{"Uniquefunname":"func (m *XSManager) SetInteger(prop string, v int32) *dbus.Error","Funname":"SetInteger","Returntype":"*dbus.Error","Args":"prop string, v int32"},{"Uniquefunname":"func (m *XSManager) SetScaleFactor(scale float64) *dbus.Error","Funname":"SetScaleFactor","Returntype":"*dbus.Error","Args":"scale float64"},{"Uniquefunname":"func (m *XSManager) SetScreenScaleFactors(factors map[string]float64) *dbus.Error","Funname":"SetScreenScaleFactors","Returntype":"*dbus.Error","Args":"factors map[string]float64"},{"Uniquefunname":"func (m *XSManager) SetString(prop, v string) *dbus.Error","Funname":"SetString","Returntype":"*dbus.Error","Args":"prop, v string"},{"Uniquefunname":"func (m *XSManager) SetStringInternal(prop, v string) error","Funname":"SetStringInternal","Returntype":"error","Args":"prop, v string"},{"Uniquefunname":"func (m *XSManager) getSettingValue(prop string) (interface","Funname":"getSettingValue","Returntype":"(interface{}, uint8, error)","Args":"prop string"},{"Uniquefunname":"func (m *XSManager) setGSettingsByXProp(prop string, v interface","Funname":"setGSettingsByXProp","Returntype":"error","Args":"prop string, v interface{}"},{"Uniquefunname":"func (m *XSManager) GetColor(prop string) ([]uint16, *dbus.Error)","Funname":"xsettings.XSManager.GetColor","Returntype":"([]uint16, *dbus.Error)","Args":"prop string"},{"Uniquefunname":"func (m *XSManager) GetInteger(prop string) (int32, *dbus.Error)","Funname":"xsettings.XSManager.GetInteger","Returntype":"(int32, *dbus.Error)","Args":"prop string"},{"Uniquefunname":"func (m *XSManager) GetScaleFactor() (float64, *dbus.Error)","Funname":"xsettings.XSManager.GetScaleFactor","Returntype":"(float64, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *XSManager) GetScreenScaleFactors() (map[string]float64, *dbus.Error)","Funname":"xsettings.XSManager.GetScreenScaleFactors","Returntype":"(map[string]float64, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *XSManager) GetString(prop string) (string, *dbus.Error)","Funname":"xsettings.XSManager.GetString","Returntype":"(string, *dbus.Error)","Args":"prop string"},{"Uniquefunname":"func (m *XSManager) GetStringInternal(prop string) (string, error)","Funname":"xsettings.XSManager.GetStringInternal","Returntype":"(string, error)","Args":"prop string"},{"Uniquefunname":"func (m *XSManager) ListProps() (string, *dbus.Error)","Funname":"xsettings.XSManager.ListProps","Returntype":"(string, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *XSManager) SetColor(prop string, v []uint16) *dbus.Error","Funname":"xsettings.XSManager.SetColor","Returntype":"*dbus.Error","Args":"prop string, v []uint16"},{"Uniquefunname":"func (m *XSManager) SetInteger(prop string, v int32) *dbus.Error","Funname":"xsettings.XSManager.SetInteger","Returntype":"*dbus.Error","Args":"prop string, v int32"},{"Uniquefunname":"func (m *XSManager) SetScaleFactor(scale float64) *dbus.Error","Funname":"xsettings.XSManager.SetScaleFactor","Returntype":"*dbus.Error","Args":"scale float64"},{"Uniquefunname":"func (m *XSManager) SetScreenScaleFactors(factors map[string]float64) *dbus.Error","Funname":"xsettings.XSManager.SetScreenScaleFactors","Returntype":"*dbus.Error","Args":"factors map[string]float64"},{"Uniquefunname":"func (m *XSManager) SetString(prop, v string) *dbus.Error","Funname":"xsettings.XSManager.SetString","Returntype":"*dbus.Error","Args":"prop, v string"},{"Uniquefunname":"func (m *XSManager) SetStringInternal(prop, v string) error","Funname":"xsettings.XSManager.SetStringInternal","Returntype":"error","Args":"prop, v string"},{"Uniquefunname":"func (m *XSManager) getSettingValue(prop string) (interface","Funname":"xsettings.XSManager.getSettingValue","Returntype":"(interface{}, uint8, error)","Args":"prop string"},{"Uniquefunname":"func (m *XSManager) setGSettingsByXProp(prop string, v interface","Funname":"xsettings.XSManager.setGSettingsByXProp","Returntype":"error","Args":"prop string, v interface{}"}],"Records":[{"Name":"var:xsettings","Fields":["xsettings.errPropNotFound","xsettings.errPropTypeNotMatch"]}]}
{"Filepath":"xsettings/xsettings_info.go","Functions":[{"Uniquefunname":"func convertColorToStr(in interface","Funname":"convertColorToStr","Returntype":"(interface{}, error)","Args":"in interface{}"},{"Uniquefunname":"func convertDoubleToStr(in interface","Funname":"convertDoubleToStr","Returntype":"(interface{}, error)","Args":"in interface{}"},{"Uniquefunname":"func convertStrToColor(in interface","Funname":"convertStrToColor","Returntype":"(interface{}, error)","Args":"in interface{}"},{"Uniquefunname":"func convertStrToDouble(in interface","Funname":"convertStrToDouble","Returntype":"(interface{}, error)","Args":"in interface{}"},{"Uniquefunname":"func (infos typeGSKeyInfos) getByGSKey(key string) *typeGSKeyInfo","Funname":"getByGSKey","Returntype":"*typeGSKeyInfo","Args":"key string"},{"Uniquefunname":"func (infos typeGSKeyInfos) getByXSKey(key string) *typeGSKeyInfo","Funname":"getByXSKey","Returntype":"*typeGSKeyInfo","Args":"key string"},{"Uniquefunname":"func (info *typeGSKeyInfo) getKeySType() uint8","Funname":"getKeySType","Returntype":"uint8","Args":""},{"Uniquefunname":"func (info *typeGSKeyInfo) getValue(s *gio.Settings) (result interface","Funname":"getValue","Returntype":"(result interface{}, err error)","Args":"s *gio.Settings"},{"Uniquefunname":"func (info *typeGSKeyInfo) setValue(s *gio.Settings, v interface","Funname":"setValue","Returntype":"error","Args":"s *gio.Settings, v interface{}"},{"Uniquefunname":"func convertColorToStr(in interface","Funname":"xsettings.convertColorToStr","Returntype":"(interface{}, error)","Args":"in interface{}"},{"Uniquefunname":"func convertDoubleToStr(in interface","Funname":"xsettings.convertDoubleToStr","Returntype":"(interface{}, error)","Args":"in interface{}"},{"Uniquefunname":"func convertStrToColor(in interface","Funname":"xsettings.convertStrToColor","Returntype":"(interface{}, error)","Args":"in interface{}"},{"Uniquefunname":"func convertStrToDouble(in interface","Funname":"xsettings.convertStrToDouble","Returntype":"(interface{}, error)","Args":"in interface{}"},{"Uniquefunname":"func (info *typeGSKeyInfo) getKeySType() uint8","Funname":"xsettings.typeGSKeyInfo.getKeySType","Returntype":"uint8","Args":""},{"Uniquefunname":"func (info *typeGSKeyInfo) getValue(s *gio.Settings) (result interface","Funname":"xsettings.typeGSKeyInfo.getValue","Returntype":"(result interface{}, err error)","Args":"s *gio.Settings"},{"Uniquefunname":"func (info *typeGSKeyInfo) setValue(s *gio.Settings, v interface","Funname":"xsettings.typeGSKeyInfo.setValue","Returntype":"error","Args":"s *gio.Settings, v interface{}"},{"Uniquefunname":"func (infos typeGSKeyInfos) getByGSKey(key string) *typeGSKeyInfo","Funname":"xsettings.typeGSKeyInfos.getByGSKey","Returntype":"*typeGSKeyInfo","Args":"key string"},{"Uniquefunname":"func (infos typeGSKeyInfos) getByXSKey(key string) *typeGSKeyInfo","Funname":"xsettings.typeGSKeyInfos.getByXSKey","Returntype":"*typeGSKeyInfo","Args":"key string"}],"Records":[{"Name":"var:xsettings","Fields":["xsettings.gsInfos","xsettings.settingTypeColorVar"]},{"Name":"const:xsettings","Fields":["xsettings.gsKeyTypeBool","xsettings.gsKeyTypeDouble","xsettings.gsKeyTypeInt","xsettings.gsKeyTypeString"]},{"Name":"struct:xsettings.typeGSKeyInfo","Fields":["xsettings.typeGSKeyInfo.convertGsToXs func(interface{}) (interface{}, error)","xsettings.typeGSKeyInfo.convertXsToGs func(interface{}) (interface{}, error)","xsettings.typeGSKeyInfo.gsKey string","xsettings.typeGSKeyInfo.gsType int","xsettings.typeGSKeyInfo.xsKey string","xsettings.typeGSKeyInfo.xsType *uint8"]}]}
{"Filepath":"xsettings/xsettings_reader.go","Functions":[{"Uniquefunname":"func (info *xsDataInfo) getPropItem(prop string) *xsItemInfo","Funname":"getPropItem","Returntype":"*xsItemInfo","Args":"prop string"},{"Uniquefunname":"func (infos xsItemInfos) listProps() string","Funname":"listProps","Returntype":"string","Args":""},{"Uniquefunname":"func readInteger(reader io.Reader, v interface","Funname":"readInteger","Returntype":"","Args":"reader io.Reader, v interface{}"},{"Uniquefunname":"func readSkip(reader io.Reader, num int)","Funname":"readSkip","Returntype":"","Args":"reader io.Reader, num int"},{"Uniquefunname":"func readString(reader io.Reader, v *string, length int)","Funname":"readString","Returntype":"","Args":"reader io.Reader, v *string, length int"},{"Uniquefunname":"func readXSItemHeader(reader io.Reader, header *xsItemHeader)","Funname":"readXSItemHeader","Returntype":"","Args":"reader io.Reader, header *xsItemHeader"},{"Uniquefunname":"func readXSItemInfo(reader io.Reader, item *xsItemInfo)","Funname":"readXSItemInfo","Returntype":"","Args":"reader io.Reader, item *xsItemInfo"},{"Uniquefunname":"func readXSValueColor(reader io.Reader, v *colorValueInfo)","Funname":"readXSValueColor","Returntype":"","Args":"reader io.Reader, v *colorValueInfo"},{"Uniquefunname":"func readXSValueInteger(reader io.Reader, v *integerValueInfo)","Funname":"readXSValueInteger","Returntype":"","Args":"reader io.Reader, v *integerValueInfo"},{"Uniquefunname":"func readXSValueString(reader io.Reader, v *stringValueInfo)","Funname":"readXSValueString","Returntype":"","Args":"reader io.Reader, v *stringValueInfo"},{"Uniquefunname":"func unmarshalSettingData(data []byte) *xsDataInfo","Funname":"unmarshalSettingData","Returntype":"*xsDataInfo","Args":"data []byte"},{"Uniquefunname":"func readInteger(reader io.Reader, v interface","Funname":"xsettings.readInteger","Returntype":"","Args":"reader io.Reader, v interface{}"},{"Uniquefunname":"func readSkip(reader io.Reader, num int)","Funname":"xsettings.readSkip","Returntype":"","Args":"reader io.Reader, num int"},{"Uniquefunname":"func readString(reader io.Reader, v *string, length int)","Funname":"xsettings.readString","Returntype":"","Args":"reader io.Reader, v *string, length int"},{"Uniquefunname":"func readXSItemHeader(reader io.Reader, header *xsItemHeader)","Funname":"xsettings.readXSItemHeader","Returntype":"","Args":"reader io.Reader, header *xsItemHeader"},{"Uniquefunname":"func readXSItemInfo(reader io.Reader, item *xsItemInfo)","Funname":"xsettings.readXSItemInfo","Returntype":"","Args":"reader io.Reader, item *xsItemInfo"},{"Uniquefunname":"func readXSValueColor(reader io.Reader, v *colorValueInfo)","Funname":"xsettings.readXSValueColor","Returntype":"","Args":"reader io.Reader, v *colorValueInfo"},{"Uniquefunname":"func readXSValueInteger(reader io.Reader, v *integerValueInfo)","Funname":"xsettings.readXSValueInteger","Returntype":"","Args":"reader io.Reader, v *integerValueInfo"},{"Uniquefunname":"func readXSValueString(reader io.Reader, v *stringValueInfo)","Funname":"xsettings.readXSValueString","Returntype":"","Args":"reader io.Reader, v *stringValueInfo"},{"Uniquefunname":"func unmarshalSettingData(data []byte) *xsDataInfo","Funname":"xsettings.unmarshalSettingData","Returntype":"*xsDataInfo","Args":"data []byte"},{"Uniquefunname":"func (info *xsDataInfo) getPropItem(prop string) *xsItemInfo","Funname":"xsettings.xsDataInfo.getPropItem","Returntype":"*xsItemInfo","Args":"prop string"},{"Uniquefunname":"func (infos xsItemInfos) listProps() string","Funname":"xsettings.xsItemInfos.listProps","Returntype":"string","Args":""}],"Records":[{"Name":"struct:xsettings.colorValueInfo","Fields":["xsettings.colorValueInfo.alpha uint16","xsettings.colorValueInfo.blue uint16","xsettings.colorValueInfo.green uint16","xsettings.colorValueInfo.red uint16"]},{"Name":"var:xsettings","Fields":["xsettings.defaultByteOrder"]},{"Name":"struct:xsettings.integerValueInfo","Fields":["xsettings.integerValueInfo.value int32"]},{"Name":"const:xsettings","Fields":["xsettings.settingTypeColor","xsettings.settingTypeInteger","xsettings.settingTypeString"]},{"Name":"struct:xsettings.stringValueInfo","Fields":["xsettings.stringValueInfo.length uint32","xsettings.stringValueInfo.value string"]},{"Name":"struct:xsettings.xsDataInfo","Fields":["xsettings.xsDataInfo.byteOrder uint8","xsettings.xsDataInfo.items xsItemInfos","xsettings.xsDataInfo.numSettings uint32","xsettings.xsDataInfo.serial uint32"]},{"Name":"struct:xsettings.xsItemHeader","Fields":["xsettings.xsItemHeader.lastChangeSerial uint32","xsettings.xsItemHeader.name string","xsettings.xsItemHeader.nameLen uint16","xsettings.xsItemHeader.sType uint8"]},{"Name":"struct:xsettings.xsItemInfo","Fields":["xsettings.xsItemInfo.header *xsItemHeader","xsettings.xsItemInfo.value interface{}"]}]}
{"Filepath":"xsettings/xsettings_setting.go","Functions":[{"Uniquefunname":"func changeSettingProp(owner x.Window, data []byte, conn *x.Conn) error","Funname":"changeSettingProp","Returntype":"error","Args":"owner x.Window, data []byte, conn *x.Conn"},{"Uniquefunname":"func changeWindowPid(conn *x.Conn, wid x.Window) error","Funname":"changeWindowPid","Returntype":"error","Args":"conn *x.Conn, wid x.Window"},{"Uniquefunname":"func createSettingWindow(conn *x.Conn) (x.Window, error)","Funname":"createSettingWindow","Returntype":"(x.Window, error)","Args":"conn *x.Conn"},{"Uniquefunname":"func getAtomByProp(prop string, conn *x.Conn) (x.Atom, error)","Funname":"getAtomByProp","Returntype":"(x.Atom, error)","Args":"prop string, conn *x.Conn"},{"Uniquefunname":"func getSelectionOwner(prop string, conn *x.Conn) (x.Window, error)","Funname":"getSelectionOwner","Returntype":"(x.Window, error)","Args":"prop string, conn *x.Conn"},{"Uniquefunname":"func getSettingPropValue(owner x.Window, conn *x.Conn) ([]byte, error)","Funname":"getSettingPropValue","Returntype":"([]byte, error)","Args":"owner x.Window, conn *x.Conn"},{"Uniquefunname":"func isSelectionOwned(prop string, wid x.Window, conn *x.Conn) bool","Funname":"isSelectionOwned","Returntype":"bool","Args":"prop string, wid x.Window, conn *x.Conn"},{"Uniquefunname":"func pad(n int) int","Funname":"pad","Returntype":"int","Args":"n int"},{"Uniquefunname":"func changeSettingProp(owner x.Window, data []byte, conn *x.Conn) error","Funname":"xsettings.changeSettingProp","Returntype":"error","Args":"owner x.Window, data []byte, conn *x.Conn"},{"Uniquefunname":"func changeWindowPid(conn *x.Conn, wid x.Window) error","Funname":"xsettings.changeWindowPid","Returntype":"error","Args":"conn *x.Conn, wid x.Window"},{"Uniquefunname":"func createSettingWindow(conn *x.Conn) (x.Window, error)","Funname":"xsettings.createSettingWindow","Returntype":"(x.Window, error)","Args":"conn *x.Conn"},{"Uniquefunname":"func getAtomByProp(prop string, conn *x.Conn) (x.Atom, error)","Funname":"xsettings.getAtomByProp","Returntype":"(x.Atom, error)","Args":"prop string, conn *x.Conn"},{"Uniquefunname":"func getSelectionOwner(prop string, conn *x.Conn) (x.Window, error)","Funname":"xsettings.getSelectionOwner","Returntype":"(x.Window, error)","Args":"prop string, conn *x.Conn"},{"Uniquefunname":"func getSettingPropValue(owner x.Window, conn *x.Conn) ([]byte, error)","Funname":"xsettings.getSettingPropValue","Returntype":"([]byte, error)","Args":"owner x.Window, conn *x.Conn"},{"Uniquefunname":"func isSelectionOwned(prop string, wid x.Window, conn *x.Conn) bool","Funname":"xsettings.isSelectionOwned","Returntype":"bool","Args":"prop string, wid x.Window, conn *x.Conn"},{"Uniquefunname":"func pad(n int) int","Funname":"xsettings.pad","Returntype":"int","Args":"n int"}],"Records":[{"Name":"const:xsettings","Fields":["xsettings.settingPropScreen","xsettings.settingPropSettings","xsettings.xsDataFormat","xsettings.xsDataOrder","xsettings.xsDataSerial"]}]}
{"Filepath":"xsettings/xsettings_test.go","Functions":[{"Uniquefunname":"func Test(t *testing.T)","Funname":"Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (*testWrapper) TestGetFirefoxConfigs(c *C.C)","Funname":"TestGetFirefoxConfigs","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrapper) TestNewXSItemColor(c *C.C)","Funname":"TestNewXSItemColor","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrapper) TestNewXSItemInteger(c *C.C)","Funname":"TestNewXSItemInteger","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrapper) TestNewXSItemString(c *C.C)","Funname":"TestNewXSItemString","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrapper) TestSetFirefoxDPI(c *C.C)","Funname":"TestSetFirefoxDPI","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrapper) TestXSReader(c *C.C)","Funname":"TestXSReader","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrapper) TestXSWriter(c *C.C)","Funname":"TestXSWriter","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func Test(t *testing.T)","Funname":"xsettings.Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func init()","Funname":"xsettings.init","Returntype":"","Args":""},{"Uniquefunname":"func (*testWrapper) TestGetFirefoxConfigs(c *C.C)","Funname":"xsettings.testWrapper.TestGetFirefoxConfigs","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrapper) TestNewXSItemColor(c *C.C)","Funname":"xsettings.testWrapper.TestNewXSItemColor","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrapper) TestNewXSItemInteger(c *C.C)","Funname":"xsettings.testWrapper.TestNewXSItemInteger","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrapper) TestNewXSItemString(c *C.C)","Funname":"xsettings.testWrapper.TestNewXSItemString","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrapper) TestSetFirefoxDPI(c *C.C)","Funname":"xsettings.testWrapper.TestSetFirefoxDPI","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrapper) TestXSReader(c *C.C)","Funname":"xsettings.testWrapper.TestXSReader","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrapper) TestXSWriter(c *C.C)","Funname":"xsettings.testWrapper.TestXSWriter","Returntype":"","Args":"c *C.C"}],"Records":[{"Name":"var:xsettings","Fields":["xsettings.xsTestDatas","xsettings.xsTestInfo"]}]}
{"Filepath":"xsettings/xsettings_writer.go","Functions":[{"Uniquefunname":"func (item *xsItemInfo) changePropValue(value interface","Funname":"changePropValue","Returntype":"","Args":"value interface{}"},{"Uniquefunname":"func (item *xsItemInfo) changeValueColor(value [4]uint16)","Funname":"changeValueColor","Returntype":"","Args":"value [4]uint16"},{"Uniquefunname":"func (item *xsItemInfo) changeValueInteger(value int32)","Funname":"changeValueInteger","Returntype":"","Args":"value int32"},{"Uniquefunname":"func (item *xsItemInfo) changeValueString(value string)","Funname":"changeValueString","Returntype":"","Args":"value string"},{"Uniquefunname":"func marshalSettingData(info *xsDataInfo) []byte","Funname":"marshalSettingData","Returntype":"[]byte","Args":"info *xsDataInfo"},{"Uniquefunname":"func (info *xsDataInfo) modifyProperty(setting xsSetting) xsItemInfos","Funname":"modifyProperty","Returntype":"xsItemInfos","Args":"setting xsSetting"},{"Uniquefunname":"func newXSItemColor(prop string, v [4]uint16) *xsItemInfo","Funname":"newXSItemColor","Returntype":"*xsItemInfo","Args":"prop string, v [4]uint16"},{"Uniquefunname":"func newXSItemHeader(prop string) *xsItemHeader","Funname":"newXSItemHeader","Returntype":"*xsItemHeader","Args":"prop string"},{"Uniquefunname":"func newXSItemInteger(prop string, v int32) *xsItemInfo","Funname":"newXSItemInteger","Returntype":"*xsItemInfo","Args":"prop string, v int32"},{"Uniquefunname":"func newXSItemString(prop string, v string) *xsItemInfo","Funname":"newXSItemString","Returntype":"*xsItemInfo","Args":"prop string, v string"},{"Uniquefunname":"func writeInteger(writer io.Writer, v interface","Funname":"writeInteger","Returntype":"","Args":"writer io.Writer, v interface{}"},{"Uniquefunname":"func writeSkip(writer io.Writer, num int)","Funname":"writeSkip","Returntype":"","Args":"writer io.Writer, num int"},{"Uniquefunname":"func writeString(writer io.Writer, v string)","Funname":"writeString","Returntype":"","Args":"writer io.Writer, v string"},{"Uniquefunname":"func writeXSInfoHeader(writer io.Writer, header *xsItemHeader)","Funname":"writeXSInfoHeader","Returntype":"","Args":"writer io.Writer, header *xsItemHeader"},{"Uniquefunname":"func writeXSItemInfo(writer io.Writer, item *xsItemInfo)","Funname":"writeXSItemInfo","Returntype":"","Args":"writer io.Writer, item *xsItemInfo"},{"Uniquefunname":"func writeXSValueColor(writer io.Writer, v *colorValueInfo)","Funname":"writeXSValueColor","Returntype":"","Args":"writer io.Writer, v *colorValueInfo"},{"Uniquefunname":"func writeXSValueInteger(writer io.Writer, v *integerValueInfo)","Funname":"writeXSValueInteger","Returntype":"","Args":"writer io.Writer, v *integerValueInfo"},{"Uniquefunname":"func writeXSValueString(writer io.Writer, v *stringValueInfo)","Funname":"writeXSValueString","Returntype":"","Args":"writer io.Writer, v *stringValueInfo"},{"Uniquefunname":"func marshalSettingData(info *xsDataInfo) []byte","Funname":"xsettings.marshalSettingData","Returntype":"[]byte","Args":"info *xsDataInfo"},{"Uniquefunname":"func newXSItemColor(prop string, v [4]uint16) *xsItemInfo","Funname":"xsettings.newXSItemColor","Returntype":"*xsItemInfo","Args":"prop string, v [4]uint16"},{"Uniquefunname":"func newXSItemHeader(prop string) *xsItemHeader","Funname":"xsettings.newXSItemHeader","Returntype":"*xsItemHeader","Args":"prop string"},{"Uniquefunname":"func newXSItemInteger(prop string, v int32) *xsItemInfo","Funname":"xsettings.newXSItemInteger","Returntype":"*xsItemInfo","Args":"prop string, v int32"},{"Uniquefunname":"func newXSItemString(prop string, v string) *xsItemInfo","Funname":"xsettings.newXSItemString","Returntype":"*xsItemInfo","Args":"prop string, v string"},{"Uniquefunname":"func writeInteger(writer io.Writer, v interface","Funname":"xsettings.writeInteger","Returntype":"","Args":"writer io.Writer, v interface{}"},{"Uniquefunname":"func writeSkip(writer io.Writer, num int)","Funname":"xsettings.writeSkip","Returntype":"","Args":"writer io.Writer, num int"},{"Uniquefunname":"func writeString(writer io.Writer, v string)","Funname":"xsettings.writeString","Returntype":"","Args":"writer io.Writer, v string"},{"Uniquefunname":"func writeXSInfoHeader(writer io.Writer, header *xsItemHeader)","Funname":"xsettings.writeXSInfoHeader","Returntype":"","Args":"writer io.Writer, header *xsItemHeader"},{"Uniquefunname":"func writeXSItemInfo(writer io.Writer, item *xsItemInfo)","Funname":"xsettings.writeXSItemInfo","Returntype":"","Args":"writer io.Writer, item *xsItemInfo"},{"Uniquefunname":"func writeXSValueColor(writer io.Writer, v *colorValueInfo)","Funname":"xsettings.writeXSValueColor","Returntype":"","Args":"writer io.Writer, v *colorValueInfo"},{"Uniquefunname":"func writeXSValueInteger(writer io.Writer, v *integerValueInfo)","Funname":"xsettings.writeXSValueInteger","Returntype":"","Args":"writer io.Writer, v *integerValueInfo"},{"Uniquefunname":"func writeXSValueString(writer io.Writer, v *stringValueInfo)","Funname":"xsettings.writeXSValueString","Returntype":"","Args":"writer io.Writer, v *stringValueInfo"},{"Uniquefunname":"func (info *xsDataInfo) modifyProperty(setting xsSetting) xsItemInfos","Funname":"xsettings.xsDataInfo.modifyProperty","Returntype":"xsItemInfos","Args":"setting xsSetting"},{"Uniquefunname":"func (item *xsItemInfo) changePropValue(value interface","Funname":"xsettings.xsItemInfo.changePropValue","Returntype":"","Args":"value interface{}"},{"Uniquefunname":"func (item *xsItemInfo) changeValueColor(value [4]uint16)","Funname":"xsettings.xsItemInfo.changeValueColor","Returntype":"","Args":"value [4]uint16"},{"Uniquefunname":"func (item *xsItemInfo) changeValueInteger(value int32)","Funname":"xsettings.xsItemInfo.changeValueInteger","Returntype":"","Args":"value int32"},{"Uniquefunname":"func (item *xsItemInfo) changeValueString(value string)","Funname":"xsettings.xsItemInfo.changeValueString","Returntype":"","Args":"value string"}],"Records":null}
{"Filepath":"xsettings/xsettings_xresource.go","Functions":[{"Uniquefunname":"func (infos xresourceInfos) Get(key string) *xresourceInfo","Funname":"Get","Returntype":"*xresourceInfo","Args":"key string"},{"Uniquefunname":"func (infos xresourceInfos) UpdateProperty(key, value string) xresourceInfos","Funname":"UpdateProperty","Returntype":"xresourceInfos","Args":"key, value string"},{"Uniquefunname":"func marshalXResources(infos xresourceInfos) string","Funname":"marshalXResources","Returntype":"string","Args":"infos xresourceInfos"},{"Uniquefunname":"func unmarshalXResources(data string) xresourceInfos","Funname":"unmarshalXResources","Returntype":"xresourceInfos","Args":"data string"},{"Uniquefunname":"func updateXResources(changes xresourceInfos)","Funname":"updateXResources","Returntype":"","Args":"changes xresourceInfos"},{"Uniquefunname":"func marshalXResources(infos xresourceInfos) string","Funname":"xsettings.marshalXResources","Returntype":"string","Args":"infos xresourceInfos"},{"Uniquefunname":"func unmarshalXResources(data string) xresourceInfos","Funname":"xsettings.unmarshalXResources","Returntype":"xresourceInfos","Args":"data string"},{"Uniquefunname":"func updateXResources(changes xresourceInfos)","Funname":"xsettings.updateXResources","Returntype":"","Args":"changes xresourceInfos"},{"Uniquefunname":"func (infos xresourceInfos) Get(key string) *xresourceInfo","Funname":"xsettings.xresourceInfos.Get","Returntype":"*xresourceInfo","Args":"key string"},{"Uniquefunname":"func (infos xresourceInfos) UpdateProperty(key, value string) xresourceInfos","Funname":"xsettings.xresourceInfos.UpdateProperty","Returntype":"xresourceInfos","Args":"key, value string"}],"Records":[{"Name":"struct:xsettings.xresourceInfo","Fields":["xsettings.xresourceInfo.key string","xsettings.xresourceInfo.value string"]}]}
